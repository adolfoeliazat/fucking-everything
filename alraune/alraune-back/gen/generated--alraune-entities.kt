/*
 * (C) Copyright 2017 Vladimir Grechka
 *
 * YOU DON'T MESS AROUND WITH THIS SHIT, IT WAS GENERATED BY A TOOL SMARTER THAN YOU
 */

//
// Generated on Thu May 18 15:36:22 EEST 2017
// Model: e:/fegh/alraune/alraune-back/src/alraune-entities.kt
//

package alraune.back

import kotlin.reflect.KClass
import vgrechka.*
import vgrechka.spew.*
import kotlin.properties.Delegates.notNull
import kotlin.reflect.KMutableProperty1

// ------------------------------------------------------------------
// AlUser
// ------------------------------------------------------------------

// Generated at e-68337cd-2d2d-4aa0-bfcc-e6423096599d
fun newAlUser(
    firstName: String,
    email: String,
    lastName: String,
    passwordHash: String,
    profilePhone: String,
    adminNotes: String,
    aboutMe: String,
    profileRejectionReason: String?,
    banReason: String?,
    subscribedToAllCategories: Boolean
): AlUser {
    return Generated_AlUser().also {
        it.firstName = firstName
        it.email = email
        it.lastName = lastName
        it.passwordHash = passwordHash
        it.profilePhone = profilePhone
        it.adminNotes = adminNotes
        it.aboutMe = aboutMe
        it.profileRejectionReason = profileRejectionReason
        it.banReason = banReason
        it.subscribedToAllCategories = subscribedToAllCategories
    }
}

val alUserRepo: AlUserRepository by lazy {
    object : AlUserRepository {
        override fun select(prop: KMutableProperty1<AlUser, String>, op: DBPile.Operator, arg: Any?): List<AlUser> {
            println("findBy(prop = ${prop.name}; op = ${op.toString()}; arg = $arg)")
            val params = mutableListOf<Any?>()
            val sql = buildString {
                ln("select")
                ln("    cast(id as char),")
                ln("    unix_timestamp(alUser_common_createdAt),")
                ln("    unix_timestamp(alUser_common_updatedAt),")
                ln("    alUser_common_deleted,")
                ln("    alUser_firstName,")
                ln("    alUser_email,")
                ln("    alUser_lastName,")
                ln("    alUser_passwordHash,")
                ln("    alUser_profilePhone,")
                ln("    alUser_adminNotes,")
                ln("    alUser_aboutMe,")
                ln("    alUser_profileRejectionReason,")
                ln("    alUser_banReason,")
                ln("    alUser_subscribedToAllCategories")
                ln("from `alraune_users`")
                ln("where")
                ln("${propertyToColumnName(prop)} ${op.sql} ?")
                params.add(arg)
            }
            val rows = DBPile.query(sql, params, uuid = "26a933e5-97ea-4516-8475-135c2943f8a3")
            println("findBy: Found ${rows.size} rows")
            val items = mutableListOf<AlUser>()
            for (row in rows) {
//                run {
//                    val value = row[13]
//                    println("--- type = ${PHPPile.getType(value)}; value = $value")
//                }
                items += Generated_AlUser().also {
                    it.id = row[0] as String
                    it.createdAt = DBPile.mysqlValueToPHPTimestamp(row[1])
                    it.updatedAt = DBPile.mysqlValueToPHPTimestamp(row[2])
                    it.deleted = DBPile.mysqlValueToBoolean(row[3])
                    it.firstName = row[4] as String
                    it.email = row[5] as String
                    it.lastName = row[6] as String
                    it.passwordHash = row[7] as String
                    it.profilePhone = row[8] as String
                    it.adminNotes = row[9] as String
                    it.aboutMe = row[10] as String
                    it.profileRejectionReason = row[11] as String?
                    it.banReason = row[12] as String?
                    it.subscribedToAllCategories = DBPile.mysqlValueToBoolean(row[13])
                }
            }
            return items
        }
        override fun insert(x: AlUser): AlUser {
            DBPile.execute(
                sql = buildString {
                    ln("insert into `alraune_users`(")
                    ln("    `alUser_common_createdAt`,")
                    ln("    `alUser_common_updatedAt`,")
                    ln("    `alUser_common_deleted`,")
                    ln("    `alUser_firstName`,")
                    ln("    `alUser_email`,")
                    ln("    `alUser_lastName`,")
                    ln("    `alUser_passwordHash`,")
                    ln("    `alUser_profilePhone`,")
                    ln("    `alUser_adminNotes`,")
                    ln("    `alUser_aboutMe`,")
                    ln("    `alUser_profileRejectionReason`,")
                    ln("    `alUser_banReason`,")
                    ln("    `alUser_subscribedToAllCategories`")
                    ln(") values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)")
                },
                params = listOf(
                    phiEval("return gmdate('Y-m-d H:i:s', ${x.createdAt.time});") as String,
                    phiEval("return gmdate('Y-m-d H:i:s', ${x.updatedAt.time});") as String,
                    x.deleted,
                    x.firstName,
                    x.email,
                    x.lastName,
                    x.passwordHash,
                    x.profilePhone,
                    x.adminNotes,
                    x.aboutMe,
                    x.profileRejectionReason,
                    x.banReason,
                    x.subscribedToAllCategories
                ),
                uuid = "396ddcaa-c7a3-4934-a6d4-5a26d0b55288"
            )

            val res = DBPile.query(
                sql = "select cast(last_insert_id() as char)",
                uuid = "2a0b11dc-8090-435a-a104-7c9c6a06ce30"
            )

            x.id = res.first().first() as String
            return x
        }
    }
}
class Generated_AlUser : AlUser {
    override var id by notNull<String>()
    override var createdAt: PHPTimestamp = DBPile.currentTimestampForEntity()
    override var updatedAt= createdAt
    override var deleted= false
    override var firstName by notNull<String>()
    override var email by notNull<String>()
    override var lastName by notNull<String>()
    override var passwordHash by notNull<String>()
    override var profilePhone by notNull<String>()
    override var adminNotes by notNull<String>()
    override var aboutMe by notNull<String>()
    override var profileRejectionReason: String? = null
    override var banReason: String? = null
    override var subscribedToAllCategories by notNull<Boolean>()

    override fun toString(): String {
        return buildString {
            append("AlUser(")
            append("id=$id, ")
            append("createdAt=${phiEval("return gmdate('Y-m-d H:i:s', ${createdAt.time});") as String}, ")
            append("updatedAt=${phiEval("return gmdate('Y-m-d H:i:s', ${createdAt.time});") as String}, ")
            append("deleted=$deleted, ")
            append("firstName=$firstName, ")
            append("email=$email, ")
            append("lastName=$lastName, ")
            append("profilePhone=$profilePhone, ")
            append("adminNotes=$adminNotes, ")
            append("aboutMe=$aboutMe, ")
            append("profileRejectionReason=$profileRejectionReason, ")
            append("banReason=$banReason, ")
            append("subscribedToAllCategories=$subscribedToAllCategories")
            append(")")
        }
    }
}

object AlGeneratedDBPile {
    object ddl {
        val dropCreateAllScript = """
drop table if exists `alraune_users`;
create table `alraune_users` (
    id bigint not null auto_increment primary key,
    alUser_common_createdAt datetime not null,
    alUser_common_updatedAt datetime not null,
    alUser_common_deleted boolean not null,
    alUser_id longtext not null,
    alUser_createdAt datetime not null,
    alUser_updatedAt datetime not null,
    alUser_deleted boolean not null,
    alUser_firstName longtext not null,
    alUser_email longtext not null,
    alUser_lastName longtext not null,
    alUser_passwordHash longtext not null,
    alUser_profilePhone longtext not null,
    alUser_adminNotes longtext not null,
    alUser_aboutMe longtext not null,
    alUser_profileRejectionReason longtext,
    alUser_banReason longtext,
    alUser_subscribedToAllCategories boolean not null
);

        """
    }
}


/*
DDL
===

drop table if exists `alraune_users`;
create table `alraune_users` (
    id bigint not null auto_increment primary key,
    alUser_common_createdAt datetime not null,
    alUser_common_updatedAt datetime not null,
    alUser_common_deleted boolean not null,
    alUser_id longtext not null,
    alUser_createdAt datetime not null,
    alUser_updatedAt datetime not null,
    alUser_deleted boolean not null,
    alUser_firstName longtext not null,
    alUser_email longtext not null,
    alUser_lastName longtext not null,
    alUser_passwordHash longtext not null,
    alUser_profilePhone longtext not null,
    alUser_adminNotes longtext not null,
    alUser_aboutMe longtext not null,
    alUser_profileRejectionReason longtext,
    alUser_banReason longtext,
    alUser_subscribedToAllCategories boolean not null
);

*/