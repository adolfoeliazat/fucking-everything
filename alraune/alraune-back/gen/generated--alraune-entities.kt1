/*
 * (C) Copyright 2017 Vladimir Grechka
 *
 * YOU DON'T MESS AROUND WITH THIS SHIT, IT WAS GENERATED BY A TOOL SMARTER THAN YOU
 */

//
// Generated on Wed May 17 17:43:16 EEST 2017
// Model: e:/fegh/alraune/alraune-back/src/alraune-entities.kt
//

package alraune.back

import kotlin.reflect.KClass
import vgrechka.*
import vgrechka.spew.*
import vgrechka.db.*

// ------------------------------------------------------------------
// AlUser
// ------------------------------------------------------------------

// Generated at 7-470173f-49ef-43cb-adf7-1c395f07518c
fun newAlUser(firstName: String,
              email: String,
              lastName: String,
              passwordHash: String,
              profilePhone: String,
              adminNotes: String,
              aboutMe: String,
              profileRejectionReason: String?,
              banReason: String?,
              subscribedToAllCategories: Boolean): AlUser {
    val backing = Generated_AlUser(
        Generated_AlUserFields().also {it.firstName = firstName
                                       it.email = email
                                       it.lastName = lastName
                                       it.passwordHash = passwordHash
                                       it.profilePhone = profilePhone
                                       it.adminNotes = adminNotes
                                       it.aboutMe = aboutMe
                                       it.profileRejectionReason = profileRejectionReason._backing
                                       it.banReason = banReason._backing
                                       it.subscribedToAllCategories = java.lang.Boolean(subscribedToAllCategories)})
    return backing.toManuallyDefinedInterface()
}

val AlUser._backing
    get() = (this as Generated_AlUserBackingProvider)._backing

val alUserRepo: AlUserRepository by lazy {
    val generatedRepo = backPlatform.springctx.getBean(Generated_AlUserRepository::class.java)!!

    object:AlUserRepository {
        override fun findOne(id: Long): AlUser? {
            val shit = generatedRepo.findOne(id)
            return shit?.toManuallyDefinedInterface()
        }

        override fun findAll(): List<AlUser> {
            val shit = generatedRepo.findAll()
            return shit.map {it.toManuallyDefinedInterface()}
        }

        override fun save(x: AlUser): AlUser {
            val shit = generatedRepo.save(x._backing)
            return shit.toManuallyDefinedInterface()
        }

        override fun delete(id: Long) {
            generatedRepo.delete(id)
        }

        override fun delete(x : AlUser) {
            generatedRepo.delete(x._backing)
        }

        override fun findByName(x: String): AlUser? {
            val shit = generatedRepo.findByAlUser_Name(x)
            return shit?.toManuallyDefinedInterface()
        }
    }
}

interface Generated_AlUserRepository : XCrudRepository<Generated_AlUser, Long> {
    fun findByAlUser_Name(x: String): Generated_AlUser?
}

interface Generated_AlUserBackingProvider : DBCodeGenUtils.GeneratedBackingEntityProvider<Generated_AlUser> {
    override val _backing: Generated_AlUser
}

@XEntity @XTable(name = "alraune_users")
class Generated_AlUser( // Generated at f-21265f2-3d69-4ab8-a07c-5595106a9e6b
    @XEmbedded var alUser: Generated_AlUserFields
)
    : ClitoralEntity0(), DBCodeGenUtils.GeneratedEntity<AlUser>
{
    override fun toManuallyDefinedInterface(): AlUser {
        return object : AlUser, Generated_AlUserBackingProvider {
            override val _backing: Generated_AlUser
                get() = this@Generated_AlUser

            override var id: Long
                get() = _backing.id!!
                set(value) {_backing.id = value}

            override var createdAt: XTimestamp
                get() = _backing.alUser.common.createdAt
                set(value) {_backing.alUser.common.createdAt = value}

            override var updatedAt: XTimestamp
                get() = _backing.alUser.common.updatedAt
                set(value) {_backing.alUser.common.updatedAt = value}

            override var deleted: Boolean
                get() = _backing.alUser.common.deleted
                set(value) {_backing.alUser.common.deleted = value}

            override var firstName: String
                get() = _backing.alUser.firstName
                set(value) {_backing.alUser.firstName = value}

            override var email: String
                get() = _backing.alUser.email
                set(value) {_backing.alUser.email = value}

            override var lastName: String
                get() = _backing.alUser.lastName
                set(value) {_backing.alUser.lastName = value}

            override var passwordHash: String
                get() = _backing.alUser.passwordHash
                set(value) {_backing.alUser.passwordHash = value}

            override var profilePhone: String
                get() = _backing.alUser.profilePhone
                set(value) {_backing.alUser.profilePhone = value}

            override var adminNotes: String
                get() = _backing.alUser.adminNotes
                set(value) {_backing.alUser.adminNotes = value}

            override var aboutMe: String
                get() = _backing.alUser.aboutMe
                set(value) {_backing.alUser.aboutMe = value}

            override var profileRejectionReason: String?
                get() = _backing.alUser.profileRejectionReason
                set(value) {_backing.alUser.profileRejectionReason = value}

            override var banReason: String?
                get() = _backing.alUser.banReason
                set(value) {_backing.alUser.banReason = value}

            override var subscribedToAllCategories: Boolean
                get() = _backing.alUser.subscribedToAllCategories.booleanValue()
                set(value) {_backing.alUser.subscribedToAllCategories = java.lang.Boolean(value)}

            override fun toString() = _backing.toString()

            override fun hashCode() = _backing.hashCode()

            override fun equals(other: Any?): Boolean {
                val otherShit = other as? Generated_AlUserBackingProvider ?: return false
                return _backing == otherShit._backing
            }
        }
    }

    override fun toString(): String {
        return "AlUser(firstName=${alUser.firstName}, email=${alUser.email}, lastName=${alUser.lastName}, passwordHash=${alUser.passwordHash}, profilePhone=${alUser.profilePhone}, adminNotes=${alUser.adminNotes}, aboutMe=${alUser.aboutMe}, subscribedToAllCategories=${alUser.subscribedToAllCategories})"
    }
}

@XEmbeddable
class Generated_AlUserFields { // Generated at 2-e91acff-5613-4b14-b71e-5edee254d029
    @XEmbedded var common: CommonFields = CommonFields()
    @XColumn(columnDefinition = "text") lateinit var firstName: String
    @XColumn(columnDefinition = "text") lateinit var email: String
    @XColumn(columnDefinition = "text") lateinit var lastName: String
    @XColumn(columnDefinition = "text") lateinit var passwordHash: String
    @XColumn(columnDefinition = "text") lateinit var profilePhone: String
    @XColumn(columnDefinition = "text") lateinit var adminNotes: String
    @XColumn(columnDefinition = "text") lateinit var aboutMe: String
    @XColumn var profileRejectionReason: String? = null
    @XColumn var banReason: String? = null
    @XColumn lateinit var subscribedToAllCategories: java.lang.Boolean
}

object AlGeneratedDBPile {
    object ddl {
        val dropCreateAllScript = """
drop table if exists `alraune_users`;
create table `alraune_users` (
    id bigint not null auto_increment primary key,
    alUser_common_createdAt datetime not null,
    alUser_common_updatedAt datetime not null,
    alUser_common_deleted boolean not null,
    alUser_firstName longtext not null,
    alUser_email longtext not null,
    alUser_lastName longtext not null,
    alUser_passwordHash longtext not null,
    alUser_profilePhone longtext not null,
    alUser_adminNotes longtext not null,
    alUser_aboutMe longtext not null,
    alUser_profileRejectionReason longtext,
    alUser_banReason longtext,
    alUser_subscribedToAllCategories boolean not null
);

        """
    }
}


/*
DDL
===

drop table if exists `alraune_users`;
create table `alraune_users` (
    id bigint not null auto_increment primary key,
    alUser_common_createdAt datetime not null,
    alUser_common_updatedAt datetime not null,
    alUser_common_deleted boolean not null,
    alUser_firstName longtext not null,
    alUser_email longtext not null,
    alUser_lastName longtext not null,
    alUser_passwordHash longtext not null,
    alUser_profilePhone longtext not null,
    alUser_adminNotes longtext not null,
    alUser_aboutMe longtext not null,
    alUser_profileRejectionReason longtext,
    alUser_banReason longtext,
    alUser_subscribedToAllCategories boolean not null
);

*/