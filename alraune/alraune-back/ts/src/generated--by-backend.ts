/*
 * (C) Copyright 2017 Vladimir Grechka
 *
 * YOU DON'T MESS AROUND WITH THIS SHIT, IT WAS GENERATED BY A TOOL SMARTER THAN YOU
 */

//
// Generated on Tue May 30 12:50:53 GMT 2017
//

const AlDomid = {
    closeModalButton: "closeModalButton",
    deleteItemCancelButton: "deleteItemCancelButton",
    deleteItemIcon: "deleteItemIcon",
    deleteItemModal: "deleteItemModal",
    deleteItemModalContent: "deleteItemModalContent",
    deleteItemSubmitButton: "deleteItemSubmitButton",
    deleteItemTicker: "deleteItemTicker",
    documentCategoryPickerContainer: "documentCategoryPickerContainer",
    downloadItemIcon: "downloadItemIcon",
    editItemIcon: "editItemIcon",
    filePickerContainer: "filePickerContainer",
    formBannerArea: "formBannerArea",
    formFooterArea: "formFooterArea",
    itemShit: "itemShit",
    modalContent: "modalContent",
    orderParamsModal: "orderParamsModal",
    replaceableContent: "replaceableContent",
    serviceFuckedUpBanner: "serviceFuckedUpBanner",
    shitPassedFromBackToFront: "shitPassedFromBackToFront",
    shitPassedFromBackToFront2: "shitPassedFromBackToFront2",
    submitButton: "submitButton",
    submitOrderForReviewButton: "submitOrderForReviewButton",
    ticker: "ticker",
    topRightButton: "topRightButton",
}

const AlFormPropNames = {

    OrderParams: {
        orderUUID: "orderUUID",
        email: "email",
        name: "name",
        phone: "phone",
        documentType: "documentType",
        documentTitle: "documentTitle",
        documentDetails: "documentDetails",
        documentCategory: "documentCategory",
        numPages: "numPages",
        numSources: "numSources",
    },

    OrderFile: {
        orderUUID: "orderUUID",
        fileUUID: "fileUUID",
        name: "name",
        title: "title",
        details: "details",
    },
}

namespace AlBackToFrontCommand {

    export interface SayWarmFuckYou {
        opcode: "SayWarmFuckYou"
        toWhom: string
    }

    export interface SetClickHandler {
        opcode: "SetClickHandler"
        targetDomid: string
        actions: Type[]
    }

    export interface OpenModalOnElementClick {
        opcode: "OpenModalOnElementClick"
        triggerElementDomid: string
        modalHtml: string
        initCommands: Type[]
    }

    export interface CreateTextControl {
        opcode: "CreateTextControl"
        placeHolderDomid: string
        propName: string
        value: string
    }

    export type Type = SayWarmFuckYou | SetClickHandler | OpenModalOnElementClick | CreateTextControl
}
