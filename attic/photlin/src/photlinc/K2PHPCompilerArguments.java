package photlinc;

import com.sampullara.cli.Argument;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.kotlin.cli.common.arguments.CommonCompilerArguments;
import org.jetbrains.kotlin.cli.common.arguments.DefaultValues;
import org.jetbrains.kotlin.cli.common.arguments.GradleOption;
import org.jetbrains.kotlin.cli.common.arguments.ValueDescription;

import static photlinc.K2PHPArgumentConstants.CALL;
import static photlinc.K2PHPArgumentConstants.NO_CALL;

public class K2PHPCompilerArguments extends CommonCompilerArguments {
    public static final long serialVersionUID = 0L;

    @GradleOption(DefaultValues.StringNullDefault.class)
    @Argument(value = "output", description = "Output file path")
    @ValueDescription("<path>")
    public String outputFile;

    @GradleOption(DefaultValues.BooleanTrueDefault.class)
    @Argument(value = "no-stdlib", description = "Don't use bundled Kotlin stdlib")
    public boolean noStdlib;

    @Argument(value = "libraries", description = "Paths to Kotlin libraries with .meta.js and .kjsm files, separated by system file separator")
    @ValueDescription("<path>")
    public String libraries;

    @GradleOption(DefaultValues.BooleanFalseDefault.class)
    @Argument(value = "source-map", description = "Generate source map")
    public boolean sourceMap;

    @GradleOption(DefaultValues.BooleanTrueDefault.class)
    @Argument(value = "meta-info", description = "Generate .meta.js and .kjsm files with metadata. Use to create a library")
    public boolean metaInfo;

    @GradleOption(DefaultValues.JsEcmaVersions.class)
    @Argument(value = "target", description = "Generate JS files for specific ECMA version")
    @ValueDescription("{ v5 }")
    public String target;

    @GradleOption(DefaultValues.JsModuleKinds.class)
    @Argument(value = "module-kind", description = "Kind of a module generated by compiler")
    @ValueDescription("{ plain, amd, commonjs, umd }")
    public String moduleKind;

    @GradleOption(DefaultValues.JsMain.class)
    @Nullable
    @Argument(value = "main", description = "Whether a main function should be called")
    @ValueDescription("{" + CALL + "," + NO_CALL + "}")
    public String main;

    @Argument(value = "output-prefix", description = "Path to file which will be added to the beginning of output file")
    @ValueDescription("<path>")
    public String outputPrefix;

    @Argument(value = "output-postfix", description = "Path to file which will be added to the end of output file")
    @ValueDescription("<path>")
    public String outputPostfix;

    @Override
    @NotNull
    public String executableScriptFileName() {
        return "kotlinc-js";
    }
}

