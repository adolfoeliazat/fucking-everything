/*
 * (C) Copyright 2017 Vladimir Grechka
 *
 * YOU DON'T MESS AROUND WITH THIS SHIT, IT WAS GENERATED BY A TOOL SMARTER THAN YOU
 */

package vgrechka.botinok

import kotlin.reflect.KClass
import vgrechka.*
import vgrechka.spew.*
import vgrechka.db.*

// Fuck you    Thu Apr 27 13:30:30 EEST 2017

// ------------------------------------------------------------------
// BotinokBox
// ------------------------------------------------------------------

fun newBotinokBox(x: Int,
                  y: Int,
                  w: Int,
                  h: Int): BotinokBox {
    val backing = Generated_BotinokBox(
        Generated_BotinokBoxFields(x = x,
                                   y = y,
                                   w = w,
                                   h = h))
    return backing.toManuallyDefinedInterface()
}

val BotinokBox._backing
    get() = (this as Generated_BotinokBoxBackingProvider)._backing

val botinokBoxRepo: BotinokBoxRepository by lazy {
    val generatedRepo = backPlatform.springctx.getBean(Generated_BotinokBoxRepository::class.java)!!

    object:BotinokBoxRepository {
        override fun save(x: BotinokBox): BotinokBox {
            val shit = generatedRepo.save(x._backing)
            return shit.toManuallyDefinedInterface()
        }

        override fun findAll(): List<BotinokBox> {
            val shit = generatedRepo.findAll()
            return shit.map {it.toManuallyDefinedInterface()}
        }
    }
}

interface Generated_BotinokBoxRepository : XCrudRepository<Generated_BotinokBox, Long> {
}

interface Generated_BotinokBoxBackingProvider : DBCodeGenUtils.GeneratedBackingEntityProvider<Generated_BotinokBox> {
    override val _backing: Generated_BotinokBox
}

@XEntity @XTable(name = "botinok_boxes")
class Generated_BotinokBox(
    @XEmbedded var botinokBox: Generated_BotinokBoxFields
)
    : ClitoralEntity0(), DBCodeGenUtils.GeneratedEntity<BotinokBox>
{
    override fun toManuallyDefinedInterface(): BotinokBox {
        return object : BotinokBox, Generated_BotinokBoxBackingProvider {
            override val _backing: Generated_BotinokBox
                get() = this@Generated_BotinokBox

            override var id: Long
                get() = _backing.id!!
                set(value) {_backing.id = value}

            override var createdAt: XTimestamp
                get() = _backing.botinokBox.common.createdAt
                set(value) {_backing.botinokBox.common.createdAt = value}

            override var updatedAt: XTimestamp
                get() = _backing.botinokBox.common.updatedAt
                set(value) {_backing.botinokBox.common.updatedAt = value}

            override var deleted: Boolean
                get() = _backing.botinokBox.common.deleted
                set(value) {_backing.botinokBox.common.deleted = value}

            override var x: Int
                get() = _backing.botinokBox.x
                set(value) {_backing.botinokBox.x = value}

            override var y: Int
                get() = _backing.botinokBox.y
                set(value) {_backing.botinokBox.y = value}

            override var w: Int
                get() = _backing.botinokBox.w
                set(value) {_backing.botinokBox.w = value}

            override var h: Int
                get() = _backing.botinokBox.h
                set(value) {_backing.botinokBox.h = value}

            override fun toString() = _backing.toString()

            override fun hashCode() = _backing.hashCode()

            override fun equals(other: Any?): Boolean {
                val otherShit = other as? Generated_BotinokBoxBackingProvider ?: return false
                return _backing == otherShit._backing
            }
        }
    }

    override fun toString(): String {
        return "BotinokBox(x=${botinokBox.x}, y=${botinokBox.y}, w=${botinokBox.w}, h=${botinokBox.h})"
    }
}

@XEmbeddable
class Generated_BotinokBoxFields(
    @XEmbedded var common: CommonFields = CommonFields(),
    @XColumn var x: Int,
    @XColumn var y: Int,
    @XColumn var w: Int,
    @XColumn var h: Int
)



/*
DDL
===

drop table if exists `botinok_boxes`;
create table `botinok_boxes` (
    `id` integer primary key autoincrement,
    `botinokBox_common_createdAt` text not null,
    `botinokBox_common_updatedAt` text not null,
    `botinokBox_common_deleted` integer not null,
    `botinokBox_x` text not null,
    `botinokBox_y` text not null,
    `botinokBox_w` text not null,
    `botinokBox_h` text not null
);
*/