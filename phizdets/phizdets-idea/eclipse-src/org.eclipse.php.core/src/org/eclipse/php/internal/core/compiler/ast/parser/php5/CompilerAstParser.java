
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser.php5;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php5.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CompilerAstParser extends AbstractASTParser {

 public final Class getSymbolContainer() {
    return CompilerParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CompilerAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CompilerAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\006\000\002\006\004\000" +
    "\002\006\002\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\006\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\153\002\000\002\010\006" +
    "\000\002\010\011\000\002\010\014\000\002\010\007\000" +
    "\002\010\011\000\002\010\013\000\002\010\007\000\002" +
    "\010\004\000\002\010\005\000\002\010\004\000\002\010" +
    "\005\000\002\010\004\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\003\000\002\010\004\000\002\010\005\000\002" +
    "\010\007\000\002\010\012\000\002\010\012\000\002\010" +
    "\007\000\002\010\003\000\002\010\017\000\002\010\005" +
    "\000\002\010\005\000\002\120\003\000\002\120\002\000" +
    "\002\121\003\000\002\121\004\000\002\122\012\000\002" +
    "\011\003\000\002\011\005\000\002\012\003\000\002\013" +
    "\003\000\002\013\005\000\002\115\003\000\002\116\003" +
    "\000\002\044\002\000\002\044\003\000\002\154\002\000" +
    "\002\155\002\000\002\123\013\000\002\151\005\000\002" +
    "\151\003\000\002\156\002\000\002\157\002\000\002\124" +
    "\014\000\002\160\002\000\002\124\011\000\002\152\003" +
    "\000\002\152\002\000\002\150\003\000\002\150\003\000" +
    "\002\150\003\000\002\125\003\000\002\125\004\000\002" +
    "\125\004\000\002\126\002\000\002\126\004\000\002\126" +
    "\004\000\002\103\003\000\002\104\002\000\002\104\004" +
    "\000\002\127\002\000\002\127\004\000\002\130\003\000" +
    "\002\130\005\000\002\130\005\000\002\130\003\000\002" +
    "\014\002\000\002\014\004\000\002\015\003\000\002\015" +
    "\004\000\002\016\003\000\002\016\006\000\002\017\003" +
    "\000\002\017\006\000\002\020\003\000\002\020\006\000" +
    "\002\021\005\000\002\021\007\000\002\022\005\000\002" +
    "\022\006\000\002\022\006\000\002\022\007\000\002\023" +
    "\002\000\002\023\007\000\002\023\006\000\002\024\003" +
    "\000\002\024\003\000\002\025\003\000\002\025\006\000" +
    "\002\026\002\000\002\026\010\000\002\027\002\000\002" +
    "\027\011\000\002\030\002\000\002\030\004\000\002\031" +
    "\002\000\002\031\005\000\002\032\003\000\002\032\002" +
    "\000\002\033\003\000\002\033\005\000\002\033\004\000" +
    "\002\034\004\000\002\034\005\000\002\034\006\000\002" +
    "\034\007\000\002\034\003\000\002\131\002\000\002\131" +
    "\003\000\002\131\003\000\002\035\003\000\002\035\002" +
    "\000\002\036\003\000\002\036\003\000\002\036\004\000" +
    "\002\036\005\000\002\036\005\000\002\036\006\000\002" +
    "\037\005\000\002\037\003\000\002\040\003\000\002\040" +
    "\004\000\002\040\006\000\002\041\005\000\002\041\007" +
    "\000\002\041\003\000\002\041\005\000\002\042\004\000" +
    "\002\042\002\000\002\043\005\000\002\043\004\000\002" +
    "\161\002\000\002\162\002\000\002\043\014\000\002\043" +
    "\003\000\002\043\003\000\002\112\003\000\002\112\005" +
    "\000\002\112\002\000\002\133\003\000\002\133\003\000" +
    "\002\111\002\000\002\111\003\000\002\113\003\000\002" +
    "\113\004\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\107\005\000\002\107\007\000\002\107\003\000" +
    "\002\107\005\000\002\110\007\000\002\110\006\000\002" +
    "\045\005\000\002\045\003\000\002\046\002\000\002\046" +
    "\003\000\002\047\005\000\002\047\003\000\002\050\010" +
    "\000\002\050\005\000\002\050\006\000\002\050\010\000" +
    "\002\050\005\000\002\050\004\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\007\000\002\050\003" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\003\000\002\050\006\000\002\050\005\000\002\050\004" +
    "\000\002\051\006\000\002\051\010\000\002\051\010\000" +
    "\002\051\006\000\002\106\003\000\002\141\003\000\002" +
    "\141\003\000\002\143\003\000\002\145\003\000\002\145" +
    "\005\000\002\145\005\000\002\052\002\000\002\052\004" +
    "\000\002\052\005\000\002\053\002\000\002\053\005\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\004\000\002\055\004\000\002\055\006\000" +
    "\002\055\003\000\002\146\005\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\005\000\002\056" +
    "\005\000\002\056\005\000\002\057\002\000\002\057\004" +
    "\000\002\060\002\000\002\060\003\000\002\061\007\000" +
    "\002\061\005\000\002\061\005\000\002\061\003\000\002" +
    "\062\003\000\002\062\003\000\002\132\003\000\002\105" +
    "\003\000\002\134\003\000\002\117\003\000\002\117\005" +
    "\000\002\117\005\000\002\117\010\000\002\117\010\000" +
    "\002\135\003\000\002\135\004\000\002\067\006\000\002" +
    "\067\006\000\002\067\003\000\002\136\006\000\002\136" +
    "\005\000\002\147\003\000\002\147\003\000\002\144\003" +
    "\000\002\144\004\000\002\144\003\000\002\063\006\000" +
    "\002\063\006\000\002\063\003\000\002\064\003\000\002" +
    "\064\006\000\002\065\002\000\002\065\003\000\002\066" +
    "\006\000\002\066\006\000\002\066\003\000\002\070\003" +
    "\000\002\070\005\000\002\071\003\000\002\071\004\000" +
    "\002\072\005\000\002\072\003\000\002\073\003\000\002" +
    "\073\006\000\002\073\002\000\002\074\002\000\002\074" +
    "\004\000\002\075\007\000\002\075\005\000\002\075\005" +
    "\000\002\075\003\000\002\075\010\000\002\075\006\000" +
    "\002\075\006\000\002\075\004\000\002\076\004\000\002" +
    "\076\004\000\002\076\004\000\002\076\002\000\002\077" +
    "\003\000\002\077\006\000\002\077\005\000\002\077\005" +
    "\000\002\077\010\000\002\077\005\000\002\077\005\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\101\006\000\002\101\006\000\002\101\004\000\002\101" +
    "\004\000\002\101\006\000\002\101\004\000\002\101\004" +
    "\000\002\137\003\000\002\137\005\000\002\142\005\000" +
    "\002\140\003\000\002\102\003\000\002\102\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02eb\000\002\001\ufffe\000\004\002\u02ed\001\002\000" +
    "\224\003\116\004\141\005\153\006\110\007\012\010\035" +
    "\012\061\014\074\017\127\020\021\021\122\022\120\023" +
    "\044\025\034\027\102\031\152\034\104\036\130\042\055" +
    "\043\121\044\107\046\135\047\042\051\150\052\026\053" +
    "\011\055\077\056\143\057\031\060\057\061\033\062\140" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\102\064\105\025\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\136\010\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\206\043\207\062\210\017\214\145\217\101\220\113" +
    "\221\060\222\076\001\001\000\002\001\ufef0\000\004\214" +
    "\u02ea\001\002\000\002\001\uffd7\000\006\012\u02df\217\u02e0" +
    "\001\002\000\002\001\ufef3\000\004\214\u02ca\001\002\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\002\001\uff08\000\070\033\200\115\167\116\210\117" +
    "\161\135\164\136\u02c8\137\160\140\201\141\162\142\171" +
    "\143\202\144\206\145\173\146\156\147\170\150\205\151" +
    "\203\152\165\153\204\154\177\155\172\156\207\157\166" +
    "\160\176\161\174\162\157\165\163\001\002\000\004\061" +
    "\u0211\001\002\000\002\001\ufeef\000\132\004\141\006\110" +
    "\007\012\010\035\012\061\017\127\034\104\056\143\057" +
    "\031\067\146\070\013\071\020\072\046\073\050\074\131" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\014" +
    "\166\053\167\147\170\027\171\132\172\041\173\126\174" +
    "\072\175\134\176\071\177\037\202\075\214\145\217\101" +
    "\220\113\221\060\222\076\001\002\000\002\001\ufec2\000" +
    "\002\001\uffc8\000\040\065\u0132\121\u013d\122\u0140\123\u013e" +
    "\124\u0146\125\u0141\126\u0147\127\u0143\130\u0145\131\u013f\132" +
    "\u013c\133\u0142\134\u0144\166\ufed3\167\ufed3\001\ufed5\000\002" +
    "\001\ufff2\000\006\017\u02c2\214\u02c0\001\002\000\132\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\132" +
    "\004\141\006\110\007\012\010\035\012\061\017\127\034" +
    "\104\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\004\214\u02bb\001\002\000\004\104\u02b9\001\002\000\002" +
    "\001\uffb6\000\004\214\u02a8\001\002\000\004\104\uff00\001" +
    "\ufe8b\000\002\001\ufea1\000\132\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\002\000\002\001\ufec6\000\132\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\004" +
    "\102\u028d\001\002\000\004\012\u0208\001\002\000\004\214" +
    "\u0284\001\002\000\002\001\ufec5\000\002\001\ufeee\000\004" +
    "\010\u0275\001\002\000\002\001\ufeed\000\004\214\u0272\001" +
    "\002\000\002\001\ufed2\000\012\010\035\012\061\106\056" +
    "\217\101\001\002\000\010\102\231\200\232\214\ufecd\001" +
    "\ufec4\000\134\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\136" +
    "\u026e\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\214\145\217\101\220\113\221\060" +
    "\222\076\001\002\000\002\001\ufe8a\000\004\214\u026b\001" +
    "\002\000\002\001\ufea1\000\002\001\ufe8c\000\004\061\u0202" +
    "\001\002\000\132\004\141\006\110\007\012\010\035\012" +
    "\061\017\127\034\104\056\143\057\031\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\214\145\217\101\220\113\221\060\222" +
    "\076\001\002\000\002\001\ufff0\000\002\001\uff12\000\132" +
    "\004\141\006\110\007\012\010\035\012\061\017\127\034" +
    "\104\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\006\012\061\217\245\001\002\000\132\004\141\006" +
    "\110\007\012\010\035\012\061\017\127\034\104\056\143" +
    "\057\031\067\146\070\013\071\020\072\046\073\050\074" +
    "\131\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\014\166\053\167\147\170\027\171\132\172\041\173\126" +
    "\174\072\175\134\176\071\177\037\202\075\214\145\217" +
    "\101\220\113\221\060\222\076\001\002\000\132\004\141" +
    "\006\110\007\012\010\035\012\061\017\127\034\104\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\002\000\002\001" +
    "\ufee4\000\002\001\uffde\000\010\010\227\012\061\217\101" +
    "\001\002\000\002\001\ufea1\000\004\214\u0254\001\002\000" +
    "\006\166\u0252\167\u0253\001\002\000\004\102\246\001\ufeb5" +
    "\000\004\214\u023b\001\002\000\002\001\ufffc\000\132\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\132" +
    "\004\141\006\110\007\012\010\035\012\061\017\127\034" +
    "\104\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\004\143\u01d7\001\uffc7\000\002\001\ufef4\000\002\001" +
    "\ufee3\000\002\001\ufff3\000\002\001\ufea1\000\002\001\ufebe" +
    "\000\004\010\u01b4\001\002\000\002\001\ufff1\000\002\001" +
    "\ufebf\000\210\003\116\004\141\005\153\006\110\007\012" +
    "\010\035\012\061\014\074\017\127\020\021\021\122\022" +
    "\120\023\044\025\034\027\102\031\152\034\104\036\130" +
    "\042\055\043\121\046\135\047\042\051\150\052\026\053" +
    "\011\055\077\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\102\064\105" +
    "\025\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\136\010\156\105\157\066\163\142\164\014\166" +
    "\053\167\147\170\027\171\132\172\041\173\126\174\072" +
    "\175\134\176\071\177\037\202\075\206\043\214\145\217" +
    "\101\220\113\221\060\222\076\001\002\000\134\004\141" +
    "\006\110\007\012\010\035\012\061\017\127\034\104\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\136\u01ab\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\002\001\ufffb\000\132\004\141\006\110\007\012\010" +
    "\035\012\061\017\127\034\104\056\143\057\031\067\146" +
    "\070\013\071\020\072\046\073\050\074\131\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\214\145\217\101\220\113\221" +
    "\060\222\076\001\002\000\004\214\u0164\001\ufee5\000\132" +
    "\004\141\006\110\007\012\010\035\012\061\017\127\034" +
    "\104\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\002\001\ufef2\000\004\214\u0189\001\002\000\002\001\ufef1" +
    "\000\132\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\014\166\053\167\147\170\027\171" +
    "\132\172\041\173\126\174\072\175\134\176\071\177\037" +
    "\202\075\214\145\217\101\220\113\221\060\222\076\001" +
    "\002\000\002\001\uffc9\000\132\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\002\000\134\004\141\006\110\007" +
    "\012\010\035\012\061\017\127\034\104\056\143\057\031" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\136\u0182\156\105\157\066\163\142\164" +
    "\014\166\053\167\147\170\027\171\132\172\041\173\126" +
    "\174\072\175\134\176\071\177\037\202\075\214\145\217" +
    "\101\220\113\221\060\222\076\001\002\000\002\001\ufed6" +
    "\000\002\001\ufed7\000\002\001\uffb0\000\004\214\u017d\001" +
    "\ufef9\000\132\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\014\166\053\167\147\170\027" +
    "\171\132\172\041\173\126\174\072\175\134\176\071\177" +
    "\037\202\075\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\004\214\u0176\001\002\000\002\001\ufffd\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\004\214\u0167\001\002\000\012\010\035\012\061\106" +
    "\056\217\101\001\002\000\132\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\002\000\002\001\uffff\000\004\214" +
    "\366\001\002\000\004\214\154\001\002\000\132\004\141" +
    "\006\110\007\012\010\035\012\061\017\127\034\104\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\002\000\070\033" +
    "\200\115\167\116\210\117\161\135\164\137\160\140\201" +
    "\141\162\142\171\143\202\144\206\145\173\146\156\147" +
    "\170\150\205\151\203\152\165\153\204\154\177\155\172" +
    "\156\207\157\166\160\176\161\174\162\157\165\163\215" +
    "\175\001\002\000\132\004\141\006\110\007\012\010\035" +
    "\012\061\017\127\034\104\056\143\057\031\067\146\070" +
    "\013\071\020\072\046\073\050\074\131\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\214\145\217\101\220\113\221\060" +
    "\222\076\001\002\000\132\004\141\006\110\007\012\010" +
    "\035\012\061\017\127\034\104\056\143\057\031\067\146" +
    "\070\013\071\020\072\046\073\050\074\131\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\214\145\217\101\220\113\221" +
    "\060\222\076\001\002\000\132\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\002\000\132\004\141\006\110\007" +
    "\012\010\035\012\061\017\127\034\104\056\143\057\031" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\014\166" +
    "\053\167\147\170\027\171\132\172\041\173\126\174\072" +
    "\175\134\176\071\177\037\202\075\214\145\217\101\220" +
    "\113\221\060\222\076\001\002\000\132\004\141\006\110" +
    "\007\012\010\035\012\061\017\127\034\104\056\143\057" +
    "\031\067\146\070\013\071\020\072\046\073\050\074\131" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\014" +
    "\166\053\167\147\170\027\171\132\172\041\173\126\174" +
    "\072\175\134\176\071\177\037\202\075\214\145\217\101" +
    "\220\113\221\060\222\076\001\002\000\132\004\141\006" +
    "\110\007\012\010\035\012\061\017\127\034\104\056\143" +
    "\057\031\067\146\070\013\071\020\072\046\073\050\074" +
    "\131\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\014\166\053\167\147\170\027\171\132\172\041\173\126" +
    "\174\072\175\134\176\071\177\037\202\075\214\145\217" +
    "\101\220\113\221\060\222\076\001\002\000\132\004\141" +
    "\006\110\007\012\010\035\012\061\017\127\034\104\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\002\000\132\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\132" +
    "\004\141\006\110\007\012\010\035\012\061\017\127\034" +
    "\104\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\132\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\014\166\053\167\147\170\027\171" +
    "\132\172\041\173\126\174\072\175\134\176\071\177\037" +
    "\202\075\214\145\217\101\220\113\221\060\222\076\001" +
    "\002\000\132\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\014\166\053\167\147\170\027" +
    "\171\132\172\041\173\126\174\072\175\134\176\071\177" +
    "\037\202\075\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\132\004\141\006\110\007\012\010\035\012" +
    "\061\017\127\034\104\056\143\057\031\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\214\145\217\101\220\113\221\060\222" +
    "\076\001\002\000\132\004\141\006\110\007\012\010\035" +
    "\012\061\017\127\034\104\056\143\057\031\067\146\070" +
    "\013\071\020\072\046\073\050\074\131\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\214\145\217\101\220\113\221\060" +
    "\222\076\001\002\000\132\004\141\006\110\007\012\010" +
    "\035\012\061\017\127\034\104\056\143\057\031\067\146" +
    "\070\013\071\020\072\046\073\050\074\131\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\214\145\217\101\220\113\221" +
    "\060\222\076\001\002\000\212\003\116\004\141\005\153" +
    "\006\110\007\012\010\035\012\061\014\074\017\127\020" +
    "\021\021\122\022\120\023\044\025\034\027\102\031\152" +
    "\034\104\036\130\042\055\043\121\046\135\047\042\051" +
    "\150\052\026\053\011\055\077\056\143\057\031\067\146" +
    "\070\013\071\020\072\046\073\050\074\131\075\006\076" +
    "\036\102\064\105\025\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\136\010\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\206" +
    "\043\214\145\216\304\217\101\220\113\221\060\222\076" +
    "\001\002\000\132\004\141\006\110\007\012\010\035\012" +
    "\061\017\127\034\104\056\143\057\031\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\214\145\217\101\220\113\221\060\222" +
    "\076\001\002\000\132\004\141\006\110\007\012\010\035" +
    "\012\061\017\127\034\104\056\143\057\031\067\146\070" +
    "\013\071\020\072\046\073\050\074\131\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\214\145\217\101\220\113\221\060" +
    "\222\076\001\002\000\010\010\227\012\061\217\101\001" +
    "\002\000\132\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\014\166\053\167\147\170\027" +
    "\171\132\172\041\173\126\174\072\175\134\176\071\177" +
    "\037\202\075\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\132\004\141\006\110\007\012\010\035\012" +
    "\061\017\127\034\104\056\143\057\031\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\214\145\217\101\220\113\221\060\222" +
    "\076\001\002\000\132\004\141\006\110\007\012\010\035" +
    "\012\061\017\127\034\104\056\143\057\031\067\146\070" +
    "\013\071\020\072\046\073\050\074\131\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\214\145\217\101\220\113\221\060" +
    "\222\076\001\002\000\132\004\141\006\110\007\012\010" +
    "\035\012\061\017\127\034\104\056\143\057\031\067\146" +
    "\070\013\071\020\072\046\073\050\074\131\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\214\145\217\101\220\113\221" +
    "\060\222\076\001\002\000\132\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\002\000\132\004\141\006\110\007" +
    "\012\010\035\012\061\017\127\034\104\056\143\057\031" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\014\166" +
    "\053\167\147\170\027\171\132\172\041\173\126\174\072" +
    "\175\134\176\071\177\037\202\075\214\145\217\101\220" +
    "\113\221\060\222\076\001\002\000\132\004\141\006\110" +
    "\007\012\010\035\012\061\017\127\034\104\056\143\057" +
    "\031\067\146\070\013\071\020\072\046\073\050\074\131" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\014" +
    "\166\053\167\147\170\027\171\132\172\041\173\126\174" +
    "\072\175\134\176\071\177\037\202\075\214\145\217\101" +
    "\220\113\221\060\222\076\001\002\000\132\004\141\006" +
    "\110\007\012\010\035\012\061\017\127\034\104\056\143" +
    "\057\031\067\146\070\013\071\020\072\046\073\050\074" +
    "\131\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\014\166\053\167\147\170\027\171\132\172\041\173\126" +
    "\174\072\175\134\176\071\177\037\202\075\214\145\217" +
    "\101\220\113\221\060\222\076\001\002\000\062\033\200" +
    "\117\161\135\164\137\160\140\201\141\162\142\171\143" +
    "\202\144\206\145\173\146\156\147\170\150\205\151\203" +
    "\152\165\153\204\154\177\155\172\156\207\157\166\160" +
    "\176\161\174\162\157\165\163\001\uff2d\000\012\033\200" +
    "\160\176\161\174\162\157\001\uff28\000\034\033\200\150" +
    "\205\151\203\152\165\153\204\154\177\155\172\156\207" +
    "\157\166\160\176\161\174\162\157\165\163\001\uff1b\000" +
    "\024\033\200\154\177\155\172\156\207\157\166\160\176" +
    "\161\174\162\157\165\163\001\uff18\000\024\033\200\154" +
    "\177\155\172\156\207\157\166\160\176\161\174\162\157" +
    "\165\163\001\uff17\000\024\033\200\154\177\155\172\156" +
    "\207\157\166\160\176\161\174\162\157\165\163\001\uff16" +
    "\000\044\033\200\144\206\145\173\146\156\147\170\150" +
    "\205\151\203\152\165\153\204\154\177\155\172\156\207" +
    "\157\166\160\176\161\174\162\157\165\163\001\uff2b\000" +
    "\052\033\200\141\162\142\171\143\202\144\206\145\173" +
    "\146\156\147\170\150\205\151\203\152\165\153\204\154" +
    "\177\155\172\156\207\157\166\160\176\161\174\162\157" +
    "\165\163\001\uff30\000\002\001\uff15\000\002\001\ufefc\000" +
    "\004\065\260\001\ufefd\000\002\001\ufefe\000\006\012\061" +
    "\217\245\001\002\000\004\104\240\001\002\000\004\104" +
    "\uff00\001\ufeff\000\006\102\231\200\232\001\ufec4\000\132" +
    "\004\141\006\110\007\012\010\035\012\061\017\127\034" +
    "\104\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\ufebc" +
    "\000\004\201\235\001\002\000\066\033\200\115\167\116" +
    "\210\117\161\135\164\137\160\140\201\141\162\142\171" +
    "\143\202\144\206\145\173\146\156\147\170\150\205\151" +
    "\203\152\165\153\204\154\177\155\172\156\207\157\166" +
    "\160\176\161\174\162\157\165\163\001\ufebb\000\002\001" +
    "\ufec1\000\070\033\200\103\237\115\167\116\210\117\161" +
    "\135\164\137\160\140\201\141\162\142\171\143\202\144" +
    "\206\145\173\146\156\147\170\150\205\151\203\152\165" +
    "\153\204\154\177\155\172\156\207\157\166\160\176\161" +
    "\174\162\157\165\163\001\002\000\002\001\ufec0\000\006" +
    "\012\061\217\101\001\002\000\006\102\251\200\252\001" +
    "\ufec7\000\006\012\061\217\245\001\002\000\002\001\ufec9" +
    "\000\006\102\231\200\232\001\ufec8\000\004\102\246\001" +
    "\ufeb4\000\132\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\014\166\053\167\147\170\027" +
    "\171\132\172\041\173\126\174\072\175\134\176\071\177" +
    "\037\202\075\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\070\033\200\103\250\115\167\116\210\117" +
    "\161\135\164\137\160\140\201\141\162\142\171\143\202" +
    "\144\206\145\173\146\156\147\170\150\205\151\203\152" +
    "\165\153\204\154\177\155\172\156\207\157\166\160\176" +
    "\161\174\162\157\165\163\001\002\000\002\001\ufebd\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\132\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\014\166\053\167\147\170\027\171" +
    "\132\172\041\173\126\174\072\175\134\176\071\177\037" +
    "\202\075\214\145\217\101\220\113\221\060\222\076\001" +
    "\ufebc\000\004\201\254\001\002\000\002\001\ufecb\000\070" +
    "\033\200\103\256\115\167\116\210\117\161\135\164\137" +
    "\160\140\201\141\162\142\171\143\202\144\206\145\173" +
    "\146\156\147\170\150\205\151\203\152\165\153\204\154" +
    "\177\155\172\156\207\157\166\160\176\161\174\162\157" +
    "\165\163\001\002\000\002\001\ufeca\000\006\102\231\200" +
    "\232\001\ufec3\000\014\010\267\012\061\102\266\106\056" +
    "\217\101\001\002\000\002\001\ufeb7\000\002\001\ufeb8\000" +
    "\002\001\ufefb\000\006\102\274\200\275\001\ufefa\000\006" +
    "\012\061\217\245\001\002\000\132\004\141\006\110\007" +
    "\012\010\035\012\061\017\127\034\104\056\143\057\031" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\014\166" +
    "\053\167\147\170\027\171\132\172\041\173\126\174\072" +
    "\175\134\176\071\177\037\202\075\214\145\217\101\220" +
    "\113\221\060\222\076\001\002\000\002\001\ufe8b\000\006" +
    "\102\231\200\232\001\ufecd\000\070\033\200\103\272\115" +
    "\167\116\210\117\161\135\164\137\160\140\201\141\162" +
    "\142\171\143\202\144\206\145\173\146\156\147\170\150" +
    "\205\151\203\152\165\153\204\154\177\155\172\156\207" +
    "\157\166\160\176\161\174\162\157\165\163\001\002\000" +
    "\002\001\ufeb6\000\006\102\231\200\232\001\ufecc\000\132" +
    "\004\141\006\110\007\012\010\035\012\061\017\127\034" +
    "\104\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\ufebc" +
    "\000\004\201\277\001\002\000\002\001\ufeba\000\070\033" +
    "\200\103\301\115\167\116\210\117\161\135\164\137\160" +
    "\140\201\141\162\142\171\143\202\144\206\145\173\146" +
    "\156\147\170\150\205\151\203\152\165\153\204\154\177" +
    "\155\172\156\207\157\166\160\176\161\174\162\157\165" +
    "\163\001\002\000\002\001\ufeb9\000\020\033\200\156\207" +
    "\157\166\160\176\161\174\162\157\165\163\001\uff23\000" +
    "\004\033\200\001\uff26\000\002\001\ufff8\000\002\001\uff90" +
    "\000\006\204\311\205\310\001\uff8c\000\002\001\uffee\000" +
    "\210\003\116\004\141\005\153\006\110\007\012\010\035" +
    "\012\061\014\074\017\127\020\021\021\122\022\120\023" +
    "\044\025\034\027\102\031\152\034\104\036\130\042\055" +
    "\043\121\046\135\047\042\051\150\052\026\053\011\055" +
    "\077\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\102\064\105\025\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\136\010\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\206\043\214\145\217\101\220" +
    "\113\221\060\222\076\001\002\000\004\214\312\001\002" +
    "\000\132\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\014\166\053\167\147\170\027\171" +
    "\132\172\041\173\126\174\072\175\134\176\071\177\037" +
    "\202\075\214\145\217\101\220\113\221\060\222\076\001" +
    "\002\000\070\033\200\115\167\116\210\117\161\135\164" +
    "\137\160\140\201\141\162\142\171\143\202\144\206\145" +
    "\173\146\156\147\170\150\205\151\203\152\165\153\204" +
    "\154\177\155\172\156\207\157\166\160\176\161\174\162" +
    "\157\165\163\215\314\001\002\000\210\003\116\004\141" +
    "\005\153\006\110\007\012\010\035\012\061\014\074\017" +
    "\127\020\021\021\122\022\120\023\044\025\034\027\102" +
    "\031\152\034\104\036\130\042\055\043\121\046\135\047" +
    "\042\051\150\052\026\053\011\055\077\056\143\057\031" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\102\064\105\025\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\136\010\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\206\043\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\002\001\uff8f\000\002\001\uff8b\000\224\003" +
    "\116\004\141\005\153\006\110\007\012\010\035\012\061" +
    "\014\074\017\127\020\021\021\122\022\120\023\044\025" +
    "\034\027\102\031\152\034\104\036\130\042\055\043\121" +
    "\044\107\046\135\047\042\051\150\052\026\053\011\055" +
    "\077\056\143\057\031\060\321\061\033\062\140\067\146" +
    "\070\013\071\020\072\046\073\050\074\131\075\006\076" +
    "\036\102\064\105\025\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\136\010\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\206" +
    "\043\207\062\210\017\214\145\217\101\220\113\221\060" +
    "\222\076\001\uff8e\000\002\001\ufff9\000\004\214\342\001" +
    "\002\000\002\001\ufff6\000\006\204\330\205\327\001\uff8a" +
    "\000\002\001\ufff5\000\002\001\ufff7\000\004\203\340\001" +
    "\002\000\004\216\336\001\002\000\004\214\331\001\002" +
    "\000\132\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\014\166\053\167\147\170\027\171" +
    "\132\172\041\173\126\174\072\175\134\176\071\177\037" +
    "\202\075\214\145\217\101\220\113\221\060\222\076\001" +
    "\002\000\070\033\200\115\167\116\210\117\161\135\164" +
    "\137\160\140\201\141\162\142\171\143\202\144\206\145" +
    "\173\146\156\147\170\150\205\151\203\152\165\153\204" +
    "\154\177\155\172\156\207\157\166\160\176\161\174\162" +
    "\157\165\163\215\333\001\002\000\004\216\334\001\002" +
    "\000\002\001\ufff8\000\224\003\116\004\141\005\153\006" +
    "\110\007\012\010\035\012\061\014\074\017\127\020\021" +
    "\021\122\022\120\023\044\025\034\027\102\031\152\034" +
    "\104\036\130\042\055\043\121\044\107\046\135\047\042" +
    "\051\150\052\026\053\011\055\077\056\143\057\031\060" +
    "\321\061\033\062\140\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\102\064\105\025\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\136\010\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\206\043\207\062\210\017\214" +
    "\145\217\101\220\113\221\060\222\076\001\uff8d\000\002" +
    "\001\ufff8\000\224\003\116\004\141\005\153\006\110\007" +
    "\012\010\035\012\061\014\074\017\127\020\021\021\122" +
    "\022\120\023\044\025\034\027\102\031\152\034\104\036" +
    "\130\042\055\043\121\044\107\046\135\047\042\051\150" +
    "\052\026\053\011\055\077\056\143\057\031\060\321\061" +
    "\033\062\140\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\102\064\105\025\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\206\043\207\062\210\017\214\145\217" +
    "\101\220\113\221\060\222\076\001\uff89\000\004\136\341" +
    "\001\002\000\002\001\uffed\000\004\215\343\001\002\000" +
    "\004\136\344\001\002\000\002\001\ufff4\000\004\033\200" +
    "\001\uff25\000\034\033\200\150\205\151\203\152\165\153" +
    "\204\154\177\155\172\156\207\157\166\160\176\161\174" +
    "\162\157\165\163\001\uff1a\000\020\033\200\156\207\157" +
    "\166\160\176\161\174\162\157\165\163\001\uff22\000\046" +
    "\033\200\143\202\144\206\145\173\146\156\147\170\150" +
    "\205\151\203\152\165\153\204\154\177\155\172\156\207" +
    "\157\166\160\176\161\174\162\157\165\163\001\uff2a\000" +
    "\034\033\200\150\205\151\203\152\165\153\204\154\177" +
    "\155\172\156\207\157\166\160\176\161\174\162\157\165" +
    "\163\001\uff1c\000\064\033\200\116\210\117\161\135\164" +
    "\137\160\140\201\141\162\142\171\143\202\144\206\145" +
    "\173\146\156\147\170\150\205\151\203\152\165\153\204" +
    "\154\177\155\172\156\207\157\166\160\176\161\174\162" +
    "\157\165\163\001\uff2f\000\012\033\200\160\176\161\174" +
    "\162\157\001\uff27\000\024\033\200\154\177\155\172\156" +
    "\207\157\166\160\176\161\174\162\157\165\163\001\uff19" +
    "\000\070\033\200\115\167\116\210\117\161\135\164\137" +
    "\160\140\201\141\162\142\171\143\202\144\206\145\173" +
    "\146\156\147\170\150\205\151\203\152\165\153\204\154" +
    "\177\155\172\156\207\157\166\160\176\161\174\162\157" +
    "\165\163\216\356\001\002\000\132\004\141\006\110\007" +
    "\012\010\035\012\061\017\127\034\104\056\143\057\031" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\014\166" +
    "\053\167\147\170\027\171\132\172\041\173\126\174\072" +
    "\175\134\176\071\177\037\202\075\214\145\217\101\220" +
    "\113\221\060\222\076\001\002\000\066\033\200\115\167" +
    "\116\210\117\161\135\164\137\160\140\201\141\162\142" +
    "\171\143\202\144\206\145\173\146\156\147\170\150\205" +
    "\151\203\152\165\153\204\154\177\155\172\156\207\157" +
    "\166\160\176\161\174\162\157\165\163\001\uff13\000\012" +
    "\033\200\160\176\161\174\162\157\001\uff29\000\050\033" +
    "\200\142\171\143\202\144\206\145\173\146\156\147\170" +
    "\150\205\151\203\152\165\153\204\154\177\155\172\156" +
    "\207\157\166\160\176\161\174\162\157\165\163\001\uff2c" +
    "\000\060\033\200\135\164\137\160\140\201\141\162\142" +
    "\171\143\202\144\206\145\173\146\156\147\170\150\205" +
    "\151\203\152\165\153\204\154\177\155\172\156\207\157" +
    "\166\160\176\161\174\162\157\165\163\001\uff2e\000\054" +
    "\033\200\140\201\141\162\142\171\143\202\144\206\145" +
    "\173\146\156\147\170\150\205\151\203\152\165\153\204" +
    "\154\177\155\172\156\207\157\166\160\176\161\174\162" +
    "\157\165\163\001\uff31\000\004\033\200\001\uff24\000\034" +
    "\033\200\150\205\151\203\152\165\153\204\154\177\155" +
    "\172\156\207\157\166\160\176\161\174\162\157\165\163" +
    "\001\uff1d\000\006\010\267\106\056\001\002\000\006\114" +
    "\u0113\215\u0112\001\002\000\004\121\371\001\002\000\034" +
    "\006\110\007\012\010\u0100\017\127\070\374\071\020\072" +
    "\046\073\050\074\131\075\006\106\056\156\372\157\u0101" +
    "\001\002\000\034\006\110\007\012\010\u0100\017\127\070" +
    "\374\071\020\072\046\073\050\074\131\075\006\106\056" +
    "\156\372\157\u0101\001\002\000\002\001\ufeeb\000\004\214" +
    "\u0105\001\002\000\002\001\ufeec\000\002\001\uff9d\000\002" +
    "\001\ufee7\000\004\104\u0103\001\ufe8b\000\034\006\110\007" +
    "\012\010\u0100\017\127\070\374\071\020\072\046\073\050" +
    "\074\131\075\006\106\056\156\372\157\u0101\001\002\000" +
    "\002\001\ufee9\000\006\010\267\106\056\001\002\000\002" +
    "\001\ufee6\000\034\006\110\007\012\010\u0100\017\127\070" +
    "\374\071\020\072\046\073\050\074\131\075\006\106\056" +
    "\156\372\157\u0101\001\ufedf\000\004\215\u0110\001\002\000" +
    "\004\114\u010b\001\ufedd\000\004\066\u0109\001\ufed8\000\034" +
    "\006\110\007\012\010\u0100\017\127\070\374\071\020\072" +
    "\046\073\050\074\131\075\006\106\056\156\372\157\u0101" +
    "\001\002\000\002\001\ufed9\000\034\006\110\007\012\010" +
    "\u0100\017\127\070\374\071\020\072\046\073\050\074\131" +
    "\075\006\106\056\156\372\157\u0101\001\ufedc\000\002\001" +
    "\ufede\000\004\066\u010e\001\ufeda\000\034\006\110\007\012" +
    "\010\u0100\017\127\070\374\071\020\072\046\073\050\074" +
    "\131\075\006\106\056\156\372\157\u0101\001\002\000\002" +
    "\001\ufedb\000\002\001\ufee8\000\002\001\ufeea\000\212\003" +
    "\116\004\141\005\153\006\110\007\012\010\035\012\061" +
    "\014\074\017\127\020\021\021\122\022\120\023\044\025" +
    "\034\027\102\031\152\034\104\036\130\042\055\043\121" +
    "\046\135\047\042\051\150\052\026\053\011\055\077\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\102\064\105\025\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\206\043\214\145\216\u0118\217\101\220" +
    "\113\221\060\222\076\001\002\000\006\010\267\106\056" +
    "\001\002\000\004\121\u0115\001\002\000\034\006\110\007" +
    "\012\010\u0100\017\127\070\374\071\020\072\046\073\050" +
    "\074\131\075\006\106\056\156\372\157\u0101\001\002\000" +
    "\002\001\uff9c\000\002\001\uffd8\000\002\001\ufff8\000\002" +
    "\001\uff9f\000\226\003\116\004\141\005\153\006\110\007" +
    "\012\010\035\012\061\014\074\017\127\020\021\021\122" +
    "\022\120\023\044\025\034\027\102\031\152\032\u011b\034" +
    "\104\036\130\042\055\043\121\044\107\046\135\047\042" +
    "\051\150\052\026\053\011\055\077\056\143\057\031\060" +
    "\321\061\033\062\140\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\102\064\105\025\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\136\010\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\206\043\207\062\210\017\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\004" +
    "\136\u011c\001\002\000\002\001\uff9e\000\070\033\200\115" +
    "\167\116\210\117\161\135\164\136\u011e\137\160\140\201" +
    "\141\162\142\171\143\202\144\206\145\173\146\156\147" +
    "\170\150\205\151\203\152\165\153\204\154\177\155\172" +
    "\156\207\157\166\160\176\161\174\162\157\165\163\001" +
    "\002\000\002\001\uffd5\000\004\214\u0164\001\002\000\004" +
    "\065\u0132\001\ufed3\000\002\001\uff32\000\004\104\u0123\001" +
    "\002\000\012\010\267\012\061\106\056\217\101\001\002" +
    "\000\004\214\u0161\001\002\000\004\214\u0129\001\002\000" +
    "\006\012\061\217\245\001\002\000\004\214\ufebf\001\ufec9" +
    "\000\010\102\231\200\232\214\ufecc\001\ufec8\000\134\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\143\u012d\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\uff7a" +
    "\000\004\114\u015c\001\uff7b\000\044\065\u0132\114\uff78\121" +
    "\u013d\122\u0140\123\u013e\124\u0146\125\u0141\126\u0147\127\u0143" +
    "\130\u0145\131\u013f\132\u013c\133\u0142\134\u0144\166\ufed3\167" +
    "\ufed3\215\uff78\001\ufed5\000\004\215\u013b\001\002\000\012" +
    "\010\035\012\061\106\056\217\101\001\002\000\066\033" +
    "\200\115\167\116\210\117\161\135\164\137\160\140\201" +
    "\141\162\142\171\143\202\144\206\145\173\146\156\147" +
    "\170\150\205\151\203\152\165\153\204\154\177\155\172" +
    "\156\207\157\166\160\176\161\174\162\157\165\163\001" +
    "\002\000\006\114\uff79\215\uff79\001\ufed6\000\002\001\uff77" +
    "\000\004\065\u0132\001\ufed4\000\014\010\267\012\061\102" +
    "\266\106\056\217\101\001\002\000\004\214\u0138\001\ufed1" +
    "\000\010\102\274\200\275\214\u0135\001\ufed0\000\134\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\143\u012d\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\uff7a" +
    "\000\004\215\u0137\001\002\000\002\001\ufece\000\134\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\143\u012d\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\uff7a" +
    "\000\004\215\u013a\001\002\000\002\001\ufecf\000\002\001" +
    "\uff02\000\132\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\014\166\053\167\147\170\027" +
    "\171\132\172\041\173\126\174\072\175\134\176\071\177" +
    "\037\202\075\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\134\004\141\006\110\007\012\010\035\012" +
    "\061\017\127\034\104\056\143\057\031\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\143\u0152\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\214\145\217\101\220\113\221" +
    "\060\222\076\001\002\000\132\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\002\000\132\004\141\006\110\007" +
    "\012\010\035\012\061\017\127\034\104\056\143\057\031" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\014\166" +
    "\053\167\147\170\027\171\132\172\041\173\126\174\072" +
    "\175\134\176\071\177\037\202\075\214\145\217\101\220" +
    "\113\221\060\222\076\001\002\000\132\004\141\006\110" +
    "\007\012\010\035\012\061\017\127\034\104\056\143\057" +
    "\031\067\146\070\013\071\020\072\046\073\050\074\131" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\156\105\157\066\163\142\164\014" +
    "\166\053\167\147\170\027\171\132\172\041\173\126\174" +
    "\072\175\134\176\071\177\037\202\075\214\145\217\101" +
    "\220\113\221\060\222\076\001\002\000\132\004\141\006" +
    "\110\007\012\010\035\012\061\017\127\034\104\056\143" +
    "\057\031\067\146\070\013\071\020\072\046\073\050\074" +
    "\131\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\014\166\053\167\147\170\027\171\132\172\041\173\126" +
    "\174\072\175\134\176\071\177\037\202\075\214\145\217" +
    "\101\220\113\221\060\222\076\001\002\000\132\004\141" +
    "\006\110\007\012\010\035\012\061\017\127\034\104\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\002\000\132\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\132" +
    "\004\141\006\110\007\012\010\035\012\061\017\127\034" +
    "\104\056\143\057\031\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\106\056\107\030\110" +
    "\067\111\051\112\124\113\106\120\063\156\105\157\066" +
    "\163\142\164\014\166\053\167\147\170\027\171\132\172" +
    "\041\173\126\174\072\175\134\176\071\177\037\202\075" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\132\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\014\166\053\167\147\170\027\171" +
    "\132\172\041\173\126\174\072\175\134\176\071\177\037" +
    "\202\075\214\145\217\101\220\113\221\060\222\076\001" +
    "\002\000\132\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\014\166\053\167\147\170\027" +
    "\171\132\172\041\173\126\174\072\175\134\176\071\177" +
    "\037\202\075\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\060\033\200\135\164\137\160\140\201\141" +
    "\162\142\171\143\202\144\206\145\173\146\156\147\170" +
    "\150\205\151\203\152\165\153\204\154\177\155\172\156" +
    "\207\157\166\160\176\161\174\162\157\165\163\001\uff3c" +
    "\000\060\033\200\135\164\137\160\140\201\141\162\142" +
    "\171\143\202\144\206\145\173\146\156\147\170\150\205" +
    "\151\203\152\165\153\204\154\177\155\172\156\207\157" +
    "\166\160\176\161\174\162\157\165\163\001\uff3e\000\060" +
    "\033\200\135\164\137\160\140\201\141\162\142\171\143" +
    "\202\144\206\145\173\146\156\147\170\150\205\151\203" +
    "\152\165\153\204\154\177\155\172\156\207\157\166\160" +
    "\176\161\174\162\157\165\163\001\uff3a\000\060\033\200" +
    "\135\164\137\160\140\201\141\162\142\171\143\202\144" +
    "\206\145\173\146\156\147\170\150\205\151\203\152\165" +
    "\153\204\154\177\155\172\156\207\157\166\160\176\161" +
    "\174\162\157\165\163\001\uff36\000\060\033\200\135\164" +
    "\137\160\140\201\141\162\142\171\143\202\144\206\145" +
    "\173\146\156\147\170\150\205\151\203\152\165\153\204" +
    "\154\177\155\172\156\207\157\166\160\176\161\174\162" +
    "\157\165\163\001\uff3b\000\060\033\200\135\164\137\160" +
    "\140\201\141\162\142\171\143\202\144\206\145\173\146" +
    "\156\147\170\150\205\151\203\152\165\153\204\154\177" +
    "\155\172\156\207\157\166\160\176\161\174\162\157\165" +
    "\163\001\uff37\000\060\033\200\135\164\137\160\140\201" +
    "\141\162\142\171\143\202\144\206\145\173\146\156\147" +
    "\170\150\205\151\203\152\165\153\204\154\177\155\172" +
    "\156\207\157\166\160\176\161\174\162\157\165\163\001" +
    "\uff3d\000\060\033\200\135\164\137\160\140\201\141\162" +
    "\142\171\143\202\144\206\145\173\146\156\147\170\150" +
    "\205\151\203\152\165\153\204\154\177\155\172\156\207" +
    "\157\166\160\176\161\174\162\157\165\163\001\uff40\000" +
    "\060\033\200\135\164\137\160\140\201\141\162\142\171" +
    "\143\202\144\206\145\173\146\156\147\170\150\205\151" +
    "\203\152\165\153\204\154\177\155\172\156\207\157\166" +
    "\160\176\161\174\162\157\165\163\001\uff39\000\060\033" +
    "\200\135\164\137\160\140\201\141\162\142\171\143\202" +
    "\144\206\145\173\146\156\147\170\150\205\151\203\152" +
    "\165\153\204\154\177\155\172\156\207\157\166\160\176" +
    "\161\174\162\157\165\163\001\uff3f\000\014\010\035\012" +
    "\061\106\056\202\u0154\217\101\001\002\000\060\033\200" +
    "\135\164\137\160\140\201\141\162\142\171\143\202\144" +
    "\206\145\173\146\156\147\170\150\205\151\203\152\165" +
    "\153\204\154\177\155\172\156\207\157\166\160\176\161" +
    "\174\162\157\165\163\001\uff45\000\010\010\227\012\061" +
    "\217\101\001\002\000\004\065\u0132\001\uff44\000\004\214" +
    "\u0158\001\ufef6\000\002\001\uff43\000\134\004\141\006\110" +
    "\007\012\010\035\012\061\017\127\034\104\056\143\057" +
    "\031\067\146\070\013\071\020\072\046\073\050\074\131" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\143\u012d\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\uff7a\000\004\215" +
    "\u015a\001\002\000\002\001\ufef5\000\060\033\200\135\164" +
    "\137\160\140\201\141\162\142\171\143\202\144\206\145" +
    "\173\146\156\147\170\150\205\151\203\152\165\153\204" +
    "\154\177\155\172\156\207\157\166\160\176\161\174\162" +
    "\157\165\163\001\uff38\000\134\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\143\u015e\156\105\157\066\163\142\164\014" +
    "\166\053\167\147\170\027\171\132\172\041\173\126\174" +
    "\072\175\134\176\071\177\037\202\075\214\145\217\101" +
    "\220\113\221\060\222\076\001\002\000\044\065\u0132\114" +
    "\uff75\121\u013d\122\u0140\123\u013e\124\u0146\125\u0141\126\u0147" +
    "\127\u0143\130\u0145\131\u013f\132\u013c\133\u0142\134\u0144\166" +
    "\ufed3\167\ufed3\215\uff75\001\ufed5\000\012\010\035\012\061" +
    "\106\056\217\101\001\002\000\006\114\uff76\215\uff76\001" +
    "\ufed6\000\002\001\uff74\000\134\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\143\u012d\156\105\157\066\163\142\164\014" +
    "\166\053\167\147\170\027\171\132\172\041\173\126\174" +
    "\072\175\134\176\071\177\037\202\075\214\145\217\101" +
    "\220\113\221\060\222\076\001\uff7a\000\004\215\u0163\001" +
    "\002\000\002\001\uff03\000\134\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\143\u012d\156\105\157\066\163\142\164\014" +
    "\166\053\167\147\170\027\171\132\172\041\173\126\174" +
    "\072\175\134\176\071\177\037\202\075\214\145\217\101" +
    "\220\113\221\060\222\076\001\uff7a\000\004\215\u0166\001" +
    "\002\000\002\001\uff04\000\014\010\035\012\061\067\u016b" +
    "\106\056\217\101\001\ufeaf\000\006\114\u016f\215\u0171\001" +
    "\002\000\002\001\ufeb2\000\004\065\u0132\001\ufeb1\000\004" +
    "\214\u016c\001\002\000\014\010\035\012\061\067\u016b\106" +
    "\056\217\101\001\ufeaf\000\006\114\u016f\215\u016e\001\002" +
    "\000\002\001\ufeb0\000\014\010\035\012\061\067\u016b\106" +
    "\056\217\101\001\ufeaf\000\002\001\ufeb3\000\004\121\u0172" +
    "\001\002\000\132\004\141\006\110\007\012\010\035\012" +
    "\061\017\127\034\104\056\143\057\031\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\214\145\217\101\220\113\221\060\222" +
    "\076\001\002\000\060\033\200\135\164\137\160\140\201" +
    "\141\162\142\171\143\202\144\206\145\173\146\156\147" +
    "\170\150\205\151\203\152\165\153\204\154\177\155\172" +
    "\156\207\157\166\160\176\161\174\162\157\165\163\001" +
    "\uff46\000\070\033\200\115\167\116\210\117\161\135\164" +
    "\137\160\140\201\141\162\142\171\143\202\144\206\145" +
    "\173\146\156\147\170\150\205\151\203\152\165\153\204" +
    "\154\177\155\172\156\207\157\166\160\176\161\174\162" +
    "\157\165\163\215\u0175\001\002\000\002\001\uff14\000\012" +
    "\010\035\012\061\106\056\217\101\001\002\000\004\065" +
    "\u0132\001\ufe8f\000\006\114\u017a\215\u0179\001\002\000\002" +
    "\001\ufe96\000\012\010\035\012\061\106\056\217\101\001" +
    "\002\000\004\065\u0132\001\ufe8e\000\004\033\200\001\uff1f" +
    "\000\134\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\014\166\053\167\147\170\027\171" +
    "\132\172\041\173\126\174\072\175\134\176\071\177\037" +
    "\202\075\214\145\215\u0180\217\101\220\113\221\060\222" +
    "\076\001\002\000\002\001\uff0a\000\070\033\200\115\167" +
    "\116\210\117\161\135\164\137\160\140\201\141\162\142" +
    "\171\143\202\144\206\145\173\146\156\147\170\150\205" +
    "\151\203\152\165\153\204\154\177\155\172\156\207\157" +
    "\166\160\176\161\174\162\157\165\163\215\u0181\001\002" +
    "\000\002\001\ufef8\000\002\001\ufef7\000\002\001\uffe4\000" +
    "\042\065\u0132\121\u013d\122\u0140\123\u013e\124\u0146\125\u0141" +
    "\126\u0147\127\u0143\130\u0145\131\u013f\132\u013c\133\u0142\134" +
    "\u0144\136\u0186\166\ufed3\167\ufed3\001\ufed5\000\004\136\u0185" +
    "\001\ufed6\000\002\001\uffe3\000\002\001\uffe2\000\002\001" +
    "\uff0c\000\002\001\uff10\000\132\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\002\000\070\033\200\115\167\116" +
    "\210\117\161\135\164\137\160\140\201\141\162\142\171" +
    "\143\202\144\206\145\173\146\156\147\170\150\205\151" +
    "\203\152\165\153\204\154\177\155\172\156\207\157\166" +
    "\160\176\161\174\162\157\165\163\215\u018b\001\002\000" +
    "\006\102\u018d\216\u018e\001\002\000\002\001\uffe9\000\004" +
    "\136\u01a0\001\uff97\000\004\136\u0190\001\uff97\000\010\037" +
    "\u019d\040\u0193\041\u0194\001\002\000\002\001\uff97\000\010" +
    "\037\u0192\040\u0193\041\u0194\001\002\000\004\136\u019c\001" +
    "\002\000\132\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\156" +
    "\105\157\066\163\142\164\014\166\053\167\147\170\027" +
    "\171\132\172\041\173\126\174\072\175\134\176\071\177" +
    "\037\202\075\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\006\136\u0196\216\u0197\001\002\000\002\001" +
    "\ufff8\000\002\001\uff93\000\002\001\uff94\000\224\003\116" +
    "\004\141\005\153\006\110\007\012\010\035\012\061\014" +
    "\074\017\127\020\021\021\122\022\120\023\044\025\034" +
    "\027\102\031\152\034\104\036\130\042\055\043\121\044" +
    "\107\046\135\047\042\051\150\052\026\053\011\055\077" +
    "\056\143\057\031\060\321\061\033\062\140\067\146\070" +
    "\013\071\020\072\046\073\050\074\131\075\006\076\036" +
    "\102\064\105\025\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\136\010\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\206\043" +
    "\207\062\210\017\214\145\217\101\220\113\221\060\222" +
    "\076\001\uff95\000\072\033\200\115\167\116\210\117\161" +
    "\135\164\136\u0196\137\160\140\201\141\162\142\171\143" +
    "\202\144\206\145\173\146\156\147\170\150\205\151\203" +
    "\152\165\153\204\154\177\155\172\156\207\157\166\160" +
    "\176\161\174\162\157\165\163\216\u0197\001\002\000\002" +
    "\001\ufff8\000\224\003\116\004\141\005\153\006\110\007" +
    "\012\010\035\012\061\014\074\017\127\020\021\021\122" +
    "\022\120\023\044\025\034\027\102\031\152\034\104\036" +
    "\130\042\055\043\121\044\107\046\135\047\042\051\150" +
    "\052\026\053\011\055\077\056\143\057\031\060\321\061" +
    "\033\062\140\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\102\064\105\025\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\206\043\207\062\210\017\214\145\217" +
    "\101\220\113\221\060\222\076\001\uff96\000\002\001\uff98" +
    "\000\004\136\u019e\001\002\000\002\001\uff99\000\010\040" +
    "\u0193\041\u0194\103\u01a3\001\002\000\002\001\uff97\000\010" +
    "\040\u0193\041\u0194\103\u01a2\001\002\000\002\001\uff9a\000" +
    "\002\001\uff9b\000\002\001\uff0e\000\066\033\200\115\167" +
    "\116\210\117\161\135\164\137\160\140\201\141\162\142" +
    "\171\143\202\144\206\145\173\146\156\147\170\150\205" +
    "\151\203\152\165\153\204\154\177\155\172\156\207\157" +
    "\166\160\176\161\174\162\157\165\163\001\ufe91\000\006" +
    "\114\u01a8\136\u01a9\001\002\000\066\033\200\115\167\116" +
    "\210\117\161\135\164\137\160\140\201\141\162\142\171" +
    "\143\202\144\206\145\173\146\156\147\170\150\205\151" +
    "\203\152\165\153\204\154\177\155\172\156\207\157\166" +
    "\160\176\161\174\162\157\165\163\001\uff4b\000\132\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\002" +
    "\001\uffdf\000\066\033\200\115\167\116\210\117\161\135" +
    "\164\137\160\140\201\141\162\142\171\143\202\144\206" +
    "\145\173\146\156\147\170\150\205\151\203\152\165\153" +
    "\204\154\177\155\172\156\207\157\166\160\176\161\174" +
    "\162\157\165\163\001\uff4c\000\002\001\uffe6\000\070\033" +
    "\200\115\167\116\210\117\161\135\164\136\u01ad\137\160" +
    "\140\201\141\162\142\171\143\202\144\206\145\173\146" +
    "\156\147\170\150\205\151\203\152\165\153\204\154\177" +
    "\155\172\156\207\157\166\160\176\161\174\162\157\165" +
    "\163\001\002\000\002\001\uffe5\000\004\023\u01af\001\002" +
    "\000\004\214\u01b0\001\002\000\132\004\141\006\110\007" +
    "\012\010\035\012\061\017\127\034\104\056\143\057\031" +
    "\067\146\070\013\071\020\072\046\073\050\074\131\075" +
    "\006\076\036\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\156\105\157\066\163\142\164\014\166" +
    "\053\167\147\170\027\171\132\172\041\173\126\174\072" +
    "\175\134\176\071\177\037\202\075\214\145\217\101\220" +
    "\113\221\060\222\076\001\002\000\070\033\200\115\167" +
    "\116\210\117\161\135\164\137\160\140\201\141\162\142" +
    "\171\143\202\144\206\145\173\146\156\147\170\150\205" +
    "\151\203\152\165\153\204\154\177\155\172\156\207\157" +
    "\166\160\176\161\174\162\157\165\163\215\u01b2\001\002" +
    "\000\004\136\u01b3\001\002\000\002\001\uffeb\000\004\063" +
    "\u01b6\001\uffaf\000\002\001\uffbd\000\006\003\u01b7\010\u01ba" +
    "\001\002\000\002\001\uffa8\000\004\114\u01bb\001\uffae\000" +
    "\002\001\uffab\000\002\001\uff00\000\006\003\u01bc\010\u01ba" +
    "\001\002\000\002\001\uffa9\000\002\001\uffaa\000\004\102" +
    "\u01bf\001\002\000\002\001\uff69\000\234\003\u01ce\004\141" +
    "\005\153\006\110\007\012\010\035\012\061\014\074\017" +
    "\127\020\021\021\122\022\120\023\044\025\034\027\102" +
    "\031\152\034\104\036\130\042\055\043\121\045\u01d1\046" +
    "\135\047\042\051\150\052\026\053\011\054\u01d4\055\077" +
    "\056\143\057\031\061\033\062\140\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\102\064" +
    "\103\u01cc\105\u01c2\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\136\010\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\206\u01c3" +
    "\207\u01c6\210\u01c1\211\u01cb\212\u01c9\213\u01d2\214\145\217" +
    "\101\220\113\221\060\222\076\001\uff5c\000\004\061\u0211" +
    "\001\uff53\000\002\001\uff63\000\002\001\uff55\000\002\001" +
    "\uff5a\000\006\114\u0203\136\u0204\001\002\000\004\061\u0202" +
    "\001\uff54\000\004\012\u01f9\001\002\000\020\044\uff5b\206" +
    "\u01f6\207\u01f7\210\u01f8\211\u01cb\212\u01c9\213\u01d2\001\uff5e" +
    "\000\002\001\uff57\000\002\001\uffb8\000\002\001\uff56\000" +
    "\002\001\uffb9\000\002\001\uffbc\000\002\001\uff62\000\002" +
    "\001\uff6a\000\002\001\uffb7\000\006\010\267\106\056\001" +
    "\002\000\002\001\uff58\000\004\044\u01d5\001\002\000\002" +
    "\001\uff5d\000\004\143\u01d7\001\uffc7\000\006\010\267\106" +
    "\056\001\002\000\002\001\uffc6\000\002\001\uff66\000\004" +
    "\214\u01da\001\002\000\012\003\u01dd\010\u01df\070\u01db\215" +
    "\uff87\001\uff7e\000\002\001\uff7c\000\006\012\u01ec\143\u01eb" +
    "\001\002\000\002\001\uff7f\000\004\215\u01e4\001\002\000" +
    "\002\001\uff7d\000\004\114\u01e2\001\uff88\000\002\001\uff86" +
    "\000\014\003\u01dd\010\u01df\070\u01db\114\uff84\215\uff84\001" +
    "\uff7e\000\002\001\uff85\000\002\001\uff65\000\006\102\u01e7" +
    "\136\u01e8\001\uff5f\000\002\001\uff64\000\002\001\ufff8\000" +
    "\002\001\uff61\000\226\003\116\004\141\005\153\006\110" +
    "\007\012\010\035\012\061\014\074\017\127\020\021\021" +
    "\122\022\120\023\044\025\034\027\102\031\152\034\104" +
    "\036\130\042\055\043\121\044\107\046\135\047\042\051" +
    "\150\052\026\053\011\055\077\056\143\057\031\060\321" +
    "\061\033\062\140\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\102\064\103\u01ea\105\025" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\136\010\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\206\043\207\062\210\017" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\002\001\uff60\000\004\012\u01ef\001\002\000\004\121\u01ed" +
    "\001\uff83\000\034\006\110\007\012\010\u0100\017\127\070" +
    "\374\071\020\072\046\073\050\074\131\075\006\106\056" +
    "\156\372\157\u0101\001\002\000\002\001\uff81\000\004\121" +
    "\u01f0\001\uff82\000\034\006\110\007\012\010\u0100\017\127" +
    "\070\374\071\020\072\046\073\050\074\131\075\006\106" +
    "\056\156\372\157\u0101\001\002\000\002\001\uff80\000\004" +
    "\121\u01f3\001\002\000\034\006\110\007\012\010\u0100\017" +
    "\127\070\374\071\020\072\046\073\050\074\131\075\006" +
    "\106\056\156\372\157\u0101\001\002\000\002\001\uff4d\000" +
    "\002\001\uff59\000\002\001\uff55\000\002\001\uff54\000\002" +
    "\001\uff53\000\004\121\u0200\001\uff50\000\006\114\u01fb\136" +
    "\u01fc\001\002\000\004\012\u01fd\001\002\000\002\001\uff68" +
    "\000\004\121\u01fe\001\uff52\000\034\006\110\007\012\010" +
    "\u0100\017\127\070\374\071\020\072\046\073\050\074\131" +
    "\075\006\106\056\156\372\157\u0101\001\002\000\002\001" +
    "\uff51\000\034\006\110\007\012\010\u0100\017\127\070\374" +
    "\071\020\072\046\073\050\074\131\075\006\106\056\156" +
    "\372\157\u0101\001\002\000\002\001\uff4f\000\002\001\uffb5" +
    "\000\006\010\267\106\056\001\002\000\002\001\uff67\000" +
    "\004\121\u0206\001\002\000\034\006\110\007\012\010\u0100" +
    "\017\127\070\374\071\020\072\046\073\050\074\131\075" +
    "\006\106\056\156\372\157\u0101\001\002\000\002\001\uff4e" +
    "\000\004\121\u020f\001\uff6c\000\006\114\u020a\136\u020b\001" +
    "\002\000\004\012\u020c\001\002\000\002\001\uffe0\000\004" +
    "\121\u020d\001\uff6e\000\034\006\110\007\012\010\u0100\017" +
    "\127\070\374\071\020\072\046\073\050\074\131\075\006" +
    "\106\056\156\372\157\u0101\001\002\000\002\001\uff6d\000" +
    "\034\006\110\007\012\010\u0100\017\127\070\374\071\020" +
    "\072\046\073\050\074\131\075\006\106\056\156\372\157" +
    "\u0101\001\002\000\002\001\uff6b\000\002\001\uffb4\000\016" +
    "\012\061\015\u0218\016\u0219\100\u0217\101\u0215\220\u0216\001" +
    "\002\000\006\065\u0225\200\u0224\001\ufea0\000\002\001\ufea4" +
    "\000\012\010\035\012\061\106\056\217\101\001\002\000" +
    "\002\001\ufee2\000\134\004\141\006\110\007\012\010\035" +
    "\011\u021a\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\002\000\002\001\ufea2\000\002\001" +
    "\ufea3\000\006\103\u021d\200\u021e\001\002\000\070\033\200" +
    "\103\u021c\115\167\116\210\117\161\135\164\137\160\140" +
    "\201\141\162\142\171\143\202\144\206\145\173\146\156" +
    "\147\170\150\205\151\203\152\165\153\204\154\177\155" +
    "\172\156\207\157\166\160\176\161\174\162\157\165\163" +
    "\001\002\000\002\001\ufe9d\000\002\001\ufe9b\000\132\004" +
    "\141\006\110\007\012\010\035\012\061\017\127\034\104" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\106\056\107\030\110\067" +
    "\111\051\112\124\113\106\120\063\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\070" +
    "\033\200\115\167\116\210\117\161\135\164\137\160\140" +
    "\201\141\162\142\171\143\202\144\206\145\173\146\156" +
    "\147\170\150\205\151\203\152\165\153\204\154\177\155" +
    "\172\156\207\157\166\160\176\161\174\162\157\165\163" +
    "\201\u0220\001\002\000\004\103\u0221\001\002\000\002\001" +
    "\ufe9c\000\006\065\u0132\103\u0223\001\002\000\002\001\ufe9a" +
    "\000\012\010\267\012\061\013\u022a\106\056\001\002\000" +
    "\006\010\267\106\056\001\002\000\002\001\ufe9e\000\002" +
    "\001\ufe97\000\004\201\u022b\001\002\000\002\001\ufe99\000" +
    "\002\001\ufe98\000\002\001\ufe9f\000\006\010\267\106\056" +
    "\001\002\000\002\001\uffc5\000\004\214\u022f\001\002\000" +
    "\012\003\u01dd\010\u01df\070\u01db\215\uff87\001\uff7e\000\004" +
    "\215\u0231\001\002\000\002\001\uffc4\000\006\003\u0233\102" +
    "\u0234\001\002\000\002\001\uffc1\000\002\001\ufff8\000\002" +
    "\001\uffc3\000\226\003\116\004\141\005\153\006\110\007" +
    "\012\010\035\012\061\014\074\017\127\020\021\021\122" +
    "\022\120\023\044\025\034\027\102\031\152\034\104\036" +
    "\130\042\055\043\121\044\107\046\135\047\042\051\150" +
    "\052\026\053\011\055\077\056\143\057\031\060\321\061" +
    "\033\062\140\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\102\064\103\u0237\105\025\106" +
    "\056\107\030\110\067\111\051\112\124\113\106\120\063" +
    "\136\010\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\206\043\207\062\210\017\214" +
    "\145\217\101\220\113\221\060\222\076\001\002\000\002" +
    "\001\uffc2\000\066\033\200\115\167\116\210\117\161\135" +
    "\164\137\160\140\201\141\162\142\171\143\202\144\206" +
    "\145\173\146\156\147\170\150\205\151\203\152\165\153" +
    "\204\154\177\155\172\156\207\157\166\160\176\161\174" +
    "\162\157\165\163\001\ufe90\000\012\033\200\160\176\161" +
    "\174\162\157\001\uff21\000\002\001\uff41\000\132\004\141" +
    "\006\110\007\012\010\035\012\061\017\127\034\104\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\002\000\042\035" +
    "\u024d\065\u0132\121\u013d\122\u0140\123\u013e\124\u0146\125\u0141" +
    "\126\u0147\127\u0143\130\u0145\131\u013f\132\u013c\133\u0142\134" +
    "\u0144\166\ufed3\167\ufed3\001\ufed5\000\004\035\u023e\001\ufed6" +
    "\000\012\010\035\012\061\106\056\217\101\001\002\000" +
    "\006\065\u0132\066\u0241\001\uffa7\000\004\215\u0246\001\002" +
    "\000\014\010\035\012\061\106\056\143\u0244\217\101\001" +
    "\002\000\002\001\uffa6\000\004\065\u0132\001\uffa5\000\012" +
    "\010\035\012\061\106\056\217\101\001\002\000\004\065" +
    "\u0132\001\uffa4\000\212\003\116\004\141\005\153\006\110" +
    "\007\012\010\035\012\061\014\074\017\127\020\021\021" +
    "\122\022\120\023\044\025\034\027\102\031\152\034\104" +
    "\036\130\042\055\043\121\046\135\047\042\051\150\052" +
    "\026\053\011\055\077\056\143\057\031\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\102" +
    "\064\105\025\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\136\010\156\105\157\066\163\142\164" +
    "\014\166\053\167\147\170\027\171\132\172\041\173\126" +
    "\174\072\175\134\176\071\177\037\202\075\206\043\214" +
    "\145\216\u0247\217\101\220\113\221\060\222\076\001\002" +
    "\000\002\001\ufff8\000\002\001\uffa1\000\002\001\uffd9\000" +
    "\226\003\116\004\141\005\153\006\110\007\012\010\035" +
    "\012\061\014\074\017\127\020\021\021\122\022\120\023" +
    "\044\025\034\027\102\030\u024b\031\152\034\104\036\130" +
    "\042\055\043\121\044\107\046\135\047\042\051\150\052" +
    "\026\053\011\055\077\056\143\057\031\060\321\061\033" +
    "\062\140\067\146\070\013\071\020\072\046\073\050\074" +
    "\131\075\006\076\036\102\064\105\025\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\136\010\156" +
    "\105\157\066\163\142\164\014\166\053\167\147\170\027" +
    "\171\132\172\041\173\126\174\072\175\134\176\071\177" +
    "\037\202\075\206\043\207\062\210\017\214\145\217\101" +
    "\220\113\221\060\222\076\001\002\000\004\136\u024c\001" +
    "\002\000\002\001\uffa0\000\014\010\035\012\061\106\056" +
    "\143\u0244\217\101\001\002\000\004\066\u0241\001\uffa7\000" +
    "\004\215\u0250\001\002\000\212\003\116\004\141\005\153" +
    "\006\110\007\012\010\035\012\061\014\074\017\127\020" +
    "\021\021\122\022\120\023\044\025\034\027\102\031\152" +
    "\034\104\036\130\042\055\043\121\046\135\047\042\051" +
    "\150\052\026\053\011\055\077\056\143\057\031\067\146" +
    "\070\013\071\020\072\046\073\050\074\131\075\006\076" +
    "\036\102\064\105\025\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\136\010\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\206" +
    "\043\214\145\216\u0247\217\101\220\113\221\060\222\076" +
    "\001\002\000\002\001\uffda\000\002\001\uff35\000\002\001" +
    "\uff33\000\012\010\035\012\061\106\056\217\101\001\002" +
    "\000\002\001\uffce\000\004\065\u0132\001\uffcc\000\006\114" +
    "\u0259\215\u0258\001\002\000\004\136\u025b\001\002\000\012" +
    "\010\035\012\061\106\056\217\101\001\002\000\002\001" +
    "\uffcd\000\002\001\uffdb\000\016\012\061\015\u0218\016\u0219" +
    "\100\u0217\101\u0215\222\u025d\001\002\000\002\001\ufee1\000" +
    "\004\214\u0158\001\ufef6\000\002\001\uff42\000\002\001\uff0d" +
    "\000\002\001\uff0b\000\010\102\231\200\232\214\ufecc\001" +
    "\ufec3\000\066\033\200\115\167\116\210\117\161\135\164" +
    "\137\160\140\201\141\162\142\171\143\202\144\206\145" +
    "\173\146\156\147\170\150\205\151\203\152\165\153\204" +
    "\154\177\155\172\156\207\157\166\160\176\161\174\162" +
    "\157\165\163\001\ufe93\000\012\033\200\160\176\161\174" +
    "\162\157\001\uff20\000\002\001\ufff8\000\226\003\116\004" +
    "\141\005\153\006\110\007\012\010\035\012\061\014\074" +
    "\017\127\020\021\021\122\022\120\023\044\025\034\027" +
    "\102\031\152\034\104\036\130\042\055\043\121\044\107" +
    "\046\135\047\042\051\150\052\026\053\011\055\077\056" +
    "\143\057\031\060\321\061\033\062\140\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\102" +
    "\064\103\u0267\105\025\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\136\010\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\206" +
    "\043\207\062\210\017\214\145\217\101\220\113\221\060" +
    "\222\076\001\002\000\002\001\uffef\000\060\033\200\135" +
    "\164\137\160\140\201\141\162\142\171\143\202\144\206" +
    "\145\173\146\156\147\170\150\205\151\203\152\165\153" +
    "\204\154\177\155\172\156\207\157\166\160\176\161\174" +
    "\162\157\165\163\001\uff05\000\016\012\061\015\u0218\016" +
    "\u0219\100\u0217\101\u0215\221\u026a\001\002\000\002\001\uff06" +
    "\000\004\215\u026c\001\002\000\004\136\u026d\001\002\000" +
    "\002\001\ufffa\000\002\001\uffe8\000\070\033\200\115\167" +
    "\116\210\117\161\135\164\136\u0270\137\160\140\201\141" +
    "\162\142\171\143\202\144\206\145\173\146\156\147\170" +
    "\150\205\151\203\152\165\153\204\154\177\155\172\156" +
    "\207\157\166\160\176\161\174\162\157\165\163\001\002" +
    "\000\002\001\uffe7\000\002\001\uff34\000\132\004\141\006" +
    "\110\007\012\010\035\012\061\017\127\034\104\056\143" +
    "\057\031\067\146\070\013\071\020\072\046\073\050\074" +
    "\131\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\156\105\157\066\163\142\164" +
    "\014\166\053\167\147\170\027\171\132\172\041\173\126" +
    "\174\072\175\134\176\071\177\037\202\075\214\145\217" +
    "\101\220\113\221\060\222\076\001\002\000\070\033\200" +
    "\115\167\116\210\117\161\135\164\137\160\140\201\141" +
    "\162\142\171\143\202\144\206\145\173\146\156\147\170" +
    "\150\205\151\203\152\165\153\204\154\177\155\172\156" +
    "\207\157\166\160\176\161\174\162\157\165\163\215\u0274" +
    "\001\002\000\002\001\ufe92\000\002\001\uffc0\000\004\063" +
    "\u0277\001\uffb3\000\006\003\u0282\010\u01ba\001\002\000\004" +
    "\003\u027a\001\uffba\000\004\064\u027c\001\uffad\000\002\001" +
    "\uffbb\000\002\001\uffbf\000\006\003\u01b7\010\u01ba\001\002" +
    "\000\004\114\u01bb\001\uffac\000\004\102\u027f\001\002\000" +
    "\002\001\uff69\000\234\003\u01ce\004\141\005\153\006\110" +
    "\007\012\010\035\012\061\014\074\017\127\020\021\021" +
    "\122\022\120\023\044\025\034\027\102\031\152\034\104" +
    "\036\130\042\055\043\121\045\u01d1\046\135\047\042\051" +
    "\150\052\026\053\011\054\u01d4\055\077\056\143\057\031" +
    "\061\033\062\140\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\102\064\103\u01cc\105\u01c2" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\136\010\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\206\u01c3\207\u01c6\210\u01c1" +
    "\211\u01cb\212\u01c9\213\u01d2\214\145\217\101\220\113\221" +
    "\060\222\076\001\uff5c\000\002\001\uffbe\000\002\001\uffb1" +
    "\000\002\001\uffb2\000\132\004\141\006\110\007\012\010" +
    "\035\012\061\017\127\034\104\056\143\057\031\067\146" +
    "\070\013\071\020\072\046\073\050\074\131\075\006\076" +
    "\036\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\156\105\157\066\163\142\164\014\166\053\167" +
    "\147\170\027\171\132\172\041\173\126\174\072\175\134" +
    "\176\071\177\037\202\075\214\145\217\101\220\113\221" +
    "\060\222\076\001\002\000\070\033\200\115\167\116\210" +
    "\117\161\135\164\137\160\140\201\141\162\142\171\143" +
    "\202\144\206\145\173\146\156\147\170\150\205\151\203" +
    "\152\165\153\204\154\177\155\172\156\207\157\166\160" +
    "\176\161\174\162\157\165\163\215\u0286\001\002\000\212" +
    "\003\116\004\141\005\153\006\110\007\012\010\035\012" +
    "\061\014\074\017\127\020\021\021\122\022\120\023\044" +
    "\025\034\027\102\031\152\034\104\036\130\042\055\043" +
    "\121\046\135\047\042\051\150\052\026\053\011\055\077" +
    "\056\143\057\031\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\102\064\105\025\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\136" +
    "\010\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\206\043\214\145\216\u0287\217\101" +
    "\220\113\221\060\222\076\001\002\000\002\001\ufff8\000" +
    "\002\001\uffec\000\002\001\uff92\000\226\003\116\004\141" +
    "\005\153\006\110\007\012\010\035\012\061\014\074\017" +
    "\127\020\021\021\122\022\120\023\044\024\u028b\025\034" +
    "\027\102\031\152\034\104\036\130\042\055\043\121\044" +
    "\107\046\135\047\042\051\150\052\026\053\011\055\077" +
    "\056\143\057\031\060\321\061\033\062\140\067\146\070" +
    "\013\071\020\072\046\073\050\074\131\075\006\076\036" +
    "\102\064\105\025\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\136\010\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\206\043" +
    "\207\062\210\017\214\145\217\101\220\113\221\060\222" +
    "\076\001\002\000\004\136\u028c\001\002\000\002\001\uff91" +
    "\000\002\001\ufff8\000\226\003\116\004\141\005\153\006" +
    "\110\007\012\010\035\012\061\014\074\017\127\020\021" +
    "\021\122\022\120\023\044\025\034\027\102\031\152\034" +
    "\104\036\130\042\055\043\121\044\107\046\135\047\042" +
    "\051\150\052\026\053\011\055\077\056\143\057\031\060" +
    "\321\061\033\062\140\067\146\070\013\071\020\072\046" +
    "\073\050\074\131\075\006\076\036\102\064\103\u028f\105" +
    "\025\106\056\107\030\110\067\111\051\112\124\113\106" +
    "\120\063\136\010\156\105\157\066\163\142\164\014\166" +
    "\053\167\147\170\027\171\132\172\041\173\126\174\072" +
    "\175\134\176\071\177\037\202\075\206\043\207\062\210" +
    "\017\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\004\050\u0290\001\002\000\004\214\u0291\001\002\000" +
    "\004\010\u01ba\001\002\000\004\012\061\001\002\000\004" +
    "\215\u0294\001\002\000\004\102\u0295\001\002\000\002\001" +
    "\ufff8\000\226\003\116\004\141\005\153\006\110\007\012" +
    "\010\035\012\061\014\074\017\127\020\021\021\122\022" +
    "\120\023\044\025\034\027\102\031\152\034\104\036\130" +
    "\042\055\043\121\044\107\046\135\047\042\051\150\052" +
    "\026\053\011\055\077\056\143\057\031\060\321\061\033" +
    "\062\140\067\146\070\013\071\020\072\046\073\050\074" +
    "\131\075\006\076\036\102\064\103\u0297\105\025\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\136" +
    "\010\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\206\043\207\062\210\017\214\145" +
    "\217\101\220\113\221\060\222\076\001\002\000\004\050" +
    "\u0298\001\uffd2\000\004\214\u029d\001\002\000\002\001\uffd6" +
    "\000\002\001\uffd1\000\004\050\u0298\001\uffd3\000\002\001" +
    "\uffd0\000\004\010\u01ba\001\002\000\004\012\u029f\001\002" +
    "\000\004\215\u02a0\001\002\000\004\102\u02a1\001\002\000" +
    "\002\001\ufff8\000\226\003\116\004\141\005\153\006\110" +
    "\007\012\010\035\012\061\014\074\017\127\020\021\021" +
    "\122\022\120\023\044\025\034\027\102\031\152\034\104" +
    "\036\130\042\055\043\121\044\107\046\135\047\042\051" +
    "\150\052\026\053\011\055\077\056\143\057\031\060\321" +
    "\061\033\062\140\067\146\070\013\071\020\072\046\073" +
    "\050\074\131\075\006\076\036\102\064\103\u02a3\105\025" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\136\010\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\206\043\207\062\210\017" +
    "\214\145\217\101\220\113\221\060\222\076\001\002\000" +
    "\002\001\uffcf\000\002\001\uff0f\000\002\001\uff09\000\016" +
    "\012\061\015\u0218\016\u0219\077\u02a7\100\u0217\101\u0215\001" +
    "\002\000\002\001\ufee0\000\132\004\141\006\110\007\012" +
    "\010\035\012\061\017\127\034\104\056\143\057\031\067" +
    "\146\070\013\071\020\072\046\073\050\074\131\075\006" +
    "\076\036\106\056\107\030\110\067\111\051\112\124\113" +
    "\106\120\063\156\105\157\066\163\142\164\014\166\053" +
    "\167\147\170\027\171\132\172\041\173\126\174\072\175" +
    "\134\176\071\177\037\202\075\214\145\217\101\220\113" +
    "\221\060\222\076\001\uff4a\000\004\114\u02b7\001\uff49\000" +
    "\066\033\200\115\167\116\210\117\161\135\164\137\160" +
    "\140\201\141\162\142\171\143\202\144\206\145\173\146" +
    "\156\147\170\150\205\151\203\152\165\153\204\154\177" +
    "\155\172\156\207\157\166\160\176\161\174\162\157\165" +
    "\163\001\uff47\000\004\136\u02ac\001\002\000\132\004\141" +
    "\006\110\007\012\010\035\012\061\017\127\034\104\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\106\056\107\030\110\067\111" +
    "\051\112\124\113\106\120\063\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\uff4a\000\004\136" +
    "\u02ae\001\002\000\132\004\141\006\110\007\012\010\035" +
    "\012\061\017\127\034\104\056\143\057\031\067\146\070" +
    "\013\071\020\072\046\073\050\074\131\075\006\076\036" +
    "\106\056\107\030\110\067\111\051\112\124\113\106\120" +
    "\063\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\214\145\217\101\220\113\221\060" +
    "\222\076\001\uff4a\000\004\215\u02b0\001\002\000\212\003" +
    "\116\004\141\005\153\006\110\007\012\010\035\012\061" +
    "\014\074\017\127\020\021\021\122\022\120\023\044\025" +
    "\034\027\102\031\152\034\104\036\130\042\055\043\121" +
    "\046\135\047\042\051\150\052\026\053\011\055\077\056" +
    "\143\057\031\067\146\070\013\071\020\072\046\073\050" +
    "\074\131\075\006\076\036\102\064\105\025\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\136\010" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\206\043\214\145\216\u02b2\217\101\220" +
    "\113\221\060\222\076\001\002\000\002\001\uffea\000\002" +
    "\001\ufff8\000\002\001\uffa3\000\226\003\116\004\141\005" +
    "\153\006\110\007\012\010\035\012\061\014\074\017\127" +
    "\020\021\021\122\022\120\023\044\025\034\026\u02b5\027" +
    "\102\031\152\034\104\036\130\042\055\043\121\044\107" +
    "\046\135\047\042\051\150\052\026\053\011\055\077\056" +
    "\143\057\031\060\321\061\033\062\140\067\146\070\013" +
    "\071\020\072\046\073\050\074\131\075\006\076\036\102" +
    "\064\105\025\106\056\107\030\110\067\111\051\112\124" +
    "\113\106\120\063\136\010\156\105\157\066\163\142\164" +
    "\014\166\053\167\147\170\027\171\132\172\041\173\126" +
    "\174\072\175\134\176\071\177\037\202\075\206\043\207" +
    "\062\210\017\214\145\217\101\220\113\221\060\222\076" +
    "\001\002\000\004\136\u02b6\001\002\000\002\001\uffa2\000" +
    "\132\004\141\006\110\007\012\010\035\012\061\017\127" +
    "\034\104\056\143\057\031\067\146\070\013\071\020\072" +
    "\046\073\050\074\131\075\006\076\036\106\056\107\030" +
    "\110\067\111\051\112\124\113\106\120\063\156\105\157" +
    "\066\163\142\164\014\166\053\167\147\170\027\171\132" +
    "\172\041\173\126\174\072\175\134\176\071\177\037\202" +
    "\075\214\145\217\101\220\113\221\060\222\076\001\002" +
    "\000\066\033\200\115\167\116\210\117\161\135\164\137" +
    "\160\140\201\141\162\142\171\143\202\144\206\145\173" +
    "\146\156\147\170\150\205\151\203\152\165\153\204\154" +
    "\177\155\172\156\207\157\166\160\176\161\174\162\157" +
    "\165\163\001\uff48\000\012\010\267\012\061\106\056\217" +
    "\101\001\002\000\004\214\u0161\001\ufe8d\000\012\010\035" +
    "\012\061\106\056\217\101\001\002\000\006\065\u0132\215" +
    "\u02bd\001\002\000\002\001\ufe95\000\066\033\200\115\167" +
    "\116\210\117\161\135\164\137\160\140\201\141\162\142" +
    "\171\143\202\144\206\145\173\146\156\147\170\150\205" +
    "\151\203\152\165\153\204\154\177\155\172\156\207\157" +
    "\166\160\176\161\174\162\157\165\163\001\ufe94\000\002" +
    "\001\uff11\000\004\017\u02c4\001\002\000\004\136\u02c3\001" +
    "\002\000\002\001\uffcb\000\002\001\uffdc\000\004\215\u02c5" +
    "\001\002\000\002\001\uffca\000\006\114\u01a8\136\u02c7\001" +
    "\002\000\002\001\uffd4\000\002\001\uffdd\000\002\001\uff1e" +
    "\000\134\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\143\u02cd" +
    "\156\105\157\066\163\142\164\014\166\053\167\147\170" +
    "\027\171\132\172\041\173\126\174\072\175\134\176\071" +
    "\177\037\202\075\214\145\217\101\220\113\221\060\222" +
    "\076\001\ufeae\000\004\215\u02dd\001\002\000\004\114\u02d4" +
    "\001\ufedd\000\012\010\035\012\061\106\056\217\101\001" +
    "\002\000\070\033\200\066\u02cf\115\167\116\210\117\161" +
    "\135\164\137\160\140\201\141\162\142\171\143\202\144" +
    "\206\145\173\146\156\147\170\150\205\151\203\152\165" +
    "\153\204\154\177\155\172\156\207\157\166\160\176\161" +
    "\174\162\157\165\163\001\ufea9\000\134\004\141\006\110" +
    "\007\012\010\035\012\061\017\127\034\104\056\143\057" +
    "\031\067\146\070\013\071\020\072\046\073\050\074\131" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\143\u02d0\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\002\000\012\010" +
    "\035\012\061\106\056\217\101\001\002\000\066\033\200" +
    "\115\167\116\210\117\161\135\164\137\160\140\201\141" +
    "\162\142\171\143\202\144\206\145\173\146\156\147\170" +
    "\150\205\151\203\152\165\153\204\154\177\155\172\156" +
    "\207\157\166\160\176\161\174\162\157\165\163\001\ufeaa" +
    "\000\002\001\ufea6\000\002\001\ufea5\000\134\004\141\006" +
    "\110\007\012\010\035\012\061\017\127\034\104\056\143" +
    "\057\031\067\146\070\013\071\020\072\046\073\050\074" +
    "\131\075\006\076\036\106\056\107\030\110\067\111\051" +
    "\112\124\113\106\120\063\143\u02d6\156\105\157\066\163" +
    "\142\164\014\166\053\167\147\170\027\171\132\172\041" +
    "\173\126\174\072\175\134\176\071\177\037\202\075\214" +
    "\145\217\101\220\113\221\060\222\076\001\ufedc\000\002" +
    "\001\ufead\000\012\010\035\012\061\106\056\217\101\001" +
    "\002\000\070\033\200\066\u02d8\115\167\116\210\117\161" +
    "\135\164\137\160\140\201\141\162\142\171\143\202\144" +
    "\206\145\173\146\156\147\170\150\205\151\203\152\165" +
    "\153\204\154\177\155\172\156\207\157\166\160\176\161" +
    "\174\162\157\165\163\001\ufeab\000\134\004\141\006\110" +
    "\007\012\010\035\012\061\017\127\034\104\056\143\057" +
    "\031\067\146\070\013\071\020\072\046\073\050\074\131" +
    "\075\006\076\036\106\056\107\030\110\067\111\051\112" +
    "\124\113\106\120\063\143\u02d9\156\105\157\066\163\142" +
    "\164\014\166\053\167\147\170\027\171\132\172\041\173" +
    "\126\174\072\175\134\176\071\177\037\202\075\214\145" +
    "\217\101\220\113\221\060\222\076\001\002\000\012\010" +
    "\035\012\061\106\056\217\101\001\002\000\066\033\200" +
    "\115\167\116\210\117\161\135\164\137\160\140\201\141" +
    "\162\142\171\143\202\144\206\145\173\146\156\147\170" +
    "\150\205\151\203\152\165\153\204\154\177\155\172\156" +
    "\207\157\166\160\176\161\174\162\157\165\163\001\ufeac" +
    "\000\002\001\ufea8\000\002\001\ufea7\000\002\001\uff07\000" +
    "\006\114\u02e7\136\u02e8\001\002\000\002\001\uff71\000\014" +
    "\010\035\012\061\102\u02e4\106\056\217\101\001\002\000" +
    "\002\001\uff72\000\002\001\uff70\000\004\065\u0132\001\ufed5" +
    "\000\132\004\141\006\110\007\012\010\035\012\061\017" +
    "\127\034\104\056\143\057\031\067\146\070\013\071\020" +
    "\072\046\073\050\074\131\075\006\076\036\106\056\107" +
    "\030\110\067\111\051\112\124\113\106\120\063\156\105" +
    "\157\066\163\142\164\014\166\053\167\147\170\027\171" +
    "\132\172\041\173\126\174\072\175\134\176\071\177\037" +
    "\202\075\214\145\217\101\220\113\221\060\222\076\001" +
    "\002\000\070\033\200\103\u02e6\115\167\116\210\117\161" +
    "\135\164\137\160\140\201\141\162\142\171\143\202\144" +
    "\206\145\173\146\156\147\170\150\205\151\203\152\165" +
    "\153\204\154\177\155\172\156\207\157\166\160\176\161" +
    "\174\162\157\165\163\001\002\000\002\001\uff6f\000\006" +
    "\012\u02df\217\u02e0\001\002\000\002\001\uffe1\000\002\001" +
    "\uff73\000\134\004\141\006\110\007\012\010\035\012\061" +
    "\017\127\034\104\056\143\057\031\067\146\070\013\071" +
    "\020\072\046\073\050\074\131\075\006\076\036\106\056" +
    "\107\030\110\067\111\051\112\124\113\106\120\063\143" +
    "\u012d\156\105\157\066\163\142\164\014\166\053\167\147" +
    "\170\027\171\132\172\041\173\126\174\072\175\134\176" +
    "\071\177\037\202\075\214\145\217\101\220\113\221\060" +
    "\222\076\001\uff7a\000\004\215\u02ec\001\002\000\002\001" +
    "\uff01\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02eb\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\074\004\150\005\143\010\111\050\135\051\044" +
    "\054\110\056\014\062\015\063\053\064\116\071\067\101" +
    "\064\102\124\103\114\106\031\115\102\116\122\117\023" +
    "\123\132\124\022\125\046\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\u02dd\040\u02e0\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\044\054\110\056\014\062\u02c8\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\045\u02c5\050" +
    "\135\051\044\054\110\056\014\062\u01a6\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u02c0\001\001\000\052" +
    "\050\135\051\044\054\110\056\014\062\u02be\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\023\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\037\147" +
    "\051\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u02bd\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\u02a5\001\001\000\052\050\135\051" +
    "\044\054\110\056\014\062\u02a4\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\002\001\001\000\052\050\135\051\044\054\110\056" +
    "\014\062\u02a3\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\002\001\001" +
    "\000\004\041\u0208\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\051\044\063" +
    "\053\064\116\071\067\102\u011e\106\u0121\117\u011f\134\u0270" +
    "\135\006\136\021\140\113\144\037\147\051\001\001\000" +
    "\002\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u026e\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\076\u0268\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\050\135\051\044\054\110\056" +
    "\014\062\u0267\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\004\153\u0264" +
    "\001\001\000\002\001\001\000\052\050\135\051\044\054" +
    "\110\056\014\062\u0263\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\023\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\052" +
    "\050\135\051\044\054\110\056\014\062\u0262\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\023\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\037\147" +
    "\051\001\001\000\010\063\u0261\064\116\140\113\001\001" +
    "\000\052\050\135\051\044\054\110\056\014\062\u0260\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\052\050\135\051\044\054\110" +
    "\056\014\062\u025f\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\023\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\063\227\064\116\071\224" +
    "\106\225\136\021\140\113\141\u025d\143\223\144\221\145" +
    "\222\001\001\000\004\076\u025b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u0239\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\052\050\135\051" +
    "\044\054\110\056\014\062\u0238\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\052\050\135\051\044\054\110\056\014\062\u0237\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\004\044\u022b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\u0211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\005\u01ad\010\111\050" +
    "\135\051\044\054\110\056\014\062\015\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\u01ab\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\054\045\u01a5\050\135" +
    "\051\044\054\110\056\014\062\u01a6\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\023\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\001" +
    "\001\000\002\001\001\000\052\050\135\051\044\054\110" +
    "\056\014\062\u01a4\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\023\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\002\001" +
    "\001\000\052\050\135\051\044\054\110\056\014\062\u01a3" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\023\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\050\135\051\044\054\110" +
    "\056\014\062\u0187\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\023\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\002\001" +
    "\001\000\052\050\135\051\044\054\110\056\014\062\u0186" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\023\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\052\050\u0183\051\044\054" +
    "\110\056\014\062\u012d\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\u0182\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u017d\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u017b\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u0173\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\034\051\044\063\053\064\116\071\067\102\u011e\106\u0121" +
    "\117\u011f\134\u0120\135\006\136\021\140\113\144\037\147" +
    "\051\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u011c\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\044" +
    "\054\110\056\014\062\154\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\023\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\037\147\051\001\001\000" +
    "\002\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\364\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\052\050\135\051" +
    "\044\054\110\056\014\062\363\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\052\050\135\051\044\054\110\056\014\062\362\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\052\050\135\051\044\054\110" +
    "\056\014\062\361\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\023\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\052\050" +
    "\135\051\044\054\110\056\014\062\360\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\357\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\052\050\135\051\044" +
    "\054\110\056\014\062\354\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\023\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\037\147\051\001\001\000" +
    "\052\050\135\051\044\054\110\056\014\062\353\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\023\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\037" +
    "\147\051\001\001\000\052\050\135\051\044\054\110\056" +
    "\014\062\352\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\052\050\135" +
    "\051\044\054\110\056\014\062\351\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\023\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\001" +
    "\001\000\052\050\135\051\044\054\110\056\014\062\350" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\023\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\052\050\135\051\044\054" +
    "\110\056\014\062\347\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\023\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\052" +
    "\050\135\051\044\054\110\056\014\062\346\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\023\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\037\147" +
    "\051\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\345\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\052\050\135\051" +
    "\044\054\110\056\014\062\344\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\056\005\304\010\111\050\135\051\044\054\110\056" +
    "\014\062\015\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\052\050\135" +
    "\051\044\054\110\056\014\062\302\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\023\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\001" +
    "\001\000\052\050\135\051\044\054\110\056\014\062\301" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\023\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\026\063\227\064\116\071" +
    "\224\106\225\136\021\140\113\141\220\143\223\144\221" +
    "\145\222\001\001\000\052\050\135\051\044\054\110\056" +
    "\014\062\217\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\052\050\135" +
    "\051\044\054\110\056\014\062\216\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\023\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\001" +
    "\001\000\052\050\135\051\044\054\110\056\014\062\215" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\023\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\052\050\135\051\044\054" +
    "\110\056\014\062\214\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\023\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\052" +
    "\050\135\051\044\054\110\056\014\062\213\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\023\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\037\147" +
    "\051\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\212\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\052\050\135\051" +
    "\044\054\110\056\014\062\211\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\052\050\135\051\044\054\110\056\014\062\210\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\063\256\064\116\140\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\050" +
    "\135\051\044\054\110\056\014\062\235\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\054\050\135\051\044\054\110\056\014\062" +
    "\233\063\053\064\116\065\232\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\064\242\067\240\071\241\140\113" +
    "\001\001\000\002\001\001\000\010\063\243\064\116\140" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\246\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\254\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\054\050\135\051\044" +
    "\054\110\056\014\062\233\063\053\064\116\065\252\071" +
    "\067\101\064\102\124\106\031\117\023\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\063\267\064" +
    "\116\066\263\070\261\071\264\102\260\135\262\140\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\063\272\064\116\140\113" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\270\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\050\135\051\044\054\110\056\014\062\277" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\023\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\054\050\135\051\044\054" +
    "\110\056\014\062\233\063\053\064\116\065\275\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\316\001\001\000\004\026\305\001\001\000\004\030" +
    "\306\001\001\000\002\001\001\000\056\005\315\010\111" +
    "\050\135\051\044\054\110\056\014\062\015\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\023\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\037\147" +
    "\051\001\001\000\002\001\001\000\052\050\135\051\044" +
    "\054\110\056\014\062\312\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\023\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\037\147\051\001\001\000" +
    "\002\001\001\000\056\005\314\010\111\050\135\051\044" +
    "\054\110\056\014\062\015\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\023\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\037\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\076\005\324\007\317" +
    "\010\111\027\322\050\135\051\044\054\110\056\014\062" +
    "\015\063\053\064\116\071\067\101\064\102\124\103\114" +
    "\106\031\115\321\116\323\117\023\123\132\124\022\125" +
    "\046\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\050\135\051\044\054\110" +
    "\056\014\062\331\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\023\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\334\001\001\000\074" +
    "\005\324\007\317\010\111\050\135\051\044\054\110\056" +
    "\014\062\015\063\053\064\116\071\067\101\064\102\124" +
    "\103\114\106\031\115\321\116\323\117\023\123\132\124" +
    "\022\125\046\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\004\006\336\001" +
    "\001\000\074\005\324\007\317\010\111\050\135\051\044" +
    "\054\110\056\014\062\015\063\053\064\116\071\067\101" +
    "\064\102\124\103\114\106\031\115\321\116\323\117\023" +
    "\123\132\124\022\125\046\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\356\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\366" +
    "\102\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\054\374\055\375\102\372\146\376\001\001\000\012" +
    "\054\374\055\u0110\102\372\146\376\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\054\374\055" +
    "\u0101\102\372\146\376\001\001\000\002\001\001\000\004" +
    "\102\u0103\001\001\000\002\001\001\000\016\054\374\055" +
    "\u0107\057\u0105\061\u0106\102\372\146\376\001\001\000\002" +
    "\001\001\000\004\060\u010b\001\001\000\002\001\001\000" +
    "\012\054\374\055\u0109\102\372\146\376\001\001\000\002" +
    "\001\001\000\012\054\374\055\u010c\102\372\146\376\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\374" +
    "\055\u010e\102\372\146\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\005\u0118\010\111" +
    "\020\u0116\050\135\051\044\054\110\056\014\062\015\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\004\102\u0113\001\001\000\002" +
    "\001\001\000\012\054\374\055\u0115\102\372\146\376\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0119" +
    "\001\001\000\002\001\001\000\074\005\324\007\317\010" +
    "\111\050\135\051\044\054\110\056\014\062\015\063\053" +
    "\064\116\071\067\101\064\102\124\103\114\106\031\115" +
    "\321\116\323\117\023\123\132\124\022\125\046\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\037\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\063\267" +
    "\064\u0126\067\240\071\u0125\102\u0123\135\u0124\140\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\063\u0127" +
    "\064\116\140\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\035\u012b\036\u0129\050\u012e\051\044\054\110" +
    "\056\014\062\u012d\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\u012a\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\051\044" +
    "\063\053\064\116\071\067\102\u011e\105\u012f\106\u0121\117" +
    "\u0130\135\006\136\021\140\113\144\037\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\063\267\064\116\066\u0133\070\261" +
    "\071\264\102\260\135\u0132\140\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\035\u0135\036\u0129\050\u012e" +
    "\051\044\054\110\056\014\062\u012d\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\u012a\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\035\u0138" +
    "\036\u0129\050\u012e\051\044\054\110\056\014\062\u012d\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\u012a" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\050\135\051\044\054\110\056" +
    "\014\062\u015a\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\052\050\135" +
    "\051\044\054\110\056\014\062\u0152\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\023\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\001" +
    "\001\000\052\050\135\051\044\054\110\056\014\062\u0150" +
    "\063\053\064\116\071\067\101\064\102\124\106\031\117" +
    "\023\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\052\050\135\051\044\054" +
    "\110\056\014\062\u014f\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\023\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\052" +
    "\050\135\051\044\054\110\056\014\062\u014e\063\053\064" +
    "\116\071\067\101\064\102\124\106\031\117\023\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\037\147" +
    "\051\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u014d\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\052\050\135\051" +
    "\044\054\110\056\014\062\u014c\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\052\050\135\051\044\054\110\056\014\062\u014b\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\052\050\135\051\044\054\110" +
    "\056\014\062\u014a\063\053\064\116\071\067\101\064\102" +
    "\124\106\031\117\023\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\052\050" +
    "\135\051\044\054\110\056\014\062\u0149\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\u0148\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\052\050\135\051\044" +
    "\054\110\056\014\062\u0147\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\023\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\037\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\051\044\063\053\064\116\071\067\102\u011e\106" +
    "\u0121\117\u0154\135\006\136\021\140\113\144\037\147\051" +
    "\001\001\000\002\001\001\000\026\063\227\064\116\071" +
    "\224\106\225\136\021\140\113\141\u0155\143\223\144\221" +
    "\145\222\001\001\000\002\001\001\000\004\053\u0156\001" +
    "\001\000\002\001\001\000\056\035\u0158\036\u0129\050\u012e" +
    "\051\044\054\110\056\014\062\u012d\063\053\064\116\071" +
    "\067\101\064\102\124\106\031\117\u012a\132\136\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\u015e\051\044\054\110\056\014\062\u012d\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\u015c" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\034\051\044" +
    "\063\053\064\116\071\067\102\u011e\105\u015f\106\u0121\117" +
    "\u0130\135\006\136\021\140\113\144\037\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\035\u0161\036" +
    "\u0129\050\u012e\051\044\054\110\056\014\062\u012d\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\u012a\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\037" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\035\u0164\036\u0129\050\u012e\051\044\054\110\056\014" +
    "\062\u012d\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\u012a\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\051\044\063\053\064\116\071\067" +
    "\072\u0167\073\u0168\102\u011e\106\u0121\117\u0169\135\006\136" +
    "\021\140\113\144\037\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\051\044\063\053\064\116\071\067\072\u016c\073\u0168" +
    "\102\u011e\106\u0121\117\u0169\135\006\136\021\140\113\144" +
    "\037\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\051\044\063\053\064\116\071\067\073\u016f\102" +
    "\u011e\106\u0121\117\u0169\135\006\136\021\140\113\144\037" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\050\135\051\044\054\110\056\014\062\u0172\063\053" +
    "\064\116\071\067\101\064\102\124\106\031\117\023\132" +
    "\136\134\077\135\006\136\021\140\113\142\072\144\037" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\051\044\063\053\064\116\071\067" +
    "\102\u011e\106\u0121\117\u0176\135\006\136\021\137\u0177\140" +
    "\113\144\037\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\051\044\063\053\064" +
    "\116\071\067\102\u011e\106\u0121\117\u017a\135\006\136\021" +
    "\140\113\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u017e\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\044\054\110\056\014\062\u0189\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\004\022\u018b" +
    "\001\001\000\002\001\001\000\004\023\u019e\001\001\000" +
    "\004\023\u018e\001\001\000\002\001\001\000\004\023\u0190" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\050" +
    "\135\051\044\054\110\056\014\062\u0198\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\004\024\u0194\001\001\000\004\006\u0197\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\005\324" +
    "\007\317\010\111\050\135\051\044\054\110\056\014\062" +
    "\015\063\053\064\116\071\067\101\064\102\124\103\114" +
    "\106\031\115\321\116\323\117\023\123\132\124\022\125" +
    "\046\132\136\134\077\135\006\136\021\140\113\142\072" +
    "\144\037\147\051\001\001\000\004\024\u0199\001\001\000" +
    "\004\006\u019a\001\001\000\074\005\324\007\317\010\111" +
    "\050\135\051\044\054\110\056\014\062\015\063\053\064" +
    "\116\071\067\101\064\102\124\103\114\106\031\115\321" +
    "\116\323\117\023\123\132\124\022\125\046\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u01a0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\044\054\110\056\014\062\u01a9\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\044" +
    "\054\110\056\014\062\u01b0\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\023\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\037\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\u01b4\001\001\000\004\160\u01bd\001\001\000\006\106" +
    "\u01b8\130\u01b7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\106\u01bc\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\u01bf\001\001\000\102\010\u01c9\043\u01ce\050" +
    "\135\051\044\054\110\056\014\062\015\063\053\064\116" +
    "\071\067\101\064\102\124\103\114\106\031\110\u01c4\111" +
    "\u01d2\113\u01c7\114\u01c3\116\u01cf\117\023\124\022\125\046" +
    "\132\136\133\u01c6\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\150\u01cc\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\u0208\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\u01f9" +
    "\001\001\000\004\114\u01f4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\u01f1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\u01d5\001\001\000" +
    "\004\102\u01d7\001\001\000\002\001\001\000\004\161\u01d8" +
    "\001\001\000\002\001\001\000\012\032\u01dd\033\u01df\034" +
    "\u01e0\131\u01db\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\u01e2\131\u01db" +
    "\001\001\000\002\001\001\000\004\162\u01e4\001\001\000" +
    "\004\112\u01e5\001\001\000\002\001\001\000\004\006\u01e8" +
    "\001\001\000\002\001\001\000\074\005\324\007\317\010" +
    "\111\050\135\051\044\054\110\056\014\062\015\063\053" +
    "\064\116\071\067\101\064\102\124\103\114\106\031\115" +
    "\321\116\323\117\023\123\132\124\022\125\046\132\136" +
    "\134\077\135\006\136\021\140\113\142\072\144\037\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\054\374\055\u01ed\102\372\146\376\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\374" +
    "\055\u01f0\102\372\146\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\374\055\u01f3\102\372\146\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\374\055\u01fe\102\372\146\376" +
    "\001\001\000\002\001\001\000\012\054\374\055\u0200\102" +
    "\372\146\376\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0204\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\054\374\055\u0206\102\372\146\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\054\374\055\u020d\102\372\146\376\001\001\000\002\001" +
    "\001\000\012\054\374\055\u020f\102\372\146\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\077\u0213\140" +
    "\u0212\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\051\044\063\053\064\116\071\067\102\u011e\106\u0121\117" +
    "\u0221\135\006\136\021\140\113\144\037\147\051\001\001" +
    "\000\002\001\001\000\052\050\135\051\044\054\110\056" +
    "\014\062\u021a\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\044" +
    "\054\110\056\014\062\u021e\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\023\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\037\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\100\u0227\102\u0228\140" +
    "\u0226\001\001\000\004\102\u0225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u022c\001\001" +
    "\000\004\154\u022d\001\001\000\002\001\001\000\012\032" +
    "\u022f\033\u01df\034\u01e0\131\u01db\001\001\000\002\001\001" +
    "\000\004\155\u0231\001\001\000\004\151\u0234\001\001\000" +
    "\002\001\001\000\004\006\u0235\001\001\000\002\001\001" +
    "\000\074\005\324\007\317\010\111\050\135\051\044\054" +
    "\110\056\014\062\015\063\053\064\116\071\067\101\064" +
    "\102\124\103\114\106\031\115\321\116\323\117\023\123" +
    "\132\124\022\125\046\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\u023c\051\044\054\110\056\014\062\u012d\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\u023b" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\051\044\063\053\064\116\071\067\102\u011e\106" +
    "\u0121\117\u023e\135\006\136\021\140\113\144\037\147\051" +
    "\001\001\000\004\014\u023f\001\001\000\002\001\001\000" +
    "\034\015\u0241\051\044\063\053\064\116\071\067\102\u011e" +
    "\106\u0121\117\u0242\135\006\136\021\140\113\144\037\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\051\044\063\053\064\116\071\067\102\u011e\106\u0121\117" +
    "\u0244\135\006\136\021\140\113\144\037\147\051\001\001" +
    "\000\002\001\001\000\060\005\u0247\010\111\017\u0248\050" +
    "\135\051\044\054\110\056\014\062\015\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\004\006\u0249\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\005\324\007\317\010\111\050\135" +
    "\051\044\054\110\056\014\062\015\063\053\064\116\071" +
    "\067\101\064\102\124\103\114\106\031\115\321\116\323" +
    "\117\023\123\132\124\022\125\046\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\015\u024d\051" +
    "\044\063\053\064\116\071\067\102\u011e\106\u0121\117\u0242" +
    "\135\006\136\021\140\113\144\037\147\051\001\001\000" +
    "\004\014\u024e\001\001\000\002\001\001\000\060\005\u0247" +
    "\010\111\017\u0250\050\135\051\044\054\110\056\014\062" +
    "\015\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\011\u0256\012\u0254\051" +
    "\044\063\053\064\116\071\067\102\u011e\106\u0121\117\u0255" +
    "\135\006\136\021\140\113\144\037\147\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\012\u0259\051\044\063\053\064\116\071" +
    "\067\102\u011e\106\u0121\117\u0255\135\006\136\021\140\113" +
    "\144\037\147\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\077\u0213\140\u0212\001\001\000\002\001\001" +
    "\000\004\053\u025e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0265\001\001\000\074\005" +
    "\324\007\317\010\111\050\135\051\044\054\110\056\014" +
    "\062\015\063\053\064\116\071\067\101\064\102\124\103" +
    "\114\106\031\115\321\116\323\117\023\123\132\124\022" +
    "\125\046\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\077\u0213\140\u0212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u0272\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\156\u0275\001\001\000\004\126\u0277" +
    "\001\001\000\004\106\u0282\001\001\000\004\152\u0278\001" +
    "\001\000\004\127\u027a\001\001\000\002\001\001\000\004" +
    "\157\u027d\001\001\000\006\106\u01b8\130\u027c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\u027f\001\001" +
    "\000\102\010\u01c9\043\u01ce\050\135\051\044\054\110\056" +
    "\014\062\015\063\053\064\116\071\067\101\064\102\124" +
    "\103\114\106\031\110\u01c4\111\u01d2\113\u01c7\114\u01c3\116" +
    "\u01cf\117\023\124\022\125\046\132\136\133\u01c6\134\077" +
    "\135\006\136\021\140\113\142\072\144\037\147\051\150" +
    "\u0280\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\u0284\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\002\001\001\000\060" +
    "\005\u0288\010\111\025\u0287\050\135\051\044\054\110\056" +
    "\014\062\015\063\053\064\116\071\067\101\064\102\124" +
    "\106\031\117\023\132\136\134\077\135\006\136\021\140" +
    "\113\142\072\144\037\147\051\001\001\000\004\006\u0289" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\005" +
    "\324\007\317\010\111\050\135\051\044\054\110\056\014" +
    "\062\015\063\053\064\116\071\067\101\064\102\124\103" +
    "\114\106\031\115\321\116\323\117\023\123\132\124\022" +
    "\125\046\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\u028d\001\001\000\074\005\324\007" +
    "\317\010\111\050\135\051\044\054\110\056\014\062\015" +
    "\063\053\064\116\071\067\101\064\102\124\103\114\106" +
    "\031\115\321\116\323\117\023\123\132\124\022\125\046" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\u0291\001\001\000\004\140\u0292\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0295\001\001" +
    "\000\074\005\324\007\317\010\111\050\135\051\044\054" +
    "\110\056\014\062\015\063\053\064\116\071\067\101\064" +
    "\102\124\103\114\106\031\115\321\116\323\117\023\123" +
    "\132\124\022\125\046\132\136\134\077\135\006\136\021" +
    "\140\113\142\072\144\037\147\051\001\001\000\010\120" +
    "\u0298\121\u029a\122\u0299\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\122\u029b\001\001\000" +
    "\002\001\001\000\004\106\u029d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u02a1\001" +
    "\001\000\074\005\324\007\317\010\111\050\135\051\044" +
    "\054\110\056\014\062\015\063\053\064\116\071\067\101" +
    "\064\102\124\103\114\106\031\115\321\116\323\117\023" +
    "\123\132\124\022\125\046\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\077" +
    "\u0213\140\u0212\001\001\000\002\001\001\000\056\046\u02aa" +
    "\047\u02a8\050\135\051\044\054\110\056\014\062\u02a9\063" +
    "\053\064\116\071\067\101\064\102\124\106\031\117\023" +
    "\132\136\134\077\135\006\136\021\140\113\142\072\144" +
    "\037\147\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\046\u02ac\047\u02a8\050\135\051" +
    "\044\054\110\056\014\062\u02a9\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\002\001\001\000\056\046\u02ae\047\u02a8\050\135\051" +
    "\044\054\110\056\014\062\u02a9\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\002\001\001\000\060\005\u02b2\010\111\016\u02b0\050" +
    "\135\051\044\054\110\056\014\062\015\063\053\064\116" +
    "\071\067\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\002\001\001\000\004\006\u02b3\001\001\000" +
    "\002\001\001\000\074\005\324\007\317\010\111\050\135" +
    "\051\044\054\110\056\014\062\015\063\053\064\116\071" +
    "\067\101\064\102\124\103\114\106\031\115\321\116\323" +
    "\117\023\123\132\124\022\125\046\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\050\135\051" +
    "\044\054\110\056\014\062\u02b7\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\023\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\002\001\001\000\020\063\267\064\u0126\067\240\071" +
    "\u0125\102\u02b9\135\u0124\140\113\001\001\000\002\001\001" +
    "\000\032\051\044\063\053\064\116\071\067\102\u011e\106" +
    "\u0121\117\u02bb\135\006\136\021\140\113\144\037\147\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\050\135\051\044\054" +
    "\110\056\014\062\u02cd\063\053\064\116\071\067\074\u02ca" +
    "\075\u02cb\101\064\102\124\106\031\117\023\132\136\134" +
    "\077\135\006\136\021\140\113\142\072\144\037\147\051" +
    "\001\001\000\002\001\001\000\004\060\u02d4\001\001\000" +
    "\034\051\044\063\053\064\116\071\067\102\u011e\105\u02d2" +
    "\106\u0121\117\u0130\135\006\136\021\140\113\144\037\147" +
    "\051\001\001\000\002\001\001\000\052\050\135\051\044" +
    "\054\110\056\014\062\u02d0\063\053\064\116\071\067\101" +
    "\064\102\124\106\031\117\023\132\136\134\077\135\006" +
    "\136\021\140\113\142\072\144\037\147\051\001\001\000" +
    "\034\051\044\063\053\064\116\071\067\102\u011e\105\u02d1" +
    "\106\u0121\117\u0130\135\006\136\021\140\113\144\037\147" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\135\051\044\054\110\056\014\062" +
    "\u02d6\063\053\064\116\071\067\101\064\102\124\106\031" +
    "\117\023\132\136\134\077\135\006\136\021\140\113\142" +
    "\072\144\037\147\051\001\001\000\002\001\001\000\034" +
    "\051\044\063\053\064\116\071\067\102\u011e\105\u02db\106" +
    "\u0121\117\u0130\135\006\136\021\140\113\144\037\147\051" +
    "\001\001\000\002\001\001\000\052\050\135\051\044\054" +
    "\110\056\014\062\u02d9\063\053\064\116\071\067\101\064" +
    "\102\124\106\031\117\023\132\136\134\077\135\006\136" +
    "\021\140\113\142\072\144\037\147\051\001\001\000\034" +
    "\051\044\063\053\064\116\071\067\102\u011e\105\u02da\106" +
    "\u0121\117\u0130\135\006\136\021\140\113\144\037\147\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\051\044\063\053\064\116\071\067\102\u011e\106" +
    "\u0121\117\u02e2\132\u02e1\135\006\136\021\140\113\144\037" +
    "\147\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\044\054\110\056\014" +
    "\062\u02e4\063\053\064\116\071\067\101\064\102\124\106" +
    "\031\117\023\132\136\134\077\135\006\136\021\140\113" +
    "\142\072\144\037\147\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u02e8\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\035\u02ea\036\u0129\050\u012e\051" +
    "\044\054\110\056\014\062\u012d\063\053\064\116\071\067" +
    "\101\064\102\124\106\031\117\u012a\132\136\134\077\135" +
    "\006\136\021\140\113\142\072\144\037\147\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;

		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}

	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher = new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

	protected Expression createDispatch(Expression dispatcher, ObjectDimList dimList) {
		return resolveDimList(this.createDispatch(dispatcher, dimList.variable), dimList.list);
	}

	protected Expression resolveDimList(Expression variable, DimList list) {
		if (list == null) {
			return variable;
		}
		for (DimList.Element el : list) {
			if (variable.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
				variable = new ArrayVariableReference(variable.start(), el.right, ((SimpleReference) variable).getName(), el.index, el.type);
			} else {
				variable = new ReflectionArrayVariableReference(variable.start(), el.right, variable, el.index, el.type);
			}
		}
		return variable;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CompilerAstParser$actions {
  private final CompilerAstParser parser;

  /** Constructor */
  CUP$CompilerAstParser$actions(CompilerAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000000(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();

	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment) c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
		if (c instanceof Comment) {
			program.getCommentList().add((Comment) c);
		}
	}

	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerAstParser$parser.done_parsing();
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (statement != null) {
		parser.addStatement(statement);
		if (parser.pendingStatement != null) {
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while (!parser.declarations.isEmpty()) {
		parser.getModuleDeclaration().addStatement(parser.declarations.pop());
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$0",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unticked_statement ::= T_CURLY_OPEN NT$0 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = (Block) parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);

	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);
	RESULT = whileStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);
	RESULT = doStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);
	RESULT = forStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	GlobalStatement global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(startleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catch",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$1 ::= 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$1",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$2 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$2",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$1 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$2 function_body 
            {
              PHPMethodDeclaration RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",103, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (PHPMethodDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",103, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$3 ::= 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft, classNameright, classNameleft, classNameright, modifier.modifier, className, null, null, new Block(classNameright, classNameright, null), modifier.doc);
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$3",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$4 ::= 
            {
              Statement RESULT =(Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.peek();
	if (superClass != null) {
		classDeclaration.setSuperClass(superClass);
	}
	if (interfaces != null) {
		classDeclaration.setInterfaceList(interfaces);
	}
	classDeclaration.setEnd(interfacesright);
	classDeclaration.getBody().setStart(interfacesright);
	classDeclaration.getBody().setEnd(interfacesright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$4",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_class_declaration_statement ::= class_entry_type T_STRING NT$3 extends_from errorOrNot implements_list NT$4 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$5 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft, interfacesright, classNameleft, classNameright, className, interfaces, new Block(interfacesright, interfacesright, null), start);
	interfaceDeclaration.setRecovered(true);
	parser.declarations.push(interfaceDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$5",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list NT$5 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration) parser.declarations.pop();
	interfaceDeclaration.setRecovered(false);
	interfaceDeclaration.setEnd(blockEndright);
	interfaceDeclaration.getBody().setStart(blockStartleft);
	interfaceDeclaration.getBody().setEnd(blockEndright);
	RESULT = interfaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // errorOrNot ::= error 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // errorOrNot ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // class_closure ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // class_entry_type ::= T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // class_entry_type ::= T_FINAL T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // interface_list ::= error 
            {
              List RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parameter ::= error 
            {
              FormalParameter RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // optional_class_type ::= T_STRING 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new TypeReference(classNameleft, classNameright, className);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new TypeReference(arrayleft, arrayright, "array");
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // global_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // class_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference) decl[0];
		Expression initializer = (Expression) decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock) decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$6 ::= 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$6",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$7",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st NT$6 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$7 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	if (body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration) parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());
	if (body instanceof EmptyStatement) { /* method without body part */
		if (type instanceof ClassDeclaration) {
			ClassDeclaration classDeclaration = (ClassDeclaration) type;
			if ((classDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
				if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
				}
			} else {
				if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
				} else {
					String message = Messages.getString("AbstractMethodInAbstractClass", methodDeclaration.getName(), classDeclaration.getName());
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodInAbstractClass), message);

					message = Messages.getString("AbstractMethodsInConcreteClass", classDeclaration.getName());
					parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodsInConcreteClass), message);
				}
			}
		}
	} else if (body == null) { /* method with body part */
		if (type instanceof ClassDeclaration) {
			if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
				parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
			}
		} else if (type instanceof InterfaceDeclaration) {
			parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
		}
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // class_statement ::= error 
            {
              Object RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	// return an EmptyStatement object to make distinction between an abstract method and a method with an empty body
	RESULT = new EmptyStatement(endleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // method_body ::= 
            {
              Statement RESULT =null;
		
	parser.reportError();
	RESULT = new ASTError(0, 0);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // variable_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendPropertyModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // variable_modifiers ::= T_VAR 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock var = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // method_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // method_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendMethodModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // member_modifier ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // member_modifier ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // member_modifier ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // member_modifier ::= T_STATIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // member_modifier ::= T_ABSTRACT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // member_modifier ::= T_FINAL 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // class_constant_declaration ::= class_constant_declaration T_COMMA string_st T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // class_constant_declaration ::= T_CONST string_st T_EQUAL static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation);
	RESULT = assignment;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_AND_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_OR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MUL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_DIV, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MOD, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_PLUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_MINUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_NOT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_TILDA);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr, className);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ifTrue, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_INT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_REAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_OBJECT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_BOOL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_UNSET);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, name, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters);
	RESULT = staticMethodInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters);
	RESULT = functionInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // fully_qualified_class_name ::= T_STRING 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference name = new TypeReference(classNameleft, classNameright, className);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // class_name_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference classReference = new TypeReference(classNameleft, classNameright, className);
	RESULT = classReference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",95, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",95, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // dynamic_class_name_reference ::= dynamic_class_name_variable_property 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // dynamic_class_name_variable_property ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // common_scalar ::= T_LINE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // common_scalar ::= T_FILE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // static_scalar ::= string_st 
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(strleft, strright, str, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM string_st 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	TypeReference cname = new TypeReference(classNameleft, classNameright, className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, cname, vname);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // scalar ::= string_st 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_SINGLE);
	RESULT = quote;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000001(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // r_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("r_variable",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // w_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("w_variable",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // rw_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("rw_variable",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // variable ::= variable T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);

	if (memberProperty.getClass().equals(SimpleReference.class)) {
		RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty, paramsList);
	} else {
		RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty, paramsList);
	}


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // variable ::= variable T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	if (memberProperty.list != null) {
		Expression dispatch = parser.createDispatch(ch, memberProperty);
		if (dispatch.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, null, (SimpleReference) dispatch, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, null, dispatch, paramsList);
		}
	} else {
		if (memberProperty.variable.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty.variable, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty.variable, paramsList);
		}
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // field_access_dim_list ::= field_access_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // field_access_dim_list ::= field_access_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // field_access_dim_list ::= compound_variable 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = new StaticFieldAccess(classNameleft, varright, className, finalVar);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, var.variable.end(), className, var.variable);
	RESULT = parser.resolveDimList(staticFieldAccess, var.list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // base_variable ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // base_variable ::= static_member 
            {
              Expression RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression staticFieldAccess = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var;
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var;
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // reference_variable ::= compound_variable 
            {
              Expression RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // compound_variable ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // dim_offset ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // object_dim_list ::= variable_name 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = new ObjectDimList(var); 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // variable_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(1);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // assignment_list_element ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // assignment_list_element ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // encaps_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // encaps_var ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new ArrayVariableReference(varNameleft, cright, varName, index, ArrayVariableReference.VARIABLE_ARRAY));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new Scalar(varNameleft, varNameright, varName, Scalar.TYPE_STRING));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft, numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList(openParright, endleft);
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM string_st 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",94, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CompilerAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CompilerAstParser$do_action_part00000000(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CompilerAstParser$do_action_part00000001(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
