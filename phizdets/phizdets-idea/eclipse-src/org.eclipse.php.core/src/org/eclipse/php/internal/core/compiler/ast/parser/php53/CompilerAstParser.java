
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser.php53;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php53.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CompilerAstParser extends AbstractASTParser {

 public final Class getSymbolContainer() {
    return CompilerParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CompilerAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CompilerAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01b0\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\005\000\002\007\004" +
    "\000\002\007\002\000\002\010\004\000\002\010\002\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\006\000\002\170\002\000\002\011\006\000\002\171" +
    "\002\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\126\003\000\002\126\003\000\002\127\005\000" +
    "\002\127\003\000\002\006\005\000\002\006\003\000\002" +
    "\005\003\000\002\005\005\000\002\005\004\000\002\005" +
    "\006\000\002\013\004\000\002\013\002\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\006\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\172\002\000\002\015\006\000\002\015" +
    "\011\000\002\015\014\000\002\015\007\000\002\015\011" +
    "\000\002\015\013\000\002\015\007\000\002\015\004\000" +
    "\002\015\005\000\002\015\004\000\002\015\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\003" +
    "\000\002\015\004\000\002\015\005\000\002\015\007\000" +
    "\002\015\012\000\002\015\012\000\002\015\007\000\002" +
    "\015\003\000\002\015\017\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\135\003\000\002\135\002" +
    "\000\002\136\003\000\002\136\004\000\002\137\012\000" +
    "\002\016\003\000\002\016\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\005\000\002\132\003\000\002\133" +
    "\003\000\002\053\002\000\002\053\003\000\002\173\002" +
    "\000\002\174\002\000\002\140\013\000\002\166\005\000" +
    "\002\166\003\000\002\175\002\000\002\176\002\000\002" +
    "\141\014\000\002\177\002\000\002\141\011\000\002\167" +
    "\003\000\002\167\002\000\002\165\003\000\002\165\003" +
    "\000\002\142\003\000\002\142\004\000\002\142\004\000" +
    "\002\143\002\000\002\143\004\000\002\143\004\000\002" +
    "\115\003\000\002\116\002\000\002\116\004\000\002\144" +
    "\002\000\002\144\004\000\002\145\003\000\002\145\005" +
    "\000\002\145\005\000\002\145\003\000\002\021\002\000" +
    "\002\021\004\000\002\022\003\000\002\022\004\000\002" +
    "\023\003\000\002\023\006\000\002\024\003\000\002\024" +
    "\006\000\002\025\003\000\002\025\006\000\002\026\005" +
    "\000\002\026\007\000\002\027\005\000\002\027\006\000" +
    "\002\027\006\000\002\027\007\000\002\030\002\000\002" +
    "\030\007\000\002\030\006\000\002\031\003\000\002\031" +
    "\003\000\002\032\003\000\002\032\006\000\002\033\002" +
    "\000\002\033\010\000\002\034\002\000\002\034\011\000" +
    "\002\035\002\000\002\035\004\000\002\036\002\000\002" +
    "\036\005\000\002\037\003\000\002\037\002\000\002\042" +
    "\003\000\002\042\005\000\002\042\004\000\002\043\004" +
    "\000\002\043\005\000\002\043\006\000\002\043\007\000" +
    "\002\043\003\000\002\146\002\000\002\146\003\000\002" +
    "\146\003\000\002\044\003\000\002\044\002\000\002\045" +
    "\003\000\002\045\003\000\002\045\004\000\002\045\005" +
    "\000\002\045\005\000\002\045\006\000\002\046\005\000" +
    "\002\046\003\000\002\047\003\000\002\047\004\000\002" +
    "\047\006\000\002\050\005\000\002\050\007\000\002\050" +
    "\003\000\002\050\005\000\002\051\004\000\002\051\002" +
    "\000\002\052\005\000\002\052\004\000\002\200\002\000" +
    "\002\201\002\000\002\052\014\000\002\052\003\000\002" +
    "\052\003\000\002\125\003\000\002\125\005\000\002\125" +
    "\002\000\002\150\003\000\002\150\003\000\002\124\002" +
    "\000\002\124\003\000\002\130\003\000\002\130\004\000" +
    "\002\131\003\000\002\131\003\000\002\131\003\000\002" +
    "\131\003\000\002\131\003\000\002\131\003\000\002\122" +
    "\005\000\002\122\007\000\002\122\003\000\002\122\005" +
    "\000\002\123\007\000\002\123\006\000\002\054\005\000" +
    "\002\054\003\000\002\055\002\000\002\055\003\000\002" +
    "\056\005\000\002\056\003\000\002\057\010\000\002\057" +
    "\005\000\002\057\006\000\002\057\010\000\002\057\005" +
    "\000\002\057\004\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\004" +
    "\000\002\057\004\000\002\057\004\000\002\057\004\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\004\000\002\057\004\000\002\057\004\000\002\057" +
    "\004\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\007\000\002\057\006\000\002\057" +
    "\003\000\002\057\004\000\002\057\004\000\002\057\004" +
    "\000\002\057\004\000\002\057\004\000\002\057\004\000" +
    "\002\057\004\000\002\057\004\000\002\057\004\000\002" +
    "\057\003\000\002\057\006\000\002\057\005\000\002\057" +
    "\004\000\002\057\013\000\002\040\002\000\002\040\006" +
    "\000\002\041\005\000\002\041\006\000\002\041\003\000" +
    "\002\041\004\000\002\060\006\000\002\060\010\000\002" +
    "\060\007\000\002\060\010\000\002\060\010\000\002\060" +
    "\010\000\002\060\010\000\002\060\006\000\002\120\003" +
    "\000\002\120\003\000\002\120\005\000\002\120\004\000" +
    "\002\121\003\000\002\121\005\000\002\121\004\000\002" +
    "\156\003\000\002\156\003\000\002\160\003\000\002\162" +
    "\003\000\002\162\005\000\002\162\005\000\002\061\002" +
    "\000\002\061\004\000\002\061\005\000\002\110\002\000" +
    "\002\110\003\000\002\110\003\000\002\062\002\000\002" +
    "\062\005\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\005\000\002\063\004\000\002" +
    "\064\003\000\002\064\003\000\002\064\005\000\002\064" +
    "\004\000\002\064\004\000\002\064\004\000\002\064\006" +
    "\000\002\064\003\000\002\163\005\000\002\065\003\000" +
    "\002\065\003\000\002\065\005\000\002\065\004\000\002" +
    "\065\003\000\002\065\005\000\002\065\005\000\002\065" +
    "\005\000\002\066\002\000\002\066\004\000\002\067\002" +
    "\000\002\067\003\000\002\070\007\000\002\070\005\000" +
    "\002\070\005\000\002\070\003\000\002\071\003\000\002" +
    "\071\003\000\002\147\003\000\002\117\003\000\002\151" +
    "\003\000\002\134\003\000\002\134\005\000\002\134\005" +
    "\000\002\134\010\000\002\134\010\000\002\152\003\000" +
    "\002\152\004\000\002\100\003\000\002\100\004\000\002" +
    "\077\006\000\002\077\006\000\002\077\003\000\002\153" +
    "\005\000\002\153\005\000\002\073\003\000\002\164\003" +
    "\000\002\164\003\000\002\161\003\000\002\161\004\000" +
    "\002\161\003\000\002\072\006\000\002\072\006\000\002" +
    "\072\003\000\002\074\003\000\002\074\006\000\002\075" +
    "\002\000\002\075\003\000\002\076\006\000\002\076\006" +
    "\000\002\076\003\000\002\101\003\000\002\101\005\000" +
    "\002\102\003\000\002\102\004\000\002\103\005\000\002" +
    "\103\003\000\002\104\003\000\002\104\006\000\002\104" +
    "\002\000\002\105\002\000\002\105\004\000\002\106\007" +
    "\000\002\106\005\000\002\106\005\000\002\106\003\000" +
    "\002\106\010\000\002\106\006\000\002\106\006\000\002" +
    "\106\004\000\002\107\004\000\002\107\004\000\002\107" +
    "\004\000\002\107\003\000\002\107\004\000\002\111\003" +
    "\000\002\111\006\000\002\111\005\000\002\111\005\000" +
    "\002\111\010\000\002\111\005\000\002\111\005\000\002" +
    "\112\003\000\002\112\003\000\002\112\003\000\002\113" +
    "\006\000\002\113\006\000\002\113\004\000\002\113\004" +
    "\000\002\113\006\000\002\113\004\000\002\113\004\000" +
    "\002\154\003\000\002\154\005\000\002\157\005\000\002" +
    "\157\005\000\002\155\003\000\002\114\003\000\002\114" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u035d\000\002\001\ufffb\000\004\002\u035f\001\002\000" +
    "\240\003\123\004\152\005\164\006\113\007\011\010\034" +
    "\012\062\014\077\017\134\020\021\021\127\022\124\023" +
    "\045\025\033\027\106\031\165\034\110\036\136\042\056" +
    "\043\126\044\074\045\114\046\143\047\144\050\041\052" +
    "\162\053\026\054\012\056\101\057\156\060\031\061\057" +
    "\062\032\063\151\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\103\065\106\103\107\135" +
    "\110\042\111\067\112\025\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\143\010\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\043\214\063\215\017\221\160\224\105\225\117\226" +
    "\060\227\102\001\001\000\002\001\ufec5\000\004\221\u035c" +
    "\001\002\000\002\001\uffc1\000\002\001\ufec8\000\006\012" +
    "\u0351\224\u0352\001\002\000\004\221\u033c\001\002\000\002" +
    "\001\ufef1\000\146\004\152\006\113\007\011\010\171\012" +
    "\062\017\134\034\110\045\246\057\156\060\031\070\157" +
    "\071\013\072\020\073\046\074\047\075\140\076\006\077" +
    "\035\106\244\107\135\110\042\111\067\113\055\114\030" +
    "\115\071\116\052\117\131\120\112\125\064\163\111\164" +
    "\070\170\154\171\015\173\053\174\161\175\027\176\141" +
    "\177\040\200\133\201\075\202\142\203\073\204\036\207" +
    "\100\213\203\221\160\224\105\225\117\226\060\227\102" +
    "\001\002\000\070\033\u0108\122\u0100\123\u010f\124\372\142" +
    "\375\143\u033a\144\371\145\u0109\146\373\147\u0102\150\u010a" +
    "\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157" +
    "\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106" +
    "\166\u0105\167\370\172\374\001\002\000\004\062\u0250\001" +
    "\002\000\002\001\ufec3\000\146\004\152\006\113\007\011" +
    "\010\171\012\062\017\134\034\110\045\246\057\156\060" +
    "\031\070\157\071\013\072\020\073\046\074\047\075\140" +
    "\076\006\077\035\106\244\107\135\110\042\111\067\113" +
    "\055\114\030\115\071\116\052\117\131\120\112\125\064" +
    "\163\111\164\070\170\154\171\015\173\053\174\161\175" +
    "\027\176\141\177\040\200\133\201\075\202\142\203\073" +
    "\204\036\207\100\213\203\221\160\224\105\225\117\226" +
    "\060\227\102\001\002\000\002\001\ufe8c\000\002\001\uffb1" +
    "\000\040\066\364\126\352\127\355\130\353\131\363\132" +
    "\356\133\365\134\360\135\362\136\354\137\351\140\357" +
    "\141\361\173\ufea0\174\ufea0\001\ufea2\000\002\001\uffdb\000" +
    "\014\010\171\017\u01a8\111\u032e\113\055\221\u01a6\001\002" +
    "\000\146\004\152\006\113\007\011\010\171\012\062\017" +
    "\134\034\110\045\246\057\156\060\031\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\106" +
    "\244\107\135\110\042\111\067\113\055\114\030\115\071" +
    "\116\052\117\131\120\112\125\064\163\111\164\070\170" +
    "\154\171\015\173\053\174\161\175\027\176\141\177\040" +
    "\200\133\201\075\202\142\203\073\204\036\207\100\213" +
    "\203\221\160\224\105\225\117\226\060\227\102\001\002" +
    "\000\146\004\152\006\113\007\011\010\171\012\062\017" +
    "\134\034\110\045\246\057\156\060\031\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\106" +
    "\244\107\135\110\042\111\067\113\055\114\030\115\071" +
    "\116\052\117\131\120\112\125\064\163\111\164\070\170" +
    "\154\171\015\173\053\174\161\175\027\176\141\177\040" +
    "\200\133\201\075\202\142\203\073\204\036\207\100\213" +
    "\203\221\160\224\105\225\117\226\060\227\102\001\002" +
    "\000\004\221\u0327\001\002\000\002\001\uffa0\000\004\221" +
    "\u0316\001\002\000\004\223\u0315\001\ufe53\000\014\012\062" +
    "\016\u0313\100\232\101\u0263\102\u0262\001\002\000\146\004" +
    "\152\006\113\007\011\010\171\012\062\017\134\034\110" +
    "\045\246\057\156\060\031\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\106\244\107\135" +
    "\110\042\111\067\113\055\114\030\115\071\116\052\117" +
    "\131\120\112\125\064\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\203\221\160" +
    "\224\105\225\117\226\060\227\102\001\002\000\002\001" +
    "\ufe90\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\004\103\u02f9\001\002\000\002\001\ufec4\000\004" +
    "\012\u02f0\001\ufede\000\002\001\ufe8f\000\004\221\u02e7\001" +
    "\002\000\002\001\ufec2\000\002\001\ufec1\000\004\010\u02d8" +
    "\001\002\000\002\001\ufe9f\000\004\221\u02d5\001\002\000" +
    "\020\010\171\012\062\106\u017f\111\u017b\113\055\213\203" +
    "\224\105\001\002\000\012\103\u012e\105\ufe91\205\u012f\221" +
    "\ufe9a\001\ufe8e\000\002\001\ufe52\000\150\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\143\u02d1\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\004\221\u02ce" +
    "\001\002\000\012\012\062\016\u02cc\101\u0263\102\u0262\001" +
    "\ufece\000\004\105\u02c8\001\002\000\002\001\ufe54\000\004" +
    "\062\u0251\001\002\000\146\004\152\006\113\007\011\010" +
    "\171\012\062\017\134\034\110\045\246\057\156\060\031" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\106\244\107\135\110\042\111\067\113\055" +
    "\114\030\115\071\116\052\117\131\120\112\125\064\163" +
    "\111\164\070\170\154\171\015\173\053\174\161\175\027" +
    "\176\141\177\040\200\133\201\075\202\142\203\073\204" +
    "\036\207\100\213\203\221\160\224\105\225\117\226\060" +
    "\227\102\001\002\000\002\001\uffda\000\002\001\ufefb\000" +
    "\006\010\171\113\055\001\002\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\006\012\062\224\u0138" +
    "\001\002\000\146\004\152\006\113\007\011\010\171\012" +
    "\062\017\134\034\110\045\246\057\156\060\031\070\157" +
    "\071\013\072\020\073\046\074\047\075\140\076\006\077" +
    "\035\106\244\107\135\110\042\111\067\113\055\114\030" +
    "\115\071\116\052\117\131\120\112\125\064\163\111\164" +
    "\070\170\154\171\015\173\053\174\161\175\027\176\141" +
    "\177\040\200\133\201\075\202\142\203\073\204\036\207" +
    "\100\213\203\221\160\224\105\225\117\226\060\227\102" +
    "\001\002\000\004\010\u02bd\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\002\001\ufeb4\000" +
    "\002\001\uffc8\000\020\010\171\012\062\106\u0122\111\u011b" +
    "\113\055\213\203\224\105\001\002\000\004\221\u02b2\001" +
    "\002\000\012\012\062\016\u0264\101\u0263\102\u0262\001\002" +
    "\000\010\010\171\111\334\113\055\001\ufff2\000\006\173" +
    "\u02a2\174\u02a3\001\002\000\004\103\u0139\001\ufe7f\000\004" +
    "\221\u028b\001\002\000\002\001\ufff7\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\002\001\ufec9\000" +
    "\004\150\251\001\uffb0\000\002\001\ufeb0\000\002\001\uffde" +
    "\000\012\012\062\016\u0264\101\u0263\102\u0262\001\002\000" +
    "\002\001\ufe88\000\004\010\u0225\001\002\000\006\121\u0220" +
    "\143\u0221\001\002\000\002\001\uffdc\000\224\003\123\004" +
    "\152\005\164\006\113\007\011\010\034\012\062\014\077" +
    "\017\134\020\021\021\127\022\124\023\045\025\033\027" +
    "\106\031\165\034\110\036\136\042\056\043\126\044\074" +
    "\045\246\047\144\050\041\052\162\053\242\054\012\056" +
    "\101\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\103\065\106\244\107" +
    "\135\110\042\111\067\112\025\113\055\114\030\115\071" +
    "\116\052\117\131\120\112\125\064\143\010\163\111\164" +
    "\070\170\154\171\015\173\053\174\161\175\027\176\141" +
    "\177\040\200\133\201\075\202\142\203\073\204\036\207" +
    "\100\213\043\221\160\224\105\225\117\226\060\227\102" +
    "\001\002\000\002\001\ufe89\000\150\004\152\006\113\007" +
    "\011\010\171\012\062\017\134\034\110\045\246\057\156" +
    "\060\031\070\157\071\013\072\020\073\046\074\047\075" +
    "\140\076\006\077\035\106\244\107\135\110\042\111\067" +
    "\113\055\114\030\115\071\116\052\117\131\120\112\125" +
    "\064\143\u0217\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\002\001\ufff6\000" +
    "\146\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\203" +
    "\221\160\224\105\225\117\226\060\227\102\001\002\000" +
    "\002\001\ufffe\000\146\004\152\006\113\007\011\010\171" +
    "\012\062\017\134\034\110\045\246\057\156\060\031\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\106\244\107\135\110\042\111\067\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\203\221\160\224\105\225\117\226\060\227" +
    "\102\001\002\000\002\001\ufec7\000\002\001\ufec0\000\004" +
    "\221\u01f5\001\002\000\002\001\uffb2\000\002\001\ufec6\000" +
    "\146\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\203" +
    "\221\160\224\105\225\117\226\060\227\102\001\002\000" +
    "\146\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\203" +
    "\221\160\224\105\225\117\226\060\227\102\001\002\000" +
    "\004\010\u01f0\001\002\000\150\004\152\006\113\007\011" +
    "\010\171\012\062\017\134\034\110\045\246\057\156\060" +
    "\031\070\157\071\013\072\020\073\046\074\047\075\140" +
    "\076\006\077\035\106\244\107\135\110\042\111\067\113" +
    "\055\114\030\115\071\116\052\117\131\120\112\125\064" +
    "\143\u01eb\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\002\001\ufea3\000\004" +
    "\105\u01e9\001\002\000\002\001\ufea4\000\004\111\u01e7\001" +
    "\uffff\000\002\001\uff9a\000\004\221\u01e2\001\ufed1\000\006" +
    "\105\ufedd\221\u0181\001\ufeb3\000\146\004\152\006\113\007" +
    "\011\010\171\012\062\017\134\034\110\045\246\057\156" +
    "\060\031\070\157\071\013\072\020\073\046\074\047\075" +
    "\140\076\006\077\035\106\244\107\135\110\042\111\067" +
    "\113\055\114\030\115\071\116\052\117\131\120\112\125" +
    "\064\163\111\164\070\170\154\171\015\173\053\174\161" +
    "\175\027\176\141\177\040\200\133\201\075\202\142\203" +
    "\073\204\036\207\100\213\203\221\160\224\105\225\117" +
    "\226\060\227\102\001\002\000\002\001\ufff8\000\004\221" +
    "\u01db\001\002\000\004\221\u01ce\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\020\010\171" +
    "\012\062\106\u017f\111\u017b\113\055\213\203\224\105\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\002\001\ufffc\000\004\221\u01ac\001\002\000\004" +
    "\221\166\001\002\000\006\010\171\113\055\001\002\000" +
    "\006\121\236\222\235\001\002\000\004\126\172\001\002" +
    "\000\002\001\ufe53\000\050\006\113\007\011\010\171\017" +
    "\134\071\200\072\020\073\046\074\047\075\140\076\006" +
    "\077\173\106\205\107\135\110\042\111\177\113\055\163" +
    "\204\164\175\213\203\001\002\000\006\016\233\100\232" +
    "\001\002\000\002\001\ufebd\000\050\006\113\007\011\010" +
    "\171\017\134\071\200\072\020\073\046\074\047\075\140" +
    "\076\006\077\173\106\205\107\135\110\042\111\177\113" +
    "\055\163\204\164\175\213\203\001\002\000\002\001\ufeb6" +
    "\000\006\010\171\113\055\001\002\000\004\221\214\001" +
    "\002\000\004\105\212\001\002\000\002\001\uff87\000\002" +
    "\001\ufede\000\050\006\113\007\011\010\171\017\134\071" +
    "\200\072\020\073\046\074\047\075\140\076\006\077\173" +
    "\106\205\107\135\110\042\111\177\113\055\163\204\164" +
    "\175\213\203\001\002\000\004\111\207\001\002\000\004" +
    "\105\ufedd\001\ufebc\000\006\010\171\113\055\001\002\000" +
    "\004\105\ufedc\001\ufebb\000\002\001\ufeb9\000\004\010\213" +
    "\001\002\000\002\001\ufeb5\000\050\006\113\007\011\010" +
    "\171\017\134\071\200\072\020\073\046\074\047\075\140" +
    "\076\006\077\173\106\205\107\135\110\042\111\177\113" +
    "\055\163\204\164\175\213\203\001\ufeac\000\004\222\227" +
    "\001\002\000\004\121\222\001\ufeaa\000\004\067\220\001" +
    "\ufea5\000\050\006\113\007\011\010\171\017\134\071\200" +
    "\072\020\073\046\074\047\075\140\076\006\077\173\106" +
    "\205\107\135\110\042\111\177\113\055\163\204\164\175" +
    "\213\203\001\002\000\002\001\ufea6\000\050\006\113\007" +
    "\011\010\171\017\134\071\200\072\020\073\046\074\047" +
    "\075\140\076\006\077\173\106\205\107\135\110\042\111" +
    "\177\113\055\163\204\164\175\213\203\001\ufea9\000\002" +
    "\001\ufeab\000\004\067\225\001\ufea7\000\050\006\113\007" +
    "\011\010\171\017\134\071\200\072\020\073\046\074\047" +
    "\075\140\076\006\077\173\106\205\107\135\110\042\111" +
    "\177\113\055\163\204\164\175\213\203\001\002\000\002" +
    "\001\ufea8\000\002\001\ufeb7\000\004\105\ufedb\001\ufeba\000" +
    "\002\001\ufeb8\000\002\001\ufebe\000\004\100\234\001\002" +
    "\000\002\001\ufebf\000\226\003\123\004\152\005\164\006" +
    "\113\007\011\010\034\012\062\014\077\017\134\020\021" +
    "\021\127\022\124\023\045\025\033\027\106\031\165\034" +
    "\110\036\136\042\056\043\126\044\074\045\246\047\144" +
    "\050\041\052\162\053\242\054\012\056\101\057\156\060" +
    "\031\070\157\071\013\072\020\073\046\074\047\075\140" +
    "\076\006\077\035\103\065\106\244\107\135\110\042\111" +
    "\067\112\025\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\143\010\163\111\164\070\170\154\171" +
    "\015\173\053\174\161\175\027\176\141\177\040\200\133" +
    "\201\075\202\142\203\073\204\036\207\100\213\043\221" +
    "\160\223\245\224\105\225\117\226\060\227\102\001\002" +
    "\000\006\010\171\113\055\001\002\000\004\126\240\001" +
    "\002\000\050\006\113\007\011\010\171\017\134\071\200" +
    "\072\020\073\046\074\047\075\140\076\006\077\173\106" +
    "\205\107\135\110\042\111\177\113\055\163\204\164\175" +
    "\213\203\001\002\000\002\001\uff86\000\006\017\u01a8\221" +
    "\u01a6\001\002\000\002\001\uffc2\000\004\111\334\001\002" +
    "\000\002\001\uffe3\000\004\150\251\001\uffb0\000\002\001" +
    "\uff89\000\004\221\252\001\002\000\002\001\uffaf\000\020" +
    "\003\261\010\171\071\253\106\257\111\263\113\055\222" +
    "\uff71\001\uff68\000\002\001\uff66\000\002\001\ufeda\000\006" +
    "\012\323\150\322\001\002\000\004\121\320\001\uff72\000" +
    "\004\111\316\001\002\000\002\001\uff67\000\002\001\uff69" +
    "\000\002\001\uff70\000\006\010\171\113\055\001\002\000" +
    "\004\222\265\001\002\000\004\053\266\001\ufeec\000\004" +
    "\221\303\001\002\000\004\103\270\001\002\000\002\001" +
    "\uffe3\000\240\003\123\004\152\005\164\006\113\007\011" +
    "\010\034\012\062\014\077\017\134\020\021\021\127\022" +
    "\124\023\045\025\033\027\106\031\165\034\110\036\136" +
    "\042\056\043\126\044\074\045\114\047\144\050\041\052" +
    "\162\053\242\054\012\056\101\057\156\060\031\061\273" +
    "\062\032\063\151\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\103\065\104\275\106\244" +
    "\107\135\110\042\111\067\112\025\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\143\010\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\043\214\063\215\017\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\002\001\uffe4\000\004" +
    "\221\300\001\002\000\002\001\uffe1\000\002\001\ufeed\000" +
    "\002\001\uffe0\000\002\001\uffe2\000\004\222\301\001\002" +
    "\000\004\143\302\001\002\000\002\001\uffdf\000\006\012" +
    "\306\150\304\001\002\000\004\012\314\001\002\000\006" +
    "\121\310\222\307\001\002\000\002\001\ufee8\000\002\001" +
    "\ufeeb\000\006\012\312\150\311\001\002\000\004\012\313" +
    "\001\002\000\002\001\ufeea\000\002\001\ufee9\000\002\001" +
    "\ufee7\000\002\001\ufed8\000\006\010\171\113\055\001\002" +
    "\000\002\001\ufed9\000\022\003\261\010\171\071\253\106" +
    "\257\111\263\113\055\121\uff6e\222\uff6e\001\uff68\000\002" +
    "\001\uff6f\000\004\012\326\001\002\000\004\126\324\001" +
    "\uff6d\000\050\006\113\007\011\010\171\017\134\071\200" +
    "\072\020\073\046\074\047\075\140\076\006\077\173\106" +
    "\205\107\135\110\042\111\177\113\055\163\204\164\175" +
    "\213\203\001\002\000\002\001\uff6b\000\004\126\327\001" +
    "\uff6c\000\050\006\113\007\011\010\171\017\134\071\200" +
    "\072\020\073\046\074\047\075\140\076\006\077\173\106" +
    "\205\107\135\110\042\111\177\113\055\163\204\164\175" +
    "\213\203\001\002\000\002\001\uff6a\000\240\003\123\004" +
    "\152\005\164\006\113\007\011\010\034\012\062\014\077" +
    "\017\134\020\021\021\127\022\124\023\045\025\033\027" +
    "\106\031\165\032\332\034\110\036\136\042\056\043\126" +
    "\044\074\045\114\047\144\050\041\052\162\053\242\054" +
    "\012\056\101\057\156\060\031\061\273\062\032\063\151" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\103\065\106\244\107\135\110\042\111\067" +
    "\112\025\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\143\010\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\043\214\063" +
    "\215\017\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\004\143\333\001\002\000\002\001\uff88\000\006" +
    "\010\171\113\055\001\002\000\006\105\ufedc\221\336\001" +
    "\ufeb2\000\150\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\150\340\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\203\221\160\224\105\225\117\226\060\227" +
    "\102\001\uff64\000\004\222\u01a5\001\002\000\020\010\171" +
    "\012\062\106\u017f\111\u017b\113\055\213\203\224\105\001" +
    "\002\000\066\033\u0108\122\u0100\123\u010f\124\372\142\375" +
    "\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152" +
    "\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c" +
    "\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\002\000\044\066\364\121\uff62\126\352" +
    "\127\355\130\353\131\363\132\356\133\365\134\360\135" +
    "\362\136\354\137\351\140\357\141\361\173\ufea0\174\ufea0" +
    "\222\uff62\001\ufea2\000\004\121\345\001\uff65\000\006\121" +
    "\uff63\222\uff63\001\ufea3\000\150\004\152\006\113\007\011" +
    "\010\171\012\062\017\134\034\110\045\246\057\156\060" +
    "\031\070\157\071\013\072\020\073\046\074\047\075\140" +
    "\076\006\077\035\106\244\107\135\110\042\111\067\113" +
    "\055\114\030\115\071\116\052\117\131\120\112\125\064" +
    "\150\346\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\020\010\171\012\062" +
    "\106\u017f\111\u017b\113\055\213\203\224\105\001\002\000" +
    "\044\066\364\121\uff5f\126\352\127\355\130\353\131\363" +
    "\132\356\133\365\134\360\135\362\136\354\137\351\140" +
    "\357\141\361\173\ufea0\174\ufea0\222\uff5f\001\ufea2\000\006" +
    "\121\uff60\222\uff60\001\ufea3\000\146\004\152\006\113\007" +
    "\011\010\171\012\062\017\134\034\110\045\246\057\156" +
    "\060\031\070\157\071\013\072\020\073\046\074\047\075" +
    "\140\076\006\077\035\106\244\107\135\110\042\111\067" +
    "\113\055\114\030\115\071\116\052\117\131\120\112\125" +
    "\064\163\111\164\070\170\154\171\015\173\053\174\161" +
    "\175\027\176\141\177\040\200\133\201\075\202\142\203" +
    "\073\204\036\207\100\213\203\221\160\224\105\225\117" +
    "\226\060\227\102\001\002\000\150\004\152\006\113\007" +
    "\011\010\171\012\062\017\134\034\110\045\246\057\156" +
    "\060\031\070\157\071\013\072\020\073\046\074\047\075" +
    "\140\076\006\077\035\106\244\107\135\110\042\111\067" +
    "\113\055\114\030\115\071\116\052\117\131\120\112\125" +
    "\064\150\u0178\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\014\010\171\012" +
    "\062\103\u012c\113\055\224\105\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\060\033\u0108" +
    "\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151" +
    "\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376" +
    "\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166" +
    "\u0105\167\370\172\374\001\uff26\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\150\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\223\u015d\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\146\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\203\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\020\010\171" +
    "\012\062\106\u0122\111\u011b\113\055\213\203\224\105\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\012\033\u0108\165\u0106\166\u0105\167\370\001\uff12" +
    "\000\062\033\u0108\124\372\142\375\144\371\145\u0109\146" +
    "\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101" +
    "\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163" +
    "\u0110\164\377\165\u0106\166\u0105\167\370\172\374\001\uff17" +
    "\000\034\033\u0108\155\u010d\156\u010b\157\376\160\u010c\161" +
    "\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370" +
    "\172\374\001\uff05\000\024\033\u0108\161\u0107\162\u0103\163" +
    "\u0110\164\377\165\u0106\166\u0105\167\370\172\374\001\uff02" +
    "\000\024\033\u0108\161\u0107\162\u0103\163\u0110\164\377\165" +
    "\u0106\166\u0105\167\370\172\374\001\uff01\000\024\033\u0108" +
    "\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\uff00\000\044\033\u0108\151\u010e\152\u0104" +
    "\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161" +
    "\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370" +
    "\172\374\001\uff15\000\052\033\u0108\146\373\147\u0102\150" +
    "\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b" +
    "\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165" +
    "\u0106\166\u0105\167\370\172\374\001\uff1a\000\002\001\ufed6" +
    "\000\004\105\u0150\001\002\000\006\010\171\113\055\001" +
    "\002\000\010\103\u012e\105\ufe91\205\u012f\001\ufe8e\000\004" +
    "\105\u0143\001\ufed7\000\002\001\ufeff\000\002\001\ufed4\000" +
    "\006\012\062\224\u0138\001\002\000\004\066\u0126\001\ufed5" +
    "\000\004\111\u0124\001\002\000\002\001\ufedd\000\006\010" +
    "\171\113\055\001\002\000\002\001\ufedc\000\014\010\171" +
    "\012\062\103\u012c\113\055\224\105\001\002\000\002\001" +
    "\ufe81\000\002\001\ufe82\000\002\001\ufed3\000\006\103\u013c" +
    "\205\u013d\001\ufed2\000\006\012\062\224\u0138\001\002\000" +
    "\146\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\203" +
    "\221\160\224\105\225\117\226\060\227\102\001\002\000" +
    "\006\103\u012e\205\u012f\001\ufe9a\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\ufe86\000\066\033\u0108\122\u0100" +
    "\123\u010f\124\372\142\375\144\371\145\u0109\146\373\147" +
    "\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d" +
    "\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164" +
    "\377\165\u0106\166\u0105\167\370\172\374\001\ufe85\000\004" +
    "\206\u0132\001\002\000\002\001\ufe8b\000\070\033\u0108\104" +
    "\u0134\122\u0100\123\u010f\124\372\142\375\144\371\145\u0109" +
    "\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154" +
    "\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103" +
    "\163\u0110\164\377\165\u0106\166\u0105\167\370\172\374\001" +
    "\002\000\002\001\ufe8a\000\070\033\u0108\104\u0136\122\u0100" +
    "\123\u010f\124\372\142\375\144\371\145\u0109\146\373\147" +
    "\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d" +
    "\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164" +
    "\377\165\u0106\166\u0105\167\370\172\374\001\002\000\002" +
    "\001\ufe80\000\006\103\u012e\205\u012f\001\ufe99\000\004\103" +
    "\u0139\001\ufe7e\000\146\004\152\006\113\007\011\010\171" +
    "\012\062\017\134\034\110\045\246\057\156\060\031\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\106\244\107\135\110\042\111\067\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\203\221\160\224\105\225\117\226\060\227" +
    "\102\001\002\000\070\033\u0108\104\u013b\122\u0100\123\u010f" +
    "\124\372\142\375\144\371\145\u0109\146\373\147\u0102\150" +
    "\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b" +
    "\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165" +
    "\u0106\166\u0105\167\370\172\374\001\002\000\002\001\ufe87" +
    "\000\146\004\152\006\113\007\011\010\171\012\062\017" +
    "\134\034\110\045\246\057\156\060\031\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\106" +
    "\244\107\135\110\042\111\067\113\055\114\030\115\071" +
    "\116\052\117\131\120\112\125\064\163\111\164\070\170" +
    "\154\171\015\173\053\174\161\175\027\176\141\177\040" +
    "\200\133\201\075\202\142\203\073\204\036\207\100\213" +
    "\203\221\160\224\105\225\117\226\060\227\102\001\002" +
    "\000\146\004\152\006\113\007\011\010\171\012\062\017" +
    "\134\034\110\045\246\057\156\060\031\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\106" +
    "\244\107\135\110\042\111\067\113\055\114\030\115\071" +
    "\116\052\117\131\120\112\125\064\163\111\164\070\170" +
    "\154\171\015\173\053\174\161\175\027\176\141\177\040" +
    "\200\133\201\075\202\142\203\073\204\036\207\100\213" +
    "\203\221\160\224\105\225\117\226\060\227\102\001\ufe86" +
    "\000\004\206\u013f\001\002\000\002\001\ufe84\000\070\033" +
    "\u0108\104\u0141\122\u0100\123\u010f\124\372\142\375\144\371" +
    "\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153" +
    "\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107" +
    "\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370\172" +
    "\374\001\002\000\002\001\ufe83\000\006\103\u012e\205\u012f" +
    "\001\ufe8d\000\006\012\062\224\105\001\002\000\006\103" +
    "\u0149\205\u014a\001\ufe98\000\006\012\062\224\u0138\001\002" +
    "\000\002\001\ufe93\000\002\001\ufe94\000\006\103\u0149\205" +
    "\u014a\001\ufe97\000\146\004\152\006\113\007\011\010\171" +
    "\012\062\017\134\034\110\045\246\057\156\060\031\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\106\244\107\135\110\042\111\067\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\203\221\160\224\105\225\117\226\060\227" +
    "\102\001\002\000\146\004\152\006\113\007\011\010\171" +
    "\012\062\017\134\034\110\045\246\057\156\060\031\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\106\244\107\135\110\042\111\067\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\203\221\160\224\105\225\117\226\060\227" +
    "\102\001\ufe86\000\004\206\u014c\001\002\000\002\001\ufe96" +
    "\000\070\033\u0108\104\u014e\122\u0100\123\u010f\124\372\142" +
    "\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e" +
    "\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160" +
    "\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105" +
    "\167\370\172\374\001\002\000\002\001\ufe95\000\002\001" +
    "\ufedb\000\006\012\062\224\105\001\002\000\002\001\ufe92" +
    "\000\020\033\u0108\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\uff0d\000\004\033\u0108\001\uff10\000\004" +
    "\033\u0108\001\uff0f\000\034\033\u0108\155\u010d\156\u010b\157" +
    "\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106" +
    "\166\u0105\167\370\172\374\001\uff04\000\020\033\u0108\163" +
    "\u0110\164\377\165\u0106\166\u0105\167\370\172\374\001\uff0c" +
    "\000\046\033\u0108\150\u010a\151\u010e\152\u0104\153\367\154" +
    "\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103" +
    "\163\u0110\164\377\165\u0106\166\u0105\167\370\172\374\001" +
    "\uff14\000\034\033\u0108\155\u010d\156\u010b\157\376\160\u010c" +
    "\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\uff06\000\064\033\u0108\123\u010f\124\372" +
    "\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151" +
    "\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376" +
    "\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166" +
    "\u0105\167\370\172\374\001\uff19\000\012\033\u0108\165\u0106" +
    "\166\u0105\167\370\001\uff11\000\024\033\u0108\161\u0107\162" +
    "\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370\172\374" +
    "\001\uff03\000\070\033\u0108\122\u0100\123\u010f\124\372\142" +
    "\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e" +
    "\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160" +
    "\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105" +
    "\167\370\172\374\223\u015f\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\066\033\u0108\122" +
    "\u0100\123\u010f\124\372\142\375\144\371\145\u0109\146\373" +
    "\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155" +
    "\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110" +
    "\164\377\165\u0106\166\u0105\167\370\172\374\001\ufefc\000" +
    "\146\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\203" +
    "\221\160\224\105\225\117\226\060\227\102\001\002\000" +
    "\066\033\u0108\122\u0100\123\u010f\124\372\142\375\144\371" +
    "\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153" +
    "\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107" +
    "\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370\172" +
    "\374\001\ufefd\000\012\033\u0108\165\u0106\166\u0105\167\370" +
    "\001\uff13\000\050\033\u0108\147\u0102\150\u010a\151\u010e\152" +
    "\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c" +
    "\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\uff16\000\060\033\u0108\142\375\144\371" +
    "\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153" +
    "\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107" +
    "\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370\172" +
    "\374\001\uff18\000\054\033\u0108\145\u0109\146\373\147\u0102" +
    "\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156" +
    "\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377" +
    "\165\u0106\166\u0105\167\370\172\374\001\uff1b\000\004\033" +
    "\u0108\001\uff0e\000\034\033\u0108\155\u010d\156\u010b\157\376" +
    "\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166" +
    "\u0105\167\370\172\374\001\uff07\000\004\221\u016c\001\ufe9e" +
    "\000\010\103\u013c\205\u013d\221\u0169\001\ufe9d\000\150\004" +
    "\152\006\113\007\011\010\171\012\062\017\134\034\110" +
    "\045\246\057\156\060\031\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\106\244\107\135" +
    "\110\042\111\067\113\055\114\030\115\071\116\052\117" +
    "\131\120\112\125\064\150\340\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\203" +
    "\221\160\224\105\225\117\226\060\227\102\001\uff64\000" +
    "\004\222\u016b\001\002\000\002\001\ufe9b\000\150\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\150\340\163\111\164\070\170\154\171" +
    "\015\173\053\174\161\175\027\176\141\177\040\200\133" +
    "\201\075\202\142\203\073\204\036\207\100\213\203\221" +
    "\160\224\105\225\117\226\060\227\102\001\uff64\000\004" +
    "\222\u016e\001\002\000\002\001\ufe9c\000\060\033\u0108\142" +
    "\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e" +
    "\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160" +
    "\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105" +
    "\167\370\172\374\001\uff28\000\060\033\u0108\142\375\144" +
    "\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104" +
    "\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161" +
    "\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370" +
    "\172\374\001\uff24\000\060\033\u0108\142\375\144\371\145" +
    "\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367" +
    "\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162" +
    "\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370\172\374" +
    "\001\uff20\000\060\033\u0108\142\375\144\371\145\u0109\146" +
    "\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101" +
    "\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163" +
    "\u0110\164\377\165\u0106\166\u0105\167\370\172\374\001\uff25" +
    "\000\060\033\u0108\142\375\144\371\145\u0109\146\373\147" +
    "\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d" +
    "\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164" +
    "\377\165\u0106\166\u0105\167\370\172\374\001\uff21\000\060" +
    "\033\u0108\142\375\144\371\145\u0109\146\373\147\u0102\150" +
    "\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b" +
    "\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165" +
    "\u0106\166\u0105\167\370\172\374\001\uff27\000\060\033\u0108" +
    "\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151" +
    "\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376" +
    "\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166" +
    "\u0105\167\370\172\374\001\uff2a\000\060\033\u0108\142\375" +
    "\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152" +
    "\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c" +
    "\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\uff23\000\060\033\u0108\142\375\144\371" +
    "\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153" +
    "\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107" +
    "\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370\172" +
    "\374\001\uff29\000\022\010\171\012\062\106\u017f\111\u017b" +
    "\113\055\207\u017e\213\203\224\105\001\002\000\060\033" +
    "\u0108\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a" +
    "\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157" +
    "\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106" +
    "\166\u0105\167\370\172\374\001\uff2f\000\004\105\u0198\001" +
    "\002\000\006\010\171\113\055\001\002\000\004\105\u018b" +
    "\001\002\000\004\066\364\001\uff2e\000\020\010\171\012" +
    "\062\106\u0122\111\u011b\113\055\213\203\224\105\001\002" +
    "\000\004\111\u0184\001\002\000\004\221\u0181\001\ufedd\000" +
    "\150\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\150\340\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\uff64\000\004\222\u0183\001\002\000\002\001\ufee6\000\006" +
    "\010\171\113\055\001\002\000\004\221\336\001\ufedc\000" +
    "\004\221\u0188\001\ufecb\000\002\001\uff2d\000\150\004\152" +
    "\006\113\007\011\010\171\012\062\017\134\034\110\045" +
    "\246\057\156\060\031\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\106\244\107\135\110" +
    "\042\111\067\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\150\340\163\111\164\070\170\154\171" +
    "\015\173\053\174\161\175\027\176\141\177\040\200\133" +
    "\201\075\202\142\203\073\204\036\207\100\213\203\221" +
    "\160\224\105\225\117\226\060\227\102\001\uff64\000\004" +
    "\222\u018a\001\002\000\002\001\ufeca\000\010\010\u018d\012" +
    "\062\224\105\001\002\000\004\221\u0191\001\ufe93\000\004" +
    "\221\u018e\001\002\000\150\004\152\006\113\007\011\010" +
    "\171\012\062\017\134\034\110\045\246\057\156\060\031" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\106\244\107\135\110\042\111\067\113\055" +
    "\114\030\115\071\116\052\117\131\120\112\125\064\150" +
    "\340\163\111\164\070\170\154\171\015\173\053\174\161" +
    "\175\027\176\141\177\040\200\133\201\075\202\142\203" +
    "\073\204\036\207\100\213\203\221\160\224\105\225\117" +
    "\226\060\227\102\001\uff64\000\004\222\u0190\001\002\000" +
    "\002\001\ufee3\000\150\004\152\006\113\007\011\010\171" +
    "\012\062\017\134\034\110\045\246\057\156\060\031\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\106\244\107\135\110\042\111\067\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\150\340" +
    "\163\111\164\070\170\154\171\015\173\053\174\161\175" +
    "\027\176\141\177\040\200\133\201\075\202\142\203\073" +
    "\204\036\207\100\213\203\221\160\224\105\225\117\226" +
    "\060\227\102\001\uff64\000\004\222\u0193\001\002\000\002" +
    "\001\ufee2\000\004\221\u0195\001\ufedb\000\150\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\150\340\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\203\221\160" +
    "\224\105\225\117\226\060\227\102\001\uff64\000\004\222" +
    "\u0197\001\002\000\002\001\ufee4\000\010\010\u019a\012\062" +
    "\224\105\001\002\000\004\221\u019e\001\ufe92\000\004\221" +
    "\u019b\001\002\000\150\004\152\006\113\007\011\010\171" +
    "\012\062\017\134\034\110\045\246\057\156\060\031\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\106\244\107\135\110\042\111\067\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\150\340" +
    "\163\111\164\070\170\154\171\015\173\053\174\161\175" +
    "\027\176\141\177\040\200\133\201\075\202\142\203\073" +
    "\204\036\207\100\213\203\221\160\224\105\225\117\226" +
    "\060\227\102\001\uff64\000\004\222\u019d\001\002\000\002" +
    "\001\ufee0\000\150\004\152\006\113\007\011\010\171\012" +
    "\062\017\134\034\110\045\246\057\156\060\031\070\157" +
    "\071\013\072\020\073\046\074\047\075\140\076\006\077" +
    "\035\106\244\107\135\110\042\111\067\113\055\114\030" +
    "\115\071\116\052\117\131\120\112\125\064\150\340\163" +
    "\111\164\070\170\154\171\015\173\053\174\161\175\027" +
    "\176\141\177\040\200\133\201\075\202\142\203\073\204" +
    "\036\207\100\213\203\221\160\224\105\225\117\226\060" +
    "\227\102\001\uff64\000\004\222\u01a0\001\002\000\002\001" +
    "\ufee1\000\060\033\u0108\142\375\144\371\145\u0109\146\373" +
    "\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155" +
    "\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110" +
    "\164\377\165\u0106\166\u0105\167\370\172\374\001\uff22\000" +
    "\002\001\uff5e\000\004\066\364\001\ufea1\000\002\001\uff61" +
    "\000\002\001\ufee5\000\004\017\u01aa\001\002\000\004\143" +
    "\u01a9\001\002\000\002\001\uffb4\000\002\001\uffc6\000\004" +
    "\222\u01ab\001\002\000\002\001\uffb3\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\070\033\u0108\122" +
    "\u0100\123\u010f\124\372\142\375\144\371\145\u0109\146\373" +
    "\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155" +
    "\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110" +
    "\164\377\165\u0106\166\u0105\167\370\172\374\222\u01ae\001" +
    "\002\000\226\003\123\004\152\005\164\006\113\007\011" +
    "\010\034\012\062\014\077\017\134\020\021\021\127\022" +
    "\124\023\045\025\033\027\106\031\165\034\110\036\136" +
    "\042\056\043\126\044\074\045\246\047\144\050\041\052" +
    "\162\053\242\054\012\056\101\057\156\060\031\070\157" +
    "\071\013\072\020\073\046\074\047\075\140\076\006\077" +
    "\035\103\065\106\244\107\135\110\042\111\067\112\025" +
    "\113\055\114\030\115\071\116\052\117\131\120\112\125" +
    "\064\143\010\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\043\221\160\223\u01af" +
    "\224\105\225\117\226\060\227\102\001\002\000\002\001" +
    "\uffe3\000\002\001\uff7a\000\006\211\u01b4\212\u01b3\001\uff76" +
    "\000\002\001\uffd8\000\224\003\123\004\152\005\164\006" +
    "\113\007\011\010\034\012\062\014\077\017\134\020\021" +
    "\021\127\022\124\023\045\025\033\027\106\031\165\034" +
    "\110\036\136\042\056\043\126\044\074\045\246\047\144" +
    "\050\041\052\162\053\242\054\012\056\101\057\156\060" +
    "\031\070\157\071\013\072\020\073\046\074\047\075\140" +
    "\076\006\077\035\103\065\106\244\107\135\110\042\111" +
    "\067\112\025\113\055\114\030\115\071\116\052\117\131" +
    "\120\112\125\064\143\010\163\111\164\070\170\154\171" +
    "\015\173\053\174\161\175\027\176\141\177\040\200\133" +
    "\201\075\202\142\203\073\204\036\207\100\213\043\221" +
    "\160\224\105\225\117\226\060\227\102\001\002\000\004" +
    "\221\u01b5\001\002\000\146\004\152\006\113\007\011\010" +
    "\171\012\062\017\134\034\110\045\246\057\156\060\031" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\106\244\107\135\110\042\111\067\113\055" +
    "\114\030\115\071\116\052\117\131\120\112\125\064\163" +
    "\111\164\070\170\154\171\015\173\053\174\161\175\027" +
    "\176\141\177\040\200\133\201\075\202\142\203\073\204" +
    "\036\207\100\213\203\221\160\224\105\225\117\226\060" +
    "\227\102\001\002\000\070\033\u0108\122\u0100\123\u010f\124" +
    "\372\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a" +
    "\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157" +
    "\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106" +
    "\166\u0105\167\370\172\374\222\u01b7\001\002\000\224\003" +
    "\123\004\152\005\164\006\113\007\011\010\034\012\062" +
    "\014\077\017\134\020\021\021\127\022\124\023\045\025" +
    "\033\027\106\031\165\034\110\036\136\042\056\043\126" +
    "\044\074\045\246\047\144\050\041\052\162\053\242\054" +
    "\012\056\101\057\156\060\031\070\157\071\013\072\020" +
    "\073\046\074\047\075\140\076\006\077\035\103\065\106" +
    "\244\107\135\110\042\111\067\112\025\113\055\114\030" +
    "\115\071\116\052\117\131\120\112\125\064\143\010\163" +
    "\111\164\070\170\154\171\015\173\053\174\161\175\027" +
    "\176\141\177\040\200\133\201\075\202\142\203\073\204" +
    "\036\207\100\213\043\221\160\224\105\225\117\226\060" +
    "\227\102\001\002\000\002\001\uff79\000\002\001\uff75\000" +
    "\236\003\123\004\152\005\164\006\113\007\011\010\034" +
    "\012\062\014\077\017\134\020\021\021\127\022\124\023" +
    "\045\025\033\027\106\031\165\034\110\036\136\042\056" +
    "\043\126\044\074\045\114\047\144\050\041\052\162\053" +
    "\242\054\012\056\101\057\156\060\031\061\273\062\032" +
    "\063\151\070\157\071\013\072\020\073\046\074\047\075" +
    "\140\076\006\077\035\103\065\106\244\107\135\110\042" +
    "\111\067\112\025\113\055\114\030\115\071\116\052\117" +
    "\131\120\112\125\064\143\010\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\043" +
    "\214\063\215\017\221\160\224\105\225\117\226\060\227" +
    "\102\001\uff78\000\006\211\u01be\212\u01bd\001\uff74\000\004" +
    "\210\u01c6\001\002\000\004\223\u01c4\001\002\000\004\221" +
    "\u01bf\001\002\000\146\004\152\006\113\007\011\010\171" +
    "\012\062\017\134\034\110\045\246\057\156\060\031\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\106\244\107\135\110\042\111\067\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\203\221\160\224\105\225\117\226\060\227" +
    "\102\001\002\000\070\033\u0108\122\u0100\123\u010f\124\372" +
    "\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151" +
    "\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376" +
    "\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166" +
    "\u0105\167\370\172\374\222\u01c1\001\002\000\004\223\u01c2" +
    "\001\002\000\002\001\uffe3\000\236\003\123\004\152\005" +
    "\164\006\113\007\011\010\034\012\062\014\077\017\134" +
    "\020\021\021\127\022\124\023\045\025\033\027\106\031" +
    "\165\034\110\036\136\042\056\043\126\044\074\045\114" +
    "\047\144\050\041\052\162\053\242\054\012\056\101\057" +
    "\156\060\031\061\273\062\032\063\151\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\103" +
    "\065\106\244\107\135\110\042\111\067\112\025\113\055" +
    "\114\030\115\071\116\052\117\131\120\112\125\064\143" +
    "\010\163\111\164\070\170\154\171\015\173\053\174\161" +
    "\175\027\176\141\177\040\200\133\201\075\202\142\203" +
    "\073\204\036\207\100\213\043\214\063\215\017\221\160" +
    "\224\105\225\117\226\060\227\102\001\uff77\000\002\001" +
    "\uffe3\000\236\003\123\004\152\005\164\006\113\007\011" +
    "\010\034\012\062\014\077\017\134\020\021\021\127\022" +
    "\124\023\045\025\033\027\106\031\165\034\110\036\136" +
    "\042\056\043\126\044\074\045\114\047\144\050\041\052" +
    "\162\053\242\054\012\056\101\057\156\060\031\061\273" +
    "\062\032\063\151\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\103\065\106\244\107\135" +
    "\110\042\111\067\112\025\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\143\010\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\043\214\063\215\017\221\160\224\105\225\117\226" +
    "\060\227\102\001\uff73\000\004\143\u01c7\001\002\000\002" +
    "\001\uffd7\000\070\033\u0108\122\u0100\123\u010f\124\372\142" +
    "\375\143\u01c9\144\371\145\u0109\146\373\147\u0102\150\u010a" +
    "\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157" +
    "\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106" +
    "\166\u0105\167\370\172\374\001\002\000\002\001\uffbf\000" +
    "\002\001\uff1c\000\004\066\364\001\ufea0\000\070\033\u0108" +
    "\122\u0100\123\u010f\124\372\142\375\144\371\145\u0109\146" +
    "\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101" +
    "\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163" +
    "\u0110\164\377\165\u0106\166\u0105\167\370\172\374\222\u01cd" +
    "\001\002\000\002\001\ufefe\000\022\010\171\012\062\070" +
    "\u01d2\106\u017f\111\u017b\113\055\213\203\224\105\001\ufe79" +
    "\000\006\121\u01d6\222\u01d8\001\002\000\002\001\ufe7c\000" +
    "\004\066\364\001\ufe7b\000\004\221\u01d3\001\002\000\022" +
    "\010\171\012\062\070\u01d2\106\u017f\111\u017b\113\055\213" +
    "\203\224\105\001\ufe79\000\006\121\u01d6\222\u01d5\001\002" +
    "\000\002\001\ufe7a\000\022\010\171\012\062\070\u01d2\106" +
    "\u017f\111\u017b\113\055\213\203\224\105\001\ufe79\000\002" +
    "\001\ufe7d\000\004\126\u01d9\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\060\033\u0108\142" +
    "\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e" +
    "\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160" +
    "\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105" +
    "\167\370\172\374\001\uff30\000\020\010\171\012\062\106" +
    "\u017f\111\u017b\113\055\213\203\224\105\001\002\000\004" +
    "\066\364\001\ufe58\000\006\121\u01df\222\u01de\001\002\000" +
    "\002\001\ufe5f\000\020\010\171\012\062\106\u017f\111\u017b" +
    "\113\055\213\203\224\105\001\002\000\004\066\364\001" +
    "\ufe57\000\004\033\u0108\001\uff09\000\150\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\222\u01e5\224" +
    "\105\225\117\226\060\227\102\001\002\000\002\001\ufef3" +
    "\000\070\033\u0108\122\u0100\123\u010f\124\372\142\375\144" +
    "\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104" +
    "\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161" +
    "\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370" +
    "\172\374\222\u01e6\001\002\000\002\001\ufed0\000\002\001" +
    "\ufecf\000\006\010\171\113\055\001\002\000\002\001\ufffd" +
    "\000\010\010\u01ea\012\062\224\105\001\002\000\004\221" +
    "\u019b\001\ufe55\000\002\001\uffce\000\042\066\364\126\352" +
    "\127\355\130\353\131\363\132\356\133\365\134\360\135" +
    "\362\136\354\137\351\140\357\141\361\143\u01ef\173\ufea0" +
    "\174\ufea0\001\ufea2\000\004\143\u01ee\001\ufea3\000\002\001" +
    "\uffcd\000\002\001\uffcc\000\004\126\u01f1\001\002\000\050" +
    "\006\113\007\011\010\171\017\134\071\200\072\020\073" +
    "\046\074\047\075\140\076\006\077\173\106\205\107\135" +
    "\110\042\111\177\113\055\163\204\164\175\213\203\001" +
    "\002\000\002\001\uff37\000\002\001\ufef5\000\002\001\ufef9" +
    "\000\146\004\152\006\113\007\011\010\171\012\062\017" +
    "\134\034\110\045\246\057\156\060\031\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\106" +
    "\244\107\135\110\042\111\067\113\055\114\030\115\071" +
    "\116\052\117\131\120\112\125\064\163\111\164\070\170" +
    "\154\171\015\173\053\174\161\175\027\176\141\177\040" +
    "\200\133\201\075\202\142\203\073\204\036\207\100\213" +
    "\203\221\160\224\105\225\117\226\060\227\102\001\002" +
    "\000\070\033\u0108\122\u0100\123\u010f\124\372\142\375\144" +
    "\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104" +
    "\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161" +
    "\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370" +
    "\172\374\222\u01f7\001\002\000\006\103\u01f9\223\u01fa\001" +
    "\002\000\002\001\uffd3\000\004\143\u020c\001\uff81\000\004" +
    "\143\u01fc\001\uff81\000\010\037\u0209\040\u01ff\041\u0200\001" +
    "\002\000\002\001\uff81\000\010\037\u01fe\040\u01ff\041\u0200" +
    "\001\002\000\004\143\u0208\001\002\000\146\004\152\006" +
    "\113\007\011\010\171\012\062\017\134\034\110\045\246" +
    "\057\156\060\031\070\157\071\013\072\020\073\046\074" +
    "\047\075\140\076\006\077\035\106\244\107\135\110\042" +
    "\111\067\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\006\143\u0202\223" +
    "\u0203\001\002\000\002\001\uffe3\000\002\001\uff7d\000\002" +
    "\001\uff7e\000\236\003\123\004\152\005\164\006\113\007" +
    "\011\010\034\012\062\014\077\017\134\020\021\021\127" +
    "\022\124\023\045\025\033\027\106\031\165\034\110\036" +
    "\136\042\056\043\126\044\074\045\114\047\144\050\041" +
    "\052\162\053\242\054\012\056\101\057\156\060\031\061" +
    "\273\062\032\063\151\070\157\071\013\072\020\073\046" +
    "\074\047\075\140\076\006\077\035\103\065\106\244\107" +
    "\135\110\042\111\067\112\025\113\055\114\030\115\071" +
    "\116\052\117\131\120\112\125\064\143\010\163\111\164" +
    "\070\170\154\171\015\173\053\174\161\175\027\176\141" +
    "\177\040\200\133\201\075\202\142\203\073\204\036\207" +
    "\100\213\043\214\063\215\017\221\160\224\105\225\117" +
    "\226\060\227\102\001\uff7f\000\072\033\u0108\122\u0100\123" +
    "\u010f\124\372\142\375\143\u0202\144\371\145\u0109\146\373" +
    "\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155" +
    "\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110" +
    "\164\377\165\u0106\166\u0105\167\370\172\374\223\u0203\001" +
    "\002\000\002\001\uffe3\000\236\003\123\004\152\005\164" +
    "\006\113\007\011\010\034\012\062\014\077\017\134\020" +
    "\021\021\127\022\124\023\045\025\033\027\106\031\165" +
    "\034\110\036\136\042\056\043\126\044\074\045\114\047" +
    "\144\050\041\052\162\053\242\054\012\056\101\057\156" +
    "\060\031\061\273\062\032\063\151\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\103\065" +
    "\106\244\107\135\110\042\111\067\112\025\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\143\010" +
    "\163\111\164\070\170\154\171\015\173\053\174\161\175" +
    "\027\176\141\177\040\200\133\201\075\202\142\203\073" +
    "\204\036\207\100\213\043\214\063\215\017\221\160\224" +
    "\105\225\117\226\060\227\102\001\uff80\000\002\001\uff82" +
    "\000\004\143\u020a\001\002\000\002\001\uff83\000\010\040" +
    "\u01ff\041\u0200\104\u020f\001\002\000\002\001\uff81\000\010" +
    "\040\u01ff\041\u0200\104\u020e\001\002\000\002\001\uff84\000" +
    "\002\001\uff85\000\002\001\ufef7\000\066\033\u0108\122\u0100" +
    "\123\u010f\124\372\142\375\144\371\145\u0109\146\373\147" +
    "\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d" +
    "\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164" +
    "\377\165\u0106\166\u0105\167\370\172\374\001\ufe5a\000\066" +
    "\033\u0108\122\u0100\123\u010f\124\372\142\375\144\371\145" +
    "\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367" +
    "\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162" +
    "\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370\172\374" +
    "\001\uff35\000\006\121\u0214\143\u0215\001\002\000\146\004" +
    "\152\006\113\007\011\010\171\012\062\017\134\034\110" +
    "\045\246\057\156\060\031\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\106\244\107\135" +
    "\110\042\111\067\113\055\114\030\115\071\116\052\117" +
    "\131\120\112\125\064\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\203\221\160" +
    "\224\105\225\117\226\060\227\102\001\002\000\002\001" +
    "\uffc9\000\066\033\u0108\122\u0100\123\u010f\124\372\142\375" +
    "\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152" +
    "\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c" +
    "\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\uff36\000\002\001\uffd0\000\070\033\u0108" +
    "\122\u0100\123\u010f\124\372\142\375\143\u0219\144\371\145" +
    "\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367" +
    "\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162" +
    "\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370\172\374" +
    "\001\002\000\002\001\uffcf\000\004\023\u021b\001\002\000" +
    "\004\221\u021c\001\002\000\146\004\152\006\113\007\011" +
    "\010\171\012\062\017\134\034\110\045\246\057\156\060" +
    "\031\070\157\071\013\072\020\073\046\074\047\075\140" +
    "\076\006\077\035\106\244\107\135\110\042\111\067\113" +
    "\055\114\030\115\071\116\052\117\131\120\112\125\064" +
    "\163\111\164\070\170\154\171\015\173\053\174\161\175" +
    "\027\176\141\177\040\200\133\201\075\202\142\203\073" +
    "\204\036\207\100\213\203\221\160\224\105\225\117\226" +
    "\060\227\102\001\002\000\070\033\u0108\122\u0100\123\u010f" +
    "\124\372\142\375\144\371\145\u0109\146\373\147\u0102\150" +
    "\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b" +
    "\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165" +
    "\u0106\166\u0105\167\370\172\374\222\u021e\001\002\000\004" +
    "\143\u021f\001\002\000\002\001\uffd5\000\004\010\u0222\001" +
    "\002\000\002\001\uffef\000\004\126\u0223\001\002\000\050" +
    "\006\113\007\011\010\171\017\134\071\200\072\020\073" +
    "\046\074\047\075\140\076\006\077\173\106\205\107\135" +
    "\110\042\111\177\113\055\163\204\164\175\213\203\001" +
    "\002\000\002\001\uff38\000\004\064\u0227\001\uff99\000\002" +
    "\001\uffa6\000\014\003\u022a\010\171\106\257\111\263\113" +
    "\055\001\002\000\004\121\u022b\001\uff98\000\002\001\uff95" +
    "\000\002\001\uff92\000\014\003\u022d\010\171\106\257\111" +
    "\263\113\055\001\002\000\002\001\uff94\000\002\001\uff93" +
    "\000\004\103\u022f\001\002\000\002\001\uff53\000\034\003" +
    "\u023d\046\143\055\u0242\062\032\063\151\104\u023c\112\u023b" +
    "\213\u023f\214\u0234\215\u0235\216\u0239\217\u0233\220\u023e\001" +
    "\uff46\000\002\001\uffa1\000\004\045\u0252\001\002\000\002" +
    "\001\uff41\000\004\062\u0251\001\uff3e\000\004\062\u0250\001" +
    "\uff3d\000\002\001\uff54\000\020\045\uff45\213\u023f\214\u024f" +
    "\215\u024e\216\u0239\217\u0233\220\u023e\001\uff48\000\002\001" +
    "\uffa5\000\002\001\uff40\000\002\001\uff44\000\002\001\uff4d" +
    "\000\002\001\uffa2\000\002\001\uff4c\000\002\001\uff42\000" +
    "\002\001\uff3f\000\004\012\u0244\001\002\000\006\121\u0220" +
    "\143\u0243\001\002\000\002\001\uff47\000\002\001\uff51\000" +
    "\004\126\u024b\001\uff3a\000\006\121\u0246\143\u0247\001\002" +
    "\000\004\012\u0248\001\002\000\002\001\uff52\000\004\126" +
    "\u0249\001\uff3c\000\050\006\113\007\011\010\171\017\134" +
    "\071\200\072\020\073\046\074\047\075\140\076\006\077" +
    "\173\106\205\107\135\110\042\111\177\113\055\163\204" +
    "\164\175\213\203\001\002\000\002\001\uff3b\000\050\006" +
    "\113\007\011\010\171\017\134\071\200\072\020\073\046" +
    "\074\047\075\140\076\006\077\173\106\205\107\135\110" +
    "\042\111\177\113\055\163\204\164\175\213\203\001\002" +
    "\000\002\001\uff39\000\002\001\uff43\000\002\001\uff3d\000" +
    "\002\001\uff3e\000\002\001\uff9e\000\002\001\uff9f\000\004" +
    "\150\251\001\uffb0\000\006\010\171\113\055\001\002\000" +
    "\002\001\uff50\000\004\221\u0256\001\002\000\020\003\261" +
    "\010\171\071\253\106\257\111\263\113\055\222\uff71\001" +
    "\uff68\000\004\222\u0258\001\002\000\002\001\uff4f\000\006" +
    "\103\u025b\143\u025c\001\uff49\000\002\001\uff4e\000\002\001" +
    "\uffe3\000\002\001\uff4b\000\240\003\123\004\152\005\164" +
    "\006\113\007\011\010\034\012\062\014\077\017\134\020" +
    "\021\021\127\022\124\023\045\025\033\027\106\031\165" +
    "\034\110\036\136\042\056\043\126\044\074\045\114\047" +
    "\144\050\041\052\162\053\242\054\012\056\101\057\156" +
    "\060\031\061\273\062\032\063\151\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\103\065" +
    "\104\u025e\106\244\107\135\110\042\111\067\112\025\113" +
    "\055\114\030\115\071\116\052\117\131\120\112\125\064" +
    "\143\010\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\043\214\063\215\017\221" +
    "\160\224\105\225\117\226\060\227\102\001\002\000\002" +
    "\001\uff4a\000\006\066\u0275\205\u0274\001\ufe69\000\016\012" +
    "\062\015\u0273\016\u0272\101\u0263\102\u0262\225\u0271\001\002" +
    "\000\002\001\ufe6b\000\020\010\171\012\062\106\u017f\111" +
    "\u017b\113\055\213\203\224\105\001\002\000\150\004\152" +
    "\006\113\007\011\010\171\011\u0267\012\062\017\134\034" +
    "\110\045\246\057\156\060\031\070\157\071\013\072\020" +
    "\073\046\074\047\075\140\076\006\077\035\106\244\107" +
    "\135\110\042\111\067\113\055\114\030\115\071\116\052" +
    "\117\131\120\112\125\064\163\111\164\070\170\154\171" +
    "\015\173\053\174\161\175\027\176\141\177\040\200\133" +
    "\201\075\202\142\203\073\204\036\207\100\213\203\221" +
    "\160\224\105\225\117\226\060\227\102\001\002\000\010" +
    "\012\062\101\u0263\102\u0262\001\002\000\002\001\ufe6a\000" +
    "\070\033\u0108\104\u026d\122\u0100\123\u010f\124\372\142\375" +
    "\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152" +
    "\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c" +
    "\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\002\000\006\104\u0268\205\u0269\001\002" +
    "\000\002\001\ufe64\000\146\004\152\006\113\007\011\010" +
    "\171\012\062\017\134\034\110\045\246\057\156\060\031" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\106\244\107\135\110\042\111\067\113\055" +
    "\114\030\115\071\116\052\117\131\120\112\125\064\163" +
    "\111\164\070\170\154\171\015\173\053\174\161\175\027" +
    "\176\141\177\040\200\133\201\075\202\142\203\073\204" +
    "\036\207\100\213\203\221\160\224\105\225\117\226\060" +
    "\227\102\001\002\000\070\033\u0108\122\u0100\123\u010f\124" +
    "\372\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a" +
    "\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157" +
    "\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106" +
    "\166\u0105\167\370\172\374\206\u026b\001\002\000\004\104" +
    "\u026c\001\002\000\002\001\ufe65\000\002\001\ufe66\000\006" +
    "\066\364\104\u026f\001\002\000\002\001\ufe63\000\002\001" +
    "\ufe6e\000\002\001\ufeaf\000\002\001\ufe6d\000\002\001\ufe6c" +
    "\000\012\010\171\012\062\013\u027a\113\055\001\002\000" +
    "\006\010\171\113\055\001\002\000\002\001\ufe67\000\002" +
    "\001\ufe60\000\004\206\u027b\001\002\000\002\001\ufe62\000" +
    "\002\001\ufe61\000\002\001\ufe68\000\010\010\171\113\055" +
    "\221\252\001\002\000\002\001\uffae\000\004\221\u027f\001" +
    "\002\000\020\003\261\010\171\071\253\106\257\111\263" +
    "\113\055\222\uff71\001\uff68\000\004\222\u0281\001\002\000" +
    "\002\001\uffad\000\006\003\u0284\103\u0283\001\002\000\002" +
    "\001\uffe3\000\002\001\uffaa\000\002\001\uffac\000\240\003" +
    "\123\004\152\005\164\006\113\007\011\010\034\012\062" +
    "\014\077\017\134\020\021\021\127\022\124\023\045\025" +
    "\033\027\106\031\165\034\110\036\136\042\056\043\126" +
    "\044\074\045\114\047\144\050\041\052\162\053\242\054" +
    "\012\056\101\057\156\060\031\061\273\062\032\063\151" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\103\065\104\u0287\106\244\107\135\110\042" +
    "\111\067\112\025\113\055\114\030\115\071\116\052\117" +
    "\131\120\112\125\064\143\010\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\043" +
    "\214\063\215\017\221\160\224\105\225\117\226\060\227" +
    "\102\001\002\000\002\001\uffab\000\066\033\u0108\122\u0100" +
    "\123\u010f\124\372\142\375\144\371\145\u0109\146\373\147" +
    "\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d" +
    "\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164" +
    "\377\165\u0106\166\u0105\167\370\172\374\001\ufe59\000\012" +
    "\033\u0108\165\u0106\166\u0105\167\370\001\uff0b\000\002\001" +
    "\uff2b\000\146\004\152\006\113\007\011\010\171\012\062" +
    "\017\134\034\110\045\246\057\156\060\031\070\157\071" +
    "\013\072\020\073\046\074\047\075\140\076\006\077\035" +
    "\106\244\107\135\110\042\111\067\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\042\035\u029d\066\364\126\352\127\355\130\353" +
    "\131\363\132\356\133\365\134\360\135\362\136\354\137" +
    "\351\140\357\141\361\173\ufea0\174\ufea0\001\ufea2\000\004" +
    "\035\u028e\001\ufea3\000\020\010\171\012\062\106\u017f\111" +
    "\u017b\113\055\213\203\224\105\001\002\000\006\066\364" +
    "\067\u0291\001\uff91\000\004\222\u0296\001\002\000\022\010" +
    "\171\012\062\106\u017f\111\u017b\113\055\150\u0294\213\203" +
    "\224\105\001\002\000\002\001\uff90\000\004\066\364\001" +
    "\uff8f\000\020\010\171\012\062\106\u017f\111\u017b\113\055" +
    "\213\203\224\105\001\002\000\004\066\364\001\uff8e\000" +
    "\226\003\123\004\152\005\164\006\113\007\011\010\034" +
    "\012\062\014\077\017\134\020\021\021\127\022\124\023" +
    "\045\025\033\027\106\031\165\034\110\036\136\042\056" +
    "\043\126\044\074\045\246\047\144\050\041\052\162\053" +
    "\242\054\012\056\101\057\156\060\031\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\103" +
    "\065\106\244\107\135\110\042\111\067\112\025\113\055" +
    "\114\030\115\071\116\052\117\131\120\112\125\064\143" +
    "\010\163\111\164\070\170\154\171\015\173\053\174\161" +
    "\175\027\176\141\177\040\200\133\201\075\202\142\203" +
    "\073\204\036\207\100\213\043\221\160\223\u0297\224\105" +
    "\225\117\226\060\227\102\001\002\000\002\001\uffe3\000" +
    "\002\001\uff8b\000\002\001\uffc3\000\240\003\123\004\152" +
    "\005\164\006\113\007\011\010\034\012\062\014\077\017" +
    "\134\020\021\021\127\022\124\023\045\025\033\027\106" +
    "\030\u029b\031\165\034\110\036\136\042\056\043\126\044" +
    "\074\045\114\047\144\050\041\052\162\053\242\054\012" +
    "\056\101\057\156\060\031\061\273\062\032\063\151\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\103\065\106\244\107\135\110\042\111\067\112" +
    "\025\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\143\010\163\111\164\070\170\154\171\015\173" +
    "\053\174\161\175\027\176\141\177\040\200\133\201\075" +
    "\202\142\203\073\204\036\207\100\213\043\214\063\215" +
    "\017\221\160\224\105\225\117\226\060\227\102\001\002" +
    "\000\004\143\u029c\001\002\000\002\001\uff8a\000\022\010" +
    "\171\012\062\106\u017f\111\u017b\113\055\150\u0294\213\203" +
    "\224\105\001\002\000\004\067\u0291\001\uff91\000\004\222" +
    "\u02a0\001\002\000\226\003\123\004\152\005\164\006\113" +
    "\007\011\010\034\012\062\014\077\017\134\020\021\021" +
    "\127\022\124\023\045\025\033\027\106\031\165\034\110" +
    "\036\136\042\056\043\126\044\074\045\246\047\144\050" +
    "\041\052\162\053\242\054\012\056\101\057\156\060\031" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\103\065\106\244\107\135\110\042\111\067" +
    "\112\025\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\143\010\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\043\221\160" +
    "\223\u0297\224\105\225\117\226\060\227\102\001\002\000" +
    "\002\001\uffc4\000\002\001\uff1f\000\002\001\uff1d\000\006" +
    "\003\u02a7\103\u02a8\001\002\000\002\001\ufff4\000\010\003" +
    "\u02a7\103\u02a8\143\u02ab\001\002\000\002\001\uffeb\000\002" +
    "\001\ufff9\000\002\001\uffed\000\002\001\ufff3\000\002\001" +
    "\uffee\000\242\003\123\004\152\005\164\006\113\007\011" +
    "\010\034\012\062\014\077\017\134\020\021\021\127\022" +
    "\124\023\045\025\033\027\106\031\165\034\110\036\136" +
    "\042\056\043\126\044\074\045\114\046\143\047\144\050" +
    "\041\052\162\053\026\054\012\056\101\057\156\060\031" +
    "\061\057\062\032\063\151\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\103\065\104\u02ad" +
    "\106\103\107\135\110\042\111\067\112\025\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\143\010" +
    "\163\111\164\070\170\154\171\015\173\053\174\161\175" +
    "\027\176\141\177\040\200\133\201\075\202\142\203\073" +
    "\204\036\207\100\213\043\214\063\215\017\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\002\001\uffec" +
    "\000\002\001\ufffa\000\002\001\ufff1\000\016\012\062\015" +
    "\u0273\016\u0272\101\u0263\102\u0262\227\u02b1\001\002\000\002" +
    "\001\ufeae\000\020\010\171\012\062\106\u017f\111\u017b\113" +
    "\055\213\203\224\105\001\002\000\002\001\uffb7\000\004" +
    "\066\364\001\uffb5\000\006\121\u02b7\222\u02b6\001\002\000" +
    "\004\143\u02b9\001\002\000\020\010\171\012\062\106\u017f" +
    "\111\u017b\113\055\213\203\224\105\001\002\000\002\001" +
    "\uffb6\000\002\001\uffc5\000\004\221\u0188\001\ufecb\000\002" +
    "\001\uff2c\000\002\001\ufef6\000\004\143\u02be\001\002\000" +
    "\002\001\uffbe\000\002\001\ufef4\000\010\103\u012e\205\u012f" +
    "\221\ufe99\001\ufe8d\000\066\033\u0108\122\u0100\123\u010f\124" +
    "\372\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a" +
    "\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157" +
    "\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106" +
    "\166\u0105\167\370\172\374\001\ufe5c\000\012\033\u0108\165" +
    "\u0106\166\u0105\167\370\001\uff0a\000\006\105\ufedb\221\u0195" +
    "\001\ufeb1\000\002\001\uffe3\000\240\003\123\004\152\005" +
    "\164\006\113\007\011\010\034\012\062\014\077\017\134" +
    "\020\021\021\127\022\124\023\045\025\033\027\106\031" +
    "\165\034\110\036\136\042\056\043\126\044\074\045\114" +
    "\047\144\050\041\052\162\053\242\054\012\056\101\057" +
    "\156\060\031\061\273\062\032\063\151\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\103" +
    "\065\104\u02c6\106\244\107\135\110\042\111\067\112\025" +
    "\113\055\114\030\115\071\116\052\117\131\120\112\125" +
    "\064\143\010\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\043\214\063\215\017" +
    "\221\160\224\105\225\117\226\060\227\102\001\002\000" +
    "\002\001\uffd9\000\060\033\u0108\142\375\144\371\145\u0109" +
    "\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154" +
    "\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103" +
    "\163\u0110\164\377\165\u0106\166\u0105\167\370\172\374\001" +
    "\ufeee\000\010\010\u02c9\012\062\224\105\001\002\000\004" +
    "\221\u018e\001\ufe56\000\004\226\u02cd\001\002\000\014\012" +
    "\062\015\u0273\016\u0272\101\u0263\102\u0262\001\ufecc\000\010" +
    "\012\062\101\u0263\102\u0262\001\ufecd\000\002\001\ufeef\000" +
    "\004\222\u02cf\001\002\000\004\143\u02d0\001\002\000\002" +
    "\001\ufff5\000\002\001\uffd2\000\070\033\u0108\122\u0100\123" +
    "\u010f\124\372\142\375\143\u02d3\144\371\145\u0109\146\373" +
    "\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155" +
    "\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110" +
    "\164\377\165\u0106\166\u0105\167\370\172\374\001\002\000" +
    "\002\001\uffd1\000\002\001\uff1e\000\146\004\152\006\113" +
    "\007\011\010\171\012\062\017\134\034\110\045\246\057" +
    "\156\060\031\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\106\244\107\135\110\042\111" +
    "\067\113\055\114\030\115\071\116\052\117\131\120\112" +
    "\125\064\163\111\164\070\170\154\171\015\173\053\174" +
    "\161\175\027\176\141\177\040\200\133\201\075\202\142" +
    "\203\073\204\036\207\100\213\203\221\160\224\105\225" +
    "\117\226\060\227\102\001\002\000\070\033\u0108\122\u0100" +
    "\123\u010f\124\372\142\375\144\371\145\u0109\146\373\147" +
    "\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d" +
    "\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164" +
    "\377\165\u0106\166\u0105\167\370\172\374\222\u02d7\001\002" +
    "\000\002\001\ufe5b\000\002\001\uffa9\000\004\064\u02da\001" +
    "\uff9d\000\014\003\u02e6\010\171\106\257\111\263\113\055" +
    "\001\002\000\004\003\u02dd\001\uffa3\000\004\065\u02df\001" +
    "\uff97\000\002\001\uffa4\000\002\001\uffa8\000\014\003\u022a" +
    "\010\171\106\257\111\263\113\055\001\002\000\004\121" +
    "\u022b\001\uff96\000\004\103\u02e2\001\002\000\002\001\uff53" +
    "\000\034\003\u023d\046\143\055\u0242\062\032\063\151\104" +
    "\u023c\112\u023b\213\u023f\214\u0234\215\u0235\216\u0239\217\u0233" +
    "\220\u023e\001\uff46\000\002\001\uffa7\000\002\001\uff9c\000" +
    "\002\001\uff9b\000\146\004\152\006\113\007\011\010\171" +
    "\012\062\017\134\034\110\045\246\057\156\060\031\070" +
    "\157\071\013\072\020\073\046\074\047\075\140\076\006" +
    "\077\035\106\244\107\135\110\042\111\067\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\203\221\160\224\105\225\117\226\060\227" +
    "\102\001\002\000\070\033\u0108\122\u0100\123\u010f\124\372" +
    "\142\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151" +
    "\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376" +
    "\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166" +
    "\u0105\167\370\172\374\222\u02e9\001\002\000\226\003\123" +
    "\004\152\005\164\006\113\007\011\010\034\012\062\014" +
    "\077\017\134\020\021\021\127\022\124\023\045\025\033" +
    "\027\106\031\165\034\110\036\136\042\056\043\126\044" +
    "\074\045\246\047\144\050\041\052\162\053\242\054\012" +
    "\056\101\057\156\060\031\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\103\065\106\244" +
    "\107\135\110\042\111\067\112\025\113\055\114\030\115" +
    "\071\116\052\117\131\120\112\125\064\143\010\163\111" +
    "\164\070\170\154\171\015\173\053\174\161\175\027\176" +
    "\141\177\040\200\133\201\075\202\142\203\073\204\036" +
    "\207\100\213\043\221\160\223\u02ea\224\105\225\117\226" +
    "\060\227\102\001\002\000\002\001\uffe3\000\002\001\uffd6" +
    "\000\002\001\uff7c\000\240\003\123\004\152\005\164\006" +
    "\113\007\011\010\034\012\062\014\077\017\134\020\021" +
    "\021\127\022\124\023\045\024\u02ee\025\033\027\106\031" +
    "\165\034\110\036\136\042\056\043\126\044\074\045\114" +
    "\047\144\050\041\052\162\053\242\054\012\056\101\057" +
    "\156\060\031\061\273\062\032\063\151\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\103" +
    "\065\106\244\107\135\110\042\111\067\112\025\113\055" +
    "\114\030\115\071\116\052\117\131\120\112\125\064\143" +
    "\010\163\111\164\070\170\154\171\015\173\053\174\161" +
    "\175\027\176\141\177\040\200\133\201\075\202\142\203" +
    "\073\204\036\207\100\213\043\214\063\215\017\221\160" +
    "\224\105\225\117\226\060\227\102\001\002\000\004\143" +
    "\u02ef\001\002\000\002\001\uff7b\000\004\126\u02f7\001\uff56" +
    "\000\006\121\u02f2\143\u02f3\001\002\000\004\012\u02f4\001" +
    "\002\000\002\001\uffca\000\004\126\u02f5\001\uff58\000\050" +
    "\006\113\007\011\010\171\017\134\071\200\072\020\073" +
    "\046\074\047\075\140\076\006\077\173\106\205\107\135" +
    "\110\042\111\177\113\055\163\204\164\175\213\203\001" +
    "\002\000\002\001\uff57\000\050\006\113\007\011\010\171" +
    "\017\134\071\200\072\020\073\046\074\047\075\140\076" +
    "\006\077\173\106\205\107\135\110\042\111\177\113\055" +
    "\163\204\164\175\213\203\001\002\000\002\001\uff55\000" +
    "\002\001\uffe3\000\240\003\123\004\152\005\164\006\113" +
    "\007\011\010\034\012\062\014\077\017\134\020\021\021" +
    "\127\022\124\023\045\025\033\027\106\031\165\034\110" +
    "\036\136\042\056\043\126\044\074\045\114\047\144\050" +
    "\041\052\162\053\242\054\012\056\101\057\156\060\031" +
    "\061\273\062\032\063\151\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\103\065\104\u02fb" +
    "\106\244\107\135\110\042\111\067\112\025\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\143\010" +
    "\163\111\164\070\170\154\171\015\173\053\174\161\175" +
    "\027\176\141\177\040\200\133\201\075\202\142\203\073" +
    "\204\036\207\100\213\043\214\063\215\017\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\004\051\u02fc" +
    "\001\002\000\004\221\u02fd\001\002\000\012\010\171\106" +
    "\257\111\263\113\055\001\002\000\004\012\062\001\002" +
    "\000\004\222\u0300\001\002\000\004\103\u0301\001\002\000" +
    "\002\001\uffe3\000\240\003\123\004\152\005\164\006\113" +
    "\007\011\010\034\012\062\014\077\017\134\020\021\021" +
    "\127\022\124\023\045\025\033\027\106\031\165\034\110" +
    "\036\136\042\056\043\126\044\074\045\114\047\144\050" +
    "\041\052\162\053\242\054\012\056\101\057\156\060\031" +
    "\061\273\062\032\063\151\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\103\065\104\u0303" +
    "\106\244\107\135\110\042\111\067\112\025\113\055\114" +
    "\030\115\071\116\052\117\131\120\112\125\064\143\010" +
    "\163\111\164\070\170\154\171\015\173\053\174\161\175" +
    "\027\176\141\177\040\200\133\201\075\202\142\203\073" +
    "\204\036\207\100\213\043\214\063\215\017\221\160\224" +
    "\105\225\117\226\060\227\102\001\002\000\004\051\u0304" +
    "\001\uffbb\000\004\221\u0309\001\002\000\002\001\uffc0\000" +
    "\002\001\uffba\000\004\051\u0304\001\uffbc\000\002\001\uffb9" +
    "\000\012\010\171\106\257\111\263\113\055\001\002\000" +
    "\004\012\u030b\001\002\000\004\222\u030c\001\002\000\004" +
    "\103\u030d\001\002\000\002\001\uffe3\000\240\003\123\004" +
    "\152\005\164\006\113\007\011\010\034\012\062\014\077" +
    "\017\134\020\021\021\127\022\124\023\045\025\033\027" +
    "\106\031\165\034\110\036\136\042\056\043\126\044\074" +
    "\045\114\047\144\050\041\052\162\053\242\054\012\056" +
    "\101\057\156\060\031\061\273\062\032\063\151\070\157" +
    "\071\013\072\020\073\046\074\047\075\140\076\006\077" +
    "\035\103\065\104\u030f\106\244\107\135\110\042\111\067" +
    "\112\025\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\143\010\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\043\214\063" +
    "\215\017\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\002\001\uffb8\000\002\001\ufef8\000\002\001\ufef2" +
    "\000\016\012\062\015\u0273\016\u0272\100\u0314\101\u0263\102" +
    "\u0262\001\002\000\012\012\062\100\234\101\u0263\102\u0262" +
    "\001\002\000\002\001\ufead\000\002\001\uffdd\000\146\004" +
    "\152\006\113\007\011\010\171\012\062\017\134\034\110" +
    "\045\246\057\156\060\031\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\106\244\107\135" +
    "\110\042\111\067\113\055\114\030\115\071\116\052\117" +
    "\131\120\112\125\064\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\203\221\160" +
    "\224\105\225\117\226\060\227\102\001\uff34\000\066\033" +
    "\u0108\122\u0100\123\u010f\124\372\142\375\144\371\145\u0109" +
    "\146\373\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154" +
    "\u0101\155\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103" +
    "\163\u0110\164\377\165\u0106\166\u0105\167\370\172\374\001" +
    "\uff31\000\004\143\u031c\001\002\000\004\121\u031a\001\uff33" +
    "\000\146\004\152\006\113\007\011\010\171\012\062\017" +
    "\134\034\110\045\246\057\156\060\031\070\157\071\013" +
    "\072\020\073\046\074\047\075\140\076\006\077\035\106" +
    "\244\107\135\110\042\111\067\113\055\114\030\115\071" +
    "\116\052\117\131\120\112\125\064\163\111\164\070\170" +
    "\154\171\015\173\053\174\161\175\027\176\141\177\040" +
    "\200\133\201\075\202\142\203\073\204\036\207\100\213" +
    "\203\221\160\224\105\225\117\226\060\227\102\001\002" +
    "\000\066\033\u0108\122\u0100\123\u010f\124\372\142\375\144" +
    "\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104" +
    "\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161" +
    "\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370" +
    "\172\374\001\uff32\000\146\004\152\006\113\007\011\010" +
    "\171\012\062\017\134\034\110\045\246\057\156\060\031" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\106\244\107\135\110\042\111\067\113\055" +
    "\114\030\115\071\116\052\117\131\120\112\125\064\163" +
    "\111\164\070\170\154\171\015\173\053\174\161\175\027" +
    "\176\141\177\040\200\133\201\075\202\142\203\073\204" +
    "\036\207\100\213\203\221\160\224\105\225\117\226\060" +
    "\227\102\001\uff34\000\004\143\u031e\001\002\000\146\004" +
    "\152\006\113\007\011\010\171\012\062\017\134\034\110" +
    "\045\246\057\156\060\031\070\157\071\013\072\020\073" +
    "\046\074\047\075\140\076\006\077\035\106\244\107\135" +
    "\110\042\111\067\113\055\114\030\115\071\116\052\117" +
    "\131\120\112\125\064\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\203\221\160" +
    "\224\105\225\117\226\060\227\102\001\uff34\000\004\222" +
    "\u0320\001\002\000\226\003\123\004\152\005\164\006\113" +
    "\007\011\010\034\012\062\014\077\017\134\020\021\021" +
    "\127\022\124\023\045\025\033\027\106\031\165\034\110" +
    "\036\136\042\056\043\126\044\074\045\246\047\144\050" +
    "\041\052\162\053\242\054\012\056\101\057\156\060\031" +
    "\070\157\071\013\072\020\073\046\074\047\075\140\076" +
    "\006\077\035\103\065\106\244\107\135\110\042\111\067" +
    "\112\025\113\055\114\030\115\071\116\052\117\131\120" +
    "\112\125\064\143\010\163\111\164\070\170\154\171\015" +
    "\173\053\174\161\175\027\176\141\177\040\200\133\201" +
    "\075\202\142\203\073\204\036\207\100\213\043\221\160" +
    "\223\u0322\224\105\225\117\226\060\227\102\001\002\000" +
    "\002\001\uffd4\000\002\001\uffe3\000\002\001\uff8d\000\240" +
    "\003\123\004\152\005\164\006\113\007\011\010\034\012" +
    "\062\014\077\017\134\020\021\021\127\022\124\023\045" +
    "\025\033\026\u0325\027\106\031\165\034\110\036\136\042" +
    "\056\043\126\044\074\045\114\047\144\050\041\052\162" +
    "\053\242\054\012\056\101\057\156\060\031\061\273\062" +
    "\032\063\151\070\157\071\013\072\020\073\046\074\047" +
    "\075\140\076\006\077\035\103\065\106\244\107\135\110" +
    "\042\111\067\112\025\113\055\114\030\115\071\116\052" +
    "\117\131\120\112\125\064\143\010\163\111\164\070\170" +
    "\154\171\015\173\053\174\161\175\027\176\141\177\040" +
    "\200\133\201\075\202\142\203\073\204\036\207\100\213" +
    "\043\214\063\215\017\221\160\224\105\225\117\226\060" +
    "\227\102\001\002\000\004\143\u0326\001\002\000\002\001" +
    "\uff8c\000\020\010\171\012\062\106\u017f\111\u017b\113\055" +
    "\213\203\224\105\001\002\000\006\066\364\222\u0329\001" +
    "\002\000\002\001\ufe5e\000\066\033\u0108\122\u0100\123\u010f" +
    "\124\372\142\375\144\371\145\u0109\146\373\147\u0102\150" +
    "\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156\u010b" +
    "\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377\165" +
    "\u0106\166\u0105\167\370\172\374\001\ufe5d\000\002\001\ufefa" +
    "\000\004\035\u0336\001\uffe8\000\002\001\uffe9\000\006\010" +
    "\171\113\055\001\002\000\006\121\u0330\143\u0331\001\002" +
    "\000\010\010\171\111\u032e\113\055\001\002\000\002\001" +
    "\ufff0\000\002\001\uffea\000\004\035\u0334\001\uffe6\000\004" +
    "\010\u0335\001\002\000\002\001\uffe5\000\004\010\u0337\001" +
    "\002\000\002\001\uffe7\000\006\121\u0214\143\u0339\001\002" +
    "\000\002\001\uffbd\000\002\001\uffc7\000\002\001\uff08\000" +
    "\150\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\150\u033d\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\ufe78\000\020\010\171\012\062\106\u017f\111\u017b\113\055" +
    "\213\203\224\105\001\002\000\070\033\u0108\067\u034b\122" +
    "\u0100\123\u010f\124\372\142\375\144\371\145\u0109\146\373" +
    "\147\u0102\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155" +
    "\u010d\156\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110" +
    "\164\377\165\u0106\166\u0105\167\370\172\374\001\ufe73\000" +
    "\004\121\u0342\001\ufeaa\000\004\222\u0341\001\002\000\002" +
    "\001\ufef0\000\150\004\152\006\113\007\011\010\171\012" +
    "\062\017\134\034\110\045\246\057\156\060\031\070\157" +
    "\071\013\072\020\073\046\074\047\075\140\076\006\077" +
    "\035\106\244\107\135\110\042\111\067\113\055\114\030" +
    "\115\071\116\052\117\131\120\112\125\064\150\u0344\163" +
    "\111\164\070\170\154\171\015\173\053\174\161\175\027" +
    "\176\141\177\040\200\133\201\075\202\142\203\073\204" +
    "\036\207\100\213\203\221\160\224\105\225\117\226\060" +
    "\227\102\001\ufea9\000\002\001\ufe77\000\020\010\171\012" +
    "\062\106\u017f\111\u017b\113\055\213\203\224\105\001\002" +
    "\000\070\033\u0108\067\u0346\122\u0100\123\u010f\124\372\142" +
    "\375\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e" +
    "\152\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160" +
    "\u010c\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105" +
    "\167\370\172\374\001\ufe75\000\150\004\152\006\113\007" +
    "\011\010\171\012\062\017\134\034\110\045\246\057\156" +
    "\060\031\070\157\071\013\072\020\073\046\074\047\075" +
    "\140\076\006\077\035\106\244\107\135\110\042\111\067" +
    "\113\055\114\030\115\071\116\052\117\131\120\112\125" +
    "\064\150\u0347\163\111\164\070\170\154\171\015\173\053" +
    "\174\161\175\027\176\141\177\040\200\133\201\075\202" +
    "\142\203\073\204\036\207\100\213\203\221\160\224\105" +
    "\225\117\226\060\227\102\001\002\000\020\010\171\012" +
    "\062\106\u017f\111\u017b\113\055\213\203\224\105\001\002" +
    "\000\066\033\u0108\122\u0100\123\u010f\124\372\142\375\144" +
    "\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152\u0104" +
    "\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c\161" +
    "\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167\370" +
    "\172\374\001\ufe76\000\002\001\ufe72\000\002\001\ufe71\000" +
    "\150\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\150\u034c\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\002\000\020\010\171\012\062\106\u017f\111\u017b\113\055" +
    "\213\203\224\105\001\002\000\066\033\u0108\122\u0100\123" +
    "\u010f\124\372\142\375\144\371\145\u0109\146\373\147\u0102" +
    "\150\u010a\151\u010e\152\u0104\153\367\154\u0101\155\u010d\156" +
    "\u010b\157\376\160\u010c\161\u0107\162\u0103\163\u0110\164\377" +
    "\165\u0106\166\u0105\167\370\172\374\001\ufe74\000\002\001" +
    "\ufe70\000\002\001\ufe6f\000\006\121\u0359\143\u035a\001\002" +
    "\000\002\001\uff5b\000\022\010\171\012\062\103\u0356\106" +
    "\u017f\111\u017b\113\055\213\203\224\105\001\002\000\002" +
    "\001\uff5c\000\002\001\uff5a\000\004\066\364\001\ufea2\000" +
    "\146\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\163\111\164\070\170\154" +
    "\171\015\173\053\174\161\175\027\176\141\177\040\200" +
    "\133\201\075\202\142\203\073\204\036\207\100\213\203" +
    "\221\160\224\105\225\117\226\060\227\102\001\002\000" +
    "\070\033\u0108\104\u0358\122\u0100\123\u010f\124\372\142\375" +
    "\144\371\145\u0109\146\373\147\u0102\150\u010a\151\u010e\152" +
    "\u0104\153\367\154\u0101\155\u010d\156\u010b\157\376\160\u010c" +
    "\161\u0107\162\u0103\163\u0110\164\377\165\u0106\166\u0105\167" +
    "\370\172\374\001\002\000\002\001\uff59\000\006\012\u0351" +
    "\224\u0352\001\002\000\002\001\uffcb\000\002\001\uff5d\000" +
    "\150\004\152\006\113\007\011\010\171\012\062\017\134" +
    "\034\110\045\246\057\156\060\031\070\157\071\013\072" +
    "\020\073\046\074\047\075\140\076\006\077\035\106\244" +
    "\107\135\110\042\111\067\113\055\114\030\115\071\116" +
    "\052\117\131\120\112\125\064\150\340\163\111\164\070" +
    "\170\154\171\015\173\053\174\161\175\027\176\141\177" +
    "\040\200\133\201\075\202\142\203\073\204\036\207\100" +
    "\213\203\221\160\224\105\225\117\226\060\227\102\001" +
    "\uff64\000\004\222\u035e\001\002\000\002\001\ufedf\000\002" +
    "\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u035d\000\006\002\003\007\004\001\001\000\002\001" +
    "\001\000\104\003\152\004\147\011\162\012\154\015\115" +
    "\057\144\060\043\063\114\065\013\071\015\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\115\120\120\060" +
    "\123\121\132\106\133\127\134\023\140\136\141\022\142" +
    "\047\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\u034f" +
    "\047\u0352\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\152\004\147\057\144\060\043\063\114\065\013" +
    "\071\u033a\072\053\073\145\074\124\102\071\113\065\114" +
    "\131\120\060\134\023\147\146\151\103\152\006\153\021" +
    "\155\117\157\075\161\036\164\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\152" +
    "\004\147\054\u0337\057\144\060\043\063\114\065\013\071" +
    "\u0211\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\u032b\004\147\005\u032c\006\u032e\020\u01a6\114\131" +
    "\001\001\000\060\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u032a\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\060\003\152\004\147\057\144\060\043\063\114\065" +
    "\013\071\u0329\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\107\u0311\111\u0260\155\u025e\001\001\000\060" +
    "\003\152\004\147\057\144\060\043\063\114\065\013\071" +
    "\u0310\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\002\001\001" +
    "\000\060\003\152\004\147\057\144\060\043\063\114\065" +
    "\013\071\u030f\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\u02f0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\u017f\004\147\060\043\072\053\073\u0179" +
    "\074\124\102\071\114\131\120\u017b\134\u01ca\151\u02d3\152" +
    "\006\153\021\155\117\161\036\164\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u02d1\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\002\001\001\000\012\107\u02ca\110" +
    "\u02c9\111\u0260\155\u025e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u02c6\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\004\172\u02c3\001\001\000\002\001" +
    "\001\000\010\003\u02c2\004\147\114\131\001\001\000\060" +
    "\003\152\004\147\057\144\060\043\063\114\065\013\071" +
    "\u02c1\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\060\003\152" +
    "\004\147\057\144\060\043\063\114\065\013\071\u02c0\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\023\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\010\072\u02bf\074\124" +
    "\155\117\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u02be\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\002\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u02bb\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\u0122\004\147\072\u011b\073\u0119\074\124\102\u011f" +
    "\114\131\120\u011c\153\021\155\117\156\u02b9\160\u0118\161" +
    "\u011e\162\u0120\001\001\000\002\001\001\000\010\107\u02af" +
    "\111\u0260\155\u025e\001\001\000\012\003\u02a4\004\147\114" +
    "\131\171\u02a3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\152\004" +
    "\147\057\144\060\043\063\114\065\013\071\u0289\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\023\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u0288\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u0287\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\002\001\001\000\004\053\u027b\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\107\u025f\111\u0260" +
    "\155\u025e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\152\004\147" +
    "\012\u0219\015\115\057\144\060\043\063\114\065\013\071" +
    "\015\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\002\001\001" +
    "\000\060\003\152\004\147\057\144\060\043\063\114\065" +
    "\013\071\u0217\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\062" +
    "\003\152\004\147\054\u0212\057\144\060\043\063\114\065" +
    "\013\071\u0211\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\002" +
    "\001\001\000\060\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u0210\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\002\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u020f\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\152" +
    "\004\147\057\144\060\043\063\114\065\013\071\u01f3\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\023\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\060\003\152\004\147" +
    "\057\144\060\043\063\114\065\013\071\u01f2\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\002\001\001\000\060\003\152" +
    "\004\147\057\u01ec\060\043\063\114\065\013\071\340\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\u01eb\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\u01e2\001\001\000\002\001\001\000\060" +
    "\003\152\004\147\057\144\060\043\063\114\065\013\071" +
    "\u01e0\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\152\004" +
    "\147\057\144\060\043\063\114\065\013\071\u01cb\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\023\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\042\003\u017f\004\147\060" +
    "\043\072\053\073\u0179\074\124\102\071\114\131\120\u017b" +
    "\134\u01ca\151\u01c9\152\006\153\021\155\117\161\036\164" +
    "\050\001\001\000\060\003\152\004\147\057\144\060\043" +
    "\063\114\065\013\071\u01c7\072\053\073\145\074\124\102" +
    "\071\113\065\114\131\120\060\134\023\147\146\151\103" +
    "\152\006\153\021\155\117\157\075\161\036\164\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\166\114\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\205\004\147" +
    "\063\173\064\201\114\131\120\200\163\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\205\004\147" +
    "\063\173\064\230\114\131\120\200\163\175\001\001\000" +
    "\002\001\001\000\010\003\227\004\147\114\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\205\004\147\063\173\064\210" +
    "\114\131\120\200\163\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\207\004\147\114\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\205\004\147\063\173\064\216" +
    "\066\214\070\215\114\131\120\200\163\175\001\001\000" +
    "\002\001\001\000\004\067\222\001\001\000\002\001\001" +
    "\000\020\003\205\004\147\063\173\064\220\114\131\120" +
    "\200\163\175\001\001\000\002\001\001\000\020\003\205" +
    "\004\147\063\173\064\223\114\131\120\200\163\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\205" +
    "\004\147\063\173\064\225\114\131\120\200\163\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\003\152\004\147\012\246\015\115" +
    "\025\242\057\144\060\043\063\114\065\013\071\015\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\023\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\004\114\236\001\001" +
    "\000\002\001\001\000\020\003\205\004\147\063\173\064" +
    "\240\114\131\120\200\163\175\001\001\000\002\001\001" +
    "\000\004\020\u01a6\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\330\001\001\000\004\053\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\253\004\147\037\263\042\255\043\261\114\131" +
    "\121\257\146\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\314\004\147\114\131\001\001\000\002\001\001" +
    "\000\004\040\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\270\001\001\000\102\003\152\004\147" +
    "\012\276\014\271\015\115\057\144\060\043\063\114\065" +
    "\013\071\015\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\115\120\120\060\132\273\133\275\134\023\140" +
    "\136\141\022\142\047\147\146\151\103\152\006\153\021" +
    "\155\117\157\075\161\036\164\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\316\004\147\114\131\001\001\000\002" +
    "\001\001\000\016\003\253\004\147\043\320\114\131\121" +
    "\257\146\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\205\004\147\063\173\064" +
    "\324\114\131\120\200\163\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\205\004\147\063\173\064" +
    "\327\114\131\120\200\163\175\001\001\000\002\001\001" +
    "\000\102\003\152\004\147\012\276\014\271\015\115\057" +
    "\144\060\043\063\114\065\013\071\015\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\115\120\120\060\132" +
    "\273\133\275\134\023\140\136\141\022\142\047\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\334\004\147\114\131\001\001\000\002\001\001\000" +
    "\064\003\152\004\147\044\336\045\342\057\343\060\043" +
    "\063\114\065\013\071\340\072\053\073\145\074\124\102" +
    "\071\113\065\114\131\120\060\134\341\147\146\151\103" +
    "\152\006\153\021\155\117\157\075\161\036\164\050\001" +
    "\001\000\002\001\001\000\042\003\u017f\004\147\060\043" +
    "\072\053\073\u0179\074\124\102\071\114\131\117\u01a3\120" +
    "\u017b\134\u01a2\152\006\153\021\155\117\161\036\164\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\152\004\147\057\347" +
    "\060\043\063\114\065\013\071\340\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\346\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\042\003\u017f\004\147\060\043\072\053" +
    "\073\u0179\074\124\102\071\114\131\117\u01a1\120\u017b\134" +
    "\u01a2\152\006\153\021\155\117\161\036\164\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\003\152\004" +
    "\147\057\144\060\043\063\114\065\013\071\u01a0\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\023\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u0178\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u0176\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\060\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u0175\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\060\003\152\004\147\057\144\060\043\063\114\065" +
    "\013\071\u0174\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\060" +
    "\003\152\004\147\057\144\060\043\063\114\065\013\071" +
    "\u0173\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\060\003\152" +
    "\004\147\057\144\060\043\063\114\065\013\071\u0172\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\023\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\060\003\152\004\147" +
    "\057\144\060\043\063\114\065\013\071\u0171\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\060\003\152\004\147\057\144" +
    "\060\043\063\114\065\013\071\u0170\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\023\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\060\003\152\004\147\057\144\060\043" +
    "\063\114\065\013\071\u016f\072\053\073\145\074\124\102" +
    "\071\113\065\114\131\120\060\134\023\147\146\151\103" +
    "\152\006\153\021\155\117\157\075\161\036\164\050\001" +
    "\001\000\060\003\152\004\147\057\144\060\043\063\114" +
    "\065\013\071\u016e\072\053\073\145\074\124\102\071\113" +
    "\065\114\131\120\060\134\023\147\146\151\103\152\006" +
    "\153\021\155\117\157\075\161\036\164\050\001\001\000" +
    "\022\072\u012c\074\124\076\u0167\101\u0127\102\u012a\114\u0126" +
    "\152\u0166\155\117\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\365\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\002\001\001\000\060\003\152\004" +
    "\147\057\144\060\043\063\114\065\013\071\u0165\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\023\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u0164\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u0163\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\060\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u0162\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\060\003\152\004\147\057\144\060\043\063\114\065" +
    "\013\071\u0161\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\060" +
    "\003\152\004\147\057\144\060\043\063\114\065\013\071" +
    "\u0160\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\060\003\152" +
    "\004\147\057\144\060\043\063\114\065\013\071\u015b\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\023\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\060\003\152\004\147" +
    "\057\144\060\043\063\114\065\013\071\u015a\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\060\003\152\004\147\057\144" +
    "\060\043\063\114\065\013\071\u0159\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\023\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\060\003\152\004\147\057\144\060\043" +
    "\063\114\065\013\071\u0158\072\053\073\145\074\124\102" +
    "\071\113\065\114\131\120\060\134\023\147\146\151\103" +
    "\152\006\153\021\155\117\157\075\161\036\164\050\001" +
    "\001\000\060\003\152\004\147\057\144\060\043\063\114" +
    "\065\013\071\u0157\072\053\073\145\074\124\102\071\113" +
    "\065\114\131\120\060\134\023\147\146\151\103\152\006" +
    "\153\021\155\117\157\075\161\036\164\050\001\001\000" +
    "\060\003\152\004\147\057\144\060\043\063\114\065\013" +
    "\071\u0156\072\053\073\145\074\124\102\071\113\065\114" +
    "\131\120\060\134\023\147\146\151\103\152\006\153\021" +
    "\155\117\157\075\161\036\164\050\001\001\000\060\003" +
    "\152\004\147\057\144\060\043\063\114\065\013\071\u0155" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\120" +
    "\060\134\023\147\146\151\103\152\006\153\021\155\117" +
    "\157\075\161\036\164\050\001\001\000\060\003\152\004" +
    "\147\057\144\060\043\063\114\065\013\071\u0154\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\023\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u0153\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u0152\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\060\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u0151\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\036\003\u0122\004\147\072\u011b\073\u0119\074\124\102" +
    "\u011f\114\131\120\u011c\153\021\155\117\156\u011d\160\u0118" +
    "\161\u011e\162\u0120\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u0117\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u0116\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\060\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u0115\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\060\003\152\004\147\057\144\060\043\063\114\065" +
    "\013\071\u0114\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\060" +
    "\003\152\004\147\057\144\060\043\063\114\065\013\071" +
    "\u0113\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\060\003\152" +
    "\004\147\057\144\060\043\063\114\065\013\071\u0112\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\023\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\060\003\152\004\147" +
    "\057\144\060\043\063\114\065\013\071\u0111\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\060\003\152\004\147\057\144" +
    "\060\043\063\114\065\013\071\u0110\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\023\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\u014e\004\147\114\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\072\u0141\074\124\155\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\u0124\004\147\114\131\001\001\000\002\001" +
    "\001\000\022\072\u012c\074\124\076\u0129\101\u0127\102\u012a" +
    "\114\u0126\152\u0128\155\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\072\u0136\074\124\155\117\001\001\000\060\003\152\004" +
    "\147\057\144\060\043\063\114\065\013\071\u0134\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\023\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\002\001\001\000\060\003" +
    "\152\004\147\057\144\060\043\063\114\065\013\071\u0132" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\120" +
    "\060\134\023\147\146\151\103\152\006\153\021\155\117" +
    "\157\075\161\036\164\050\001\001\000\062\003\152\004" +
    "\147\057\144\060\043\063\114\065\013\071\u012f\072\053" +
    "\073\145\074\124\075\u0130\102\071\113\065\114\131\120" +
    "\060\134\023\147\146\151\103\152\006\153\021\155\117" +
    "\157\075\161\036\164\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\152\004\147\057\144" +
    "\060\043\063\114\065\013\071\u0139\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\023\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\152\004\147\057\144\060\043\063\114\065\013\071" +
    "\u013f\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\062\003\152" +
    "\004\147\057\144\060\043\063\114\065\013\071\u012f\072" +
    "\053\073\145\074\124\075\u013d\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\074\u0146\077\u0143\100\u0145\102\u0144" +
    "\155\117\001\001\000\002\001\001\000\010\074\u0146\077" +
    "\u0147\155\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u014c\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\062\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u012f\072\053\073\145\074\124\075\u014a" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\074\u0146" +
    "\077\u0143\100\u0150\102\u0144\155\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\003\152\004\147\057" +
    "\144\060\043\063\114\065\013\071\u015d\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\002\001\001\000\060\003\152\004" +
    "\147\057\144\060\043\063\114\065\013\071\u015f\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\023\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\152\004\147\044\u0169\045\342" +
    "\057\343\060\043\063\114\065\013\071\340\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\341" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\152\004\147\044\u016c\045\342\057\343\060" +
    "\043\063\114\065\013\071\340\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\341\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\u017f\004\147" +
    "\060\043\072\053\073\u0179\074\124\102\071\114\131\120" +
    "\u017b\134\u017c\152\006\153\021\155\117\161\036\164\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\u0193\004\147\114\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\u0122\004\147\072\u011b\073\u0119\074" +
    "\124\102\u011f\114\131\120\u011c\153\021\155\117\156\u0185" +
    "\160\u0118\161\u011e\162\u0120\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\152\004\147\044\u0181\045\342" +
    "\057\343\060\043\063\114\065\013\071\340\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\341" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\u0184\004\147\114\131\001\001\000\002\001" +
    "\001\000\004\062\u0186\001\001\000\002\001\001\000\064" +
    "\003\152\004\147\044\u0188\045\342\057\343\060\043\063" +
    "\114\065\013\071\340\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\341\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\074\u0146\077" +
    "\u0143\100\u018b\102\u0144\155\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\152\004\147\044\u018e\045" +
    "\342\057\343\060\043\063\114\065\013\071\340\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\341\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\152\004\147\044\u0191\045\342\057\343" +
    "\060\043\063\114\065\013\071\340\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\341\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\003\152\004\147\044\u0195\045\342\057" +
    "\343\060\043\063\114\065\013\071\340\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\341\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\074\u0146\077\u0143\100\u0198\102\u0144\155\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\152\004" +
    "\147\044\u019b\045\342\057\343\060\043\063\114\065\013" +
    "\071\340\072\053\073\145\074\124\102\071\113\065\114" +
    "\131\120\060\134\341\147\146\151\103\152\006\153\021" +
    "\155\117\157\075\161\036\164\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\003\152\004\147\044\u019e" +
    "\045\342\057\343\060\043\063\114\065\013\071\340\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\341\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\152\004\147" +
    "\057\144\060\043\063\114\065\013\071\u01ac\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\002\001\001\000\064\003\152" +
    "\004\147\012\u01af\015\115\057\144\060\043\063\114\065" +
    "\013\071\015\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\004" +
    "\013\u01b9\001\001\000\004\033\u01b0\001\001\000\004\035" +
    "\u01b1\001\001\000\002\001\001\000\064\003\152\004\147" +
    "\012\u01b8\015\115\057\144\060\043\063\114\065\013\071" +
    "\015\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\002\001\001" +
    "\000\060\003\152\004\147\057\144\060\043\063\114\065" +
    "\013\071\u01b5\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\002" +
    "\001\001\000\064\003\152\004\147\012\u01b7\015\115\057" +
    "\144\060\043\063\114\065\013\071\015\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\120\060\134\023\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\003\152\004\147\012\276\014\271\015\115\034\u01ba" +
    "\057\144\060\043\063\114\065\013\071\015\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\115\120\120\060" +
    "\132\273\133\275\134\023\140\136\141\022\142\047\147" +
    "\146\151\103\152\006\153\021\155\117\157\075\161\036" +
    "\164\050\001\001\000\004\036\u01bb\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\003\152" +
    "\004\147\057\144\060\043\063\114\065\013\071\u01bf\072" +
    "\053\073\145\074\124\102\071\113\065\114\131\120\060" +
    "\134\023\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u01c2\001\001\000\102\003\152\004" +
    "\147\012\276\014\271\015\115\057\144\060\043\063\114" +
    "\065\013\071\015\072\053\073\145\074\124\102\071\113" +
    "\065\114\131\115\120\120\060\132\273\133\275\134\023" +
    "\140\136\141\022\142\047\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\004" +
    "\013\u01c4\001\001\000\102\003\152\004\147\012\276\014" +
    "\271\015\115\057\144\060\043\063\114\065\013\071\015" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\115" +
    "\120\120\060\132\273\133\275\134\023\140\136\141\022" +
    "\142\047\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\u017f\004\147\060\043\072\053\073\u0179\074" +
    "\124\102\071\103\u01ce\104\u01cf\114\131\120\u017b\134\u01d0" +
    "\152\006\153\021\155\117\161\036\164\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\003\u017f\004\147\060\043\072\053\073" +
    "\u0179\074\124\102\071\103\u01d3\104\u01cf\114\131\120\u017b" +
    "\134\u01d0\152\006\153\021\155\117\161\036\164\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\u017f" +
    "\004\147\060\043\072\053\073\u0179\074\124\102\071\104" +
    "\u01d6\114\131\120\u017b\134\u01d0\152\006\153\021\155\117" +
    "\161\036\164\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\152\004\147\057\144\060\043\063\114" +
    "\065\013\071\u01d9\072\053\073\145\074\124\102\071\113" +
    "\065\114\131\120\060\134\023\147\146\151\103\152\006" +
    "\153\021\155\117\157\075\161\036\164\050\001\001\000" +
    "\002\001\001\000\042\003\u017f\004\147\060\043\072\053" +
    "\073\u0179\074\124\102\071\114\131\120\u017b\134\u01db\152" +
    "\006\153\021\154\u01dc\155\117\161\036\164\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\u017f\004\147\060\043\072\053\073\u0179\074\124" +
    "\102\071\114\131\120\u017b\134\u01df\152\006\153\021\155" +
    "\117\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u01e3\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\114\u01e7\001\001\000\002\001\001" +
    "\000\014\074\u0146\077\u0143\100\u0198\102\u0144\155\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\205\004\147\063\173\064\u01f1" +
    "\114\131\120\200\163\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\152\004\147" +
    "\057\144\060\043\063\114\065\013\071\u01f5\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\002\001\001\000\004\027\u01f7" +
    "\001\001\000\002\001\001\000\004\030\u020a\001\001\000" +
    "\004\030\u01fa\001\001\000\002\001\001\000\004\030\u01fc" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\152\004\147\057\144\060\043\063\114\065\013\071\u0204" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\120" +
    "\060\134\023\147\146\151\103\152\006\153\021\155\117" +
    "\157\075\161\036\164\050\001\001\000\004\031\u0200\001" +
    "\001\000\004\013\u0203\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\003\152\004\147\012\276\014\271\015" +
    "\115\057\144\060\043\063\114\065\013\071\015\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\115\120\120" +
    "\060\132\273\133\275\134\023\140\136\141\022\142\047" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\004\031\u0205\001\001\000\004" +
    "\013\u0206\001\001\000\102\003\152\004\147\012\276\014" +
    "\271\015\115\057\144\060\043\063\114\065\013\071\015" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\115" +
    "\120\120\060\132\273\133\275\134\023\140\136\141\022" +
    "\142\047\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\u020c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\152\004\147\057\144" +
    "\060\043\063\114\065\013\071\u0215\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\023\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\003\152\004\147\057\144" +
    "\060\043\063\114\065\013\071\u021c\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\023\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\205\004\147\063\173\064\u0223\114\131" +
    "\120\200\163\175\001\001\000\002\001\001\000\004\116" +
    "\u0225\001\001\000\004\177\u022d\001\001\000\014\003\253" +
    "\004\147\114\131\121\u0228\145\u0227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\253" +
    "\004\147\114\131\121\u022b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\u022f\001\001" +
    "\000\030\052\u0235\115\120\123\u0240\124\u0231\130\u0236\131" +
    "\u0239\133\u0230\141\022\142\047\150\u023f\165\u0237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\131\u024c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\122" +
    "\u0244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\205" +
    "\004\147\063\173\064\u0249\114\131\120\200\163\175\001" +
    "\001\000\002\001\001\000\020\003\205\004\147\063\173" +
    "\064\u024b\114\131\120\200\163\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0252\001" +
    "\001\000\004\114\u0253\001\001\000\004\200\u0254\001\001" +
    "\000\002\001\001\000\022\003\253\004\147\037\u0256\042" +
    "\255\043\261\114\131\121\257\146\254\001\001\000\002" +
    "\001\001\000\004\201\u0258\001\001\000\004\125\u0259\001" +
    "\001\000\002\001\001\000\004\013\u025c\001\001\000\002" +
    "\001\001\000\102\003\152\004\147\012\276\014\271\015" +
    "\115\057\144\060\043\063\114\065\013\071\015\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\115\120\120" +
    "\060\132\273\133\275\134\023\140\136\141\022\142\047" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\111\u026f\155\u025e\001\001\000\002\001\001\000" +
    "\040\003\u017f\004\147\060\043\072\053\073\u0179\074\124" +
    "\102\071\114\131\120\u017b\134\u026d\152\006\153\021\155" +
    "\117\161\036\164\050\001\001\000\060\003\152\004\147" +
    "\057\144\060\043\063\114\065\013\071\u0265\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\006\111\u0264\155\u025e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\003\152\004\147\057\144\060\043" +
    "\063\114\065\013\071\u0269\072\053\073\145\074\124\102" +
    "\071\113\065\114\131\120\060\134\023\147\146\151\103" +
    "\152\006\153\021\155\117\157\075\161\036\164\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\112\u0277\114\u0278\155\u0276\001\001\000" +
    "\004\114\u0275\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\114\u027c\001\001\000\004\173\u027d" +
    "\001\001\000\002\001\001\000\022\003\253\004\147\037" +
    "\u027f\042\255\043\261\114\131\121\257\146\254\001\001" +
    "\000\002\001\001\000\004\174\u0281\001\001\000\004\166" +
    "\u0284\001\001\000\004\013\u0285\001\001\000\002\001\001" +
    "\000\002\001\001\000\102\003\152\004\147\012\276\014" +
    "\271\015\115\057\144\060\043\063\114\065\013\071\015" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\115" +
    "\120\120\060\132\273\133\275\134\023\140\136\141\022" +
    "\142\047\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\003" +
    "\152\004\147\057\u028c\060\043\063\114\065\013\071\340" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\120" +
    "\060\134\u028b\147\146\151\103\152\006\153\021\155\117" +
    "\157\075\161\036\164\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\u017f\004\147\060\043\072\053" +
    "\073\u0179\074\124\102\071\114\131\120\u017b\134\u028e\152" +
    "\006\153\021\155\117\161\036\164\050\001\001\000\004" +
    "\021\u028f\001\001\000\002\001\001\000\042\003\u017f\004" +
    "\147\022\u0291\060\043\072\053\073\u0179\074\124\102\071" +
    "\114\131\120\u017b\134\u0292\152\006\153\021\155\117\161" +
    "\036\164\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\u017f\004\147\060\043\072\053\073\u0179\074" +
    "\124\102\071\114\131\120\u017b\134\u0294\152\006\153\021" +
    "\155\117\161\036\164\050\001\001\000\002\001\001\000" +
    "\066\003\152\004\147\012\u0297\015\115\024\u0298\057\144" +
    "\060\043\063\114\065\013\071\015\072\053\073\145\074" +
    "\124\102\071\113\065\114\131\120\060\134\023\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\004\013\u0299\001\001\000\002\001\001" +
    "\000\002\001\001\000\102\003\152\004\147\012\276\014" +
    "\271\015\115\057\144\060\043\063\114\065\013\071\015" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\115" +
    "\120\120\060\132\273\133\275\134\023\140\136\141\022" +
    "\142\047\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\u017f\004\147\022\u029d\060\043\072" +
    "\053\073\u0179\074\124\102\071\114\131\120\u017b\134\u0292" +
    "\152\006\153\021\155\117\161\036\164\050\001\001\000" +
    "\004\021\u029e\001\001\000\002\001\001\000\066\003\152" +
    "\004\147\012\u0297\015\115\024\u02a0\057\144\060\043\063" +
    "\114\065\013\071\015\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u02ae\001\001\000\004\170\u02a5\001\001\000\006" +
    "\126\u02a9\127\u02a8\001\001\000\002\001\001\000\004\010" +
    "\u02ab\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\003\152\004\147\011\u02ad\012\154\015" +
    "\115\057\144\060\043\063\114\065\013\071\015\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\115\120\120" +
    "\060\123\121\132\106\133\127\134\023\140\136\141\022" +
    "\142\047\147\146\151\103\152\006\153\021\155\117\157" +
    "\075\161\036\164\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\111\u026f\155\u025e\001" +
    "\001\000\002\001\001\000\044\003\u017f\004\147\016\u02b4" +
    "\017\u02b2\060\043\072\053\073\u0179\074\124\102\071\114" +
    "\131\120\u017b\134\u02b3\152\006\153\021\155\117\161\036" +
    "\164\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\u017f\004\147" +
    "\017\u02b7\060\043\072\053\073\u0179\074\124\102\071\114" +
    "\131\120\u017b\134\u02b3\152\006\153\021\155\117\161\036" +
    "\164\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\u02ba\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u02c4\001\001\000\102\003\152\004" +
    "\147\012\276\014\271\015\115\057\144\060\043\063\114" +
    "\065\013\071\015\072\053\073\145\074\124\102\071\113" +
    "\065\114\131\115\120\120\060\132\273\133\275\134\023" +
    "\140\136\141\022\142\047\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\074\u0146\077\u0143\100" +
    "\u018b\102\u0144\155\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\111\u026f\155\u025e\001\001\000\006\111" +
    "\u0264\155\u025e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\003\152\004\147\057\144\060\043\063\114\065\013\071" +
    "\u02d5\072\053\073\145\074\124\102\071\113\065\114\131" +
    "\120\060\134\023\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\175\u02d8\001\001\000\004\143" +
    "\u02da\001\001\000\012\003\253\004\147\114\131\121\u02e4" +
    "\001\001\000\004\167\u02db\001\001\000\004\144\u02dd\001" +
    "\001\000\002\001\001\000\004\176\u02e0\001\001\000\014" +
    "\003\253\004\147\114\131\121\u0228\145\u02df\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\u02e2\001\001" +
    "\000\030\052\u0235\115\120\123\u0240\124\u0231\130\u0236\131" +
    "\u0239\133\u0230\141\022\142\047\150\u023f\165\u02e3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\003\152\004\147\057\144\060\043\063\114\065\013" +
    "\071\u02e7\072\053\073\145\074\124\102\071\113\065\114" +
    "\131\120\060\134\023\147\146\151\103\152\006\153\021" +
    "\155\117\157\075\161\036\164\050\001\001\000\002\001" +
    "\001\000\066\003\152\004\147\012\u02eb\015\115\032\u02ea" +
    "\057\144\060\043\063\114\065\013\071\015\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\004\013\u02ec\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\003\152\004\147\012" +
    "\276\014\271\015\115\057\144\060\043\063\114\065\013" +
    "\071\015\072\053\073\145\074\124\102\071\113\065\114" +
    "\131\115\120\120\060\132\273\133\275\134\023\140\136" +
    "\141\022\142\047\147\146\151\103\152\006\153\021\155" +
    "\117\157\075\161\036\164\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\205\004\147\063\173\064\u02f5\114\131\120\200\163" +
    "\175\001\001\000\002\001\001\000\020\003\205\004\147" +
    "\063\173\064\u02f7\114\131\120\200\163\175\001\001\000" +
    "\002\001\001\000\004\013\u02f9\001\001\000\102\003\152" +
    "\004\147\012\276\014\271\015\115\057\144\060\043\063" +
    "\114\065\013\071\015\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\115\120\120\060\132\273\133\275\134" +
    "\023\140\136\141\022\142\047\147\146\151\103\152\006" +
    "\153\021\155\117\157\075\161\036\164\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\253\004\147" +
    "\114\131\121\u02fd\001\001\000\004\155\u02fe\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0301\001\001" +
    "\000\102\003\152\004\147\012\276\014\271\015\115\057" +
    "\144\060\043\063\114\065\013\071\015\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\115\120\120\060\132" +
    "\273\133\275\134\023\140\136\141\022\142\047\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\010\135\u0304\136\u0306\137\u0305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\137\u0307\001\001\000\002\001\001\000\012\003\253" +
    "\004\147\114\131\121\u0309\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u030d\001\001" +
    "\000\102\003\152\004\147\012\276\014\271\015\115\057" +
    "\144\060\043\063\114\065\013\071\015\072\053\073\145" +
    "\074\124\102\071\113\065\114\131\115\120\120\060\132" +
    "\273\133\275\134\023\140\136\141\022\142\047\147\146" +
    "\151\103\152\006\153\021\155\117\157\075\161\036\164" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\111\u026f\155\u025e\001\001\000\006\111" +
    "\u0264\155\u025e\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\152\004\147\055\u0317\056\u0318\057\144\060" +
    "\043\063\114\065\013\071\u0316\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\003\152\004\147\057\144\060\043\063\114" +
    "\065\013\071\u031a\072\053\073\145\074\124\102\071\113" +
    "\065\114\131\120\060\134\023\147\146\151\103\152\006" +
    "\153\021\155\117\157\075\161\036\164\050\001\001\000" +
    "\002\001\001\000\064\003\152\004\147\055\u031c\056\u0318" +
    "\057\144\060\043\063\114\065\013\071\u0316\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\002\001\001\000\064\003\152" +
    "\004\147\055\u031e\056\u0318\057\144\060\043\063\114\065" +
    "\013\071\u0316\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\023\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\002" +
    "\001\001\000\066\003\152\004\147\012\u0322\015\115\023" +
    "\u0320\057\144\060\043\063\114\065\013\071\015\072\053" +
    "\073\145\074\124\102\071\113\065\114\131\120\060\134" +
    "\023\147\146\151\103\152\006\153\021\155\117\157\075" +
    "\161\036\164\050\001\001\000\002\001\001\000\004\013" +
    "\u0323\001\001\000\002\001\001\000\102\003\152\004\147" +
    "\012\276\014\271\015\115\057\144\060\043\063\114\065" +
    "\013\071\015\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\115\120\120\060\132\273\133\275\134\023\140" +
    "\136\141\022\142\047\147\146\151\103\152\006\153\021" +
    "\155\117\157\075\161\036\164\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\u017f\004\147\060\043" +
    "\072\053\073\u0179\074\124\102\071\114\131\120\u017b\134" +
    "\u0327\152\006\153\021\155\117\161\036\164\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\u0332\004\147\114\131\001\001\000\002\001\001\000" +
    "\012\003\u032b\004\147\005\u0331\114\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\152\004\147\057\144\060\043" +
    "\063\114\065\013\071\u033d\072\053\073\145\074\124\102" +
    "\071\105\u033f\106\u033e\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\042\003\u017f\004\147\060\043" +
    "\072\053\073\u0179\074\124\102\071\114\131\117\u034e\120" +
    "\u017b\134\u01a2\152\006\153\021\155\117\161\036\164\050" +
    "\001\001\000\002\001\001\000\004\067\u0342\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\003\152\004\147" +
    "\057\144\060\043\063\114\065\013\071\u0344\072\053\073" +
    "\145\074\124\102\071\113\065\114\131\120\060\134\023" +
    "\147\146\151\103\152\006\153\021\155\117\157\075\161" +
    "\036\164\050\001\001\000\002\001\001\000\042\003\u017f" +
    "\004\147\060\043\072\053\073\u0179\074\124\102\071\114" +
    "\131\117\u0349\120\u017b\134\u01a2\152\006\153\021\155\117" +
    "\161\036\164\050\001\001\000\002\001\001\000\060\003" +
    "\152\004\147\057\144\060\043\063\114\065\013\071\u0347" +
    "\072\053\073\145\074\124\102\071\113\065\114\131\120" +
    "\060\134\023\147\146\151\103\152\006\153\021\155\117" +
    "\157\075\161\036\164\050\001\001\000\042\003\u017f\004" +
    "\147\060\043\072\053\073\u0179\074\124\102\071\114\131" +
    "\117\u0348\120\u017b\134\u01a2\152\006\153\021\155\117\161" +
    "\036\164\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\003\152\004\147\057\144\060" +
    "\043\063\114\065\013\071\u034c\072\053\073\145\074\124" +
    "\102\071\113\065\114\131\120\060\134\023\147\146\151" +
    "\103\152\006\153\021\155\117\157\075\161\036\164\050" +
    "\001\001\000\042\003\u017f\004\147\060\043\072\053\073" +
    "\u0179\074\124\102\071\114\131\117\u034d\120\u017b\134\u01a2" +
    "\152\006\153\021\155\117\161\036\164\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u017f\004\147\060" +
    "\043\072\053\073\u0179\074\124\102\071\114\131\120\u017b" +
    "\134\u0354\147\u0353\152\006\153\021\155\117\161\036\164" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\003\152\004\147\057\144\060\043\063" +
    "\114\065\013\071\u0356\072\053\073\145\074\124\102\071" +
    "\113\065\114\131\120\060\134\023\147\146\151\103\152" +
    "\006\153\021\155\117\157\075\161\036\164\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\u035a\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\152" +
    "\004\147\044\u035c\045\342\057\343\060\043\063\114\065" +
    "\013\071\340\072\053\073\145\074\124\102\071\113\065" +
    "\114\131\120\060\134\341\147\146\151\103\152\006\153" +
    "\021\155\117\157\075\161\036\164\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;

		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}

	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher = new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

	protected Expression createDispatch(Expression dispatcher, ObjectDimList dimList) {
		return resolveDimList(this.createDispatch(dispatcher, dimList.variable), dimList.list);
	}

	protected Expression resolveDimList(Expression variable, DimList list) {
		if (list == null) {
			return variable;
		}
		for (DimList.Element el : list) {
			if (variable.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
				variable = new ArrayVariableReference(variable.start(), el.right, ((SimpleReference) variable).getName(), el.index, el.type);
			} else {
				variable = new ReflectionArrayVariableReference(variable.start(), el.right, variable, el.index, el.type);
			}
		}
		return variable;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CompilerAstParser$actions {
  private final CompilerAstParser parser;

  /** Constructor */
  CUP$CompilerAstParser$actions(CompilerAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000000(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();

	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment) c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
		if (c instanceof Comment) {
			program.getCommentList().add((Comment) c);
		}
	}

	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerAstParser$parser.done_parsing();
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= namespace_name_list 
            {
              FullyQualifiedReference RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ?
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, listright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name_list ::= string_st 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name_list ::= namespace_name_list T_NS_SEPARATOR string_st 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (statement != null) {
		parser.addStatement(statement);
		if (parser.pendingStatement != null) {
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while (!parser.declarations.isEmpty()) {
		parser.addStatement(parser.declarations.pop());
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // namespace_statement_list ::= namespace_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	if (!(parser.declarations.peek() instanceof NamespaceDeclaration)) {
		statementList.add(parser.declarations.pop());
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // namespace_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, nameright, nameleft, nameright, name.getFullyQualifiedName(), null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$0",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_NAMESPACE namespace_name NT$0 named_namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, startright, startright, startright, NamespaceDeclaration.GLOBAL, null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$1",119, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // top_statement ::= T_NAMESPACE NT$1 namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock) decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.declarations.push(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // named_namespace_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.setEnd(endright);
	namespaceDeclaration.setBracketed(false);

	parser.currentNamespace = namespaceDeclaration;

	parser.metUnbracketedNSDecl = true;
	if (parser.metBracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // named_namespace_body ::= namespace_body 
            {
              Statement RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // namespace_body ::= T_CURLY_OPEN namespace_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.getBody().setStart(startleft);
	namespaceDeclaration.getBody().setEnd(endright);
	namespaceDeclaration.getBody().getStatements().clear();
	namespaceDeclaration.getBody().acceptStatements(statementList);
	namespaceDeclaration.setEnd(endright);

	parser.metBracketedNSDecl = true;
	if (parser.metUnbracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // namespace_body ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (NamespaceDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT =null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // use_declarations ::= use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // use_declaration ::= namespace_name 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoLabel(labelleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$2 ::= 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$2",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_CURLY_OPEN NT$2 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = (Block) parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);

	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);
	RESULT = whileStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);
	RESULT = doStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);
	RESULT = forStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	GlobalStatement global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(startleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoStatement(startleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catch",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$3 ::= 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$3",121, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$4 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$4",122, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$3 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$4 function_body 
            {
              PHPMethodDeclaration RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",94, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (PHPMethodDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$5 ::= 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft, classNameright, classNameleft, classNameright, modifier.modifier, className, null, null, new Block(classNameright, classNameright, null), modifier.doc);
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$5",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$6 ::= 
            {
              Statement RESULT =(Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.peek();
	if (superClass != null) {
		classDeclaration.setSuperClass(superClass);
	}
	if (interfaces != null) {
		classDeclaration.setInterfaceList(interfaces);
	}
	classDeclaration.setEnd(interfacesright);
	classDeclaration.getBody().setStart(interfacesright);
	classDeclaration.getBody().setEnd(interfacesright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$6",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unticked_class_declaration_statement ::= class_entry_type T_STRING NT$5 extends_from errorOrNot implements_list NT$6 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}
	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",95, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$7 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft, interfacesright, classNameleft, classNameright, className, interfaces, new Block(interfacesright, interfacesright, null), start);
	interfaceDeclaration.setRecovered(true);
	parser.declarations.push(interfaceDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$7",125, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list NT$7 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration) parser.declarations.pop();
	interfaceDeclaration.setRecovered(false);
	interfaceDeclaration.setEnd(blockEndright);
	interfaceDeclaration.getBody().setStart(blockStartleft);
	interfaceDeclaration.getBody().setEnd(blockEndright);
	RESULT = interfaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",95, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // errorOrNot ::= error 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // errorOrNot ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // class_entry_type ::= T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // class_entry_type ::= T_FINAL T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // interface_list ::= error 
            {
              List RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parameter ::= error 
            {
              FormalParameter RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // optional_class_type ::= fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(arrayleft, arrayright, "array", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // global_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // class_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference) decl[0];
		Expression initializer = (Expression) decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock) decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$8 ::= 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$8",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$9",127, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st NT$8 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$9 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	if (body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration) parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());
	if (body instanceof EmptyStatement) { /* method without body part */
		if (type instanceof ClassDeclaration) {
			ClassDeclaration classDeclaration = (ClassDeclaration) type;
			if ((classDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
				if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
				}
			} else {
				if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
				} else {
					String message = Messages.getString("AbstractMethodInAbstractClass", methodDeclaration.getName(), classDeclaration.getName());
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodInAbstractClass), message);

					message = Messages.getString("AbstractMethodsInConcreteClass", classDeclaration.getName());
					parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodsInConcreteClass), message);
				}
			}
		}
	} else if (body == null) { /* method with body part */
		if (type instanceof ClassDeclaration) {
			if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
				parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
			}
		} else if (type instanceof InterfaceDeclaration) {
			parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
		}
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // class_statement ::= error 
            {
              Object RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	// return an EmptyStatement object to make distinction between an abstract method and a method with an empty body
	RESULT = new EmptyStatement(endleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // method_body ::= 
            {
              Statement RESULT =null;
		
	parser.reportError();
	RESULT = new ASTError(0, 0);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // variable_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendPropertyModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // variable_modifiers ::= T_VAR 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock var = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // method_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // method_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendMethodModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // member_modifier ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // member_modifier ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // member_modifier ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // member_modifier ::= T_STATIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // member_modifier ::= T_ABSTRACT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // member_modifier ::= T_FINAL 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation);
	RESULT = assignment;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_AND_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_OR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MUL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_DIV, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MOD, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_PLUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_MINUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_NOT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_TILDA);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr, className);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ifTrue, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, null, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_INT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_REAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_OBJECT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_BOOL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_UNSET);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, varsList,
		new Block(blockStartleft, blockEndright, list), isReference.booleanValue());

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // lexical_vars ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new VariableReference(varleft, varright, var));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object namespace = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	if (functionName.getNamespace() != null) {
		functionName.getNamespace().setLocal(true);
	}
	RESULT = new PHPCallExpression(namespaceleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	NamespaceReference namespace = functionName.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		functionName.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	functionName.setStart(sleft);
	RESULT = new PHPCallExpression(sleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters);
	RESULT = staticMethodInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList(finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariableReference(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, finalVar);
	}
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, finalVar, parameters);
	RESULT = functionInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList(finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariableReference(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, finalVar);
	}
	RESULT = new ReflectionStaticMethodInvocation(classNameleft, endright, className, finalVar, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, className, name, parameters);
	RESULT = staticMethodInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // class_name ::= T_STATIC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FullyQualifiedReference(sleft, sright, "static", null);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // class_name ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // fully_qualified_class_name ::= namespace_name 
            {
              TypeReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // class_name_reference ::= class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000001(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // dynamic_class_name_reference ::= dynamic_class_name_variable_property 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // dynamic_class_name_variable_property ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // backticks_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // backticks_expr ::= encaps_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // common_scalar ::= T_LINE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // common_scalar ::= T_FILE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // common_scalar ::= T_DIR 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // common_scalar ::= T_NS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(labelleft, eright, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // static_scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, vname);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_SINGLE);
	RESULT = quote;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // r_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("r_variable",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // w_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("w_variable",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // rw_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("rw_variable",103, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // variable ::= variable T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);

	if (memberProperty.getClass().equals(SimpleReference.class)) {
		RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty, paramsList);
	} else {
		RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty, paramsList);
	}


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // variable ::= variable T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	if (memberProperty.list != null) {
		Expression dispatch = parser.createDispatch(ch, memberProperty);
		if (dispatch.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, null, (SimpleReference) dispatch, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, null, dispatch, paramsList);
		}
	} else {
		if (memberProperty.variable.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty.variable, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty.variable, paramsList);
		}
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // field_access_dim_list_indirect_reference ::= field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // field_access_dim_list_indirect_reference ::= simple_indirect_reference field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.refCount = ref_count;
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // field_access_dim_list ::= field_access_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_ARRAY, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // field_access_dim_list ::= field_access_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // field_access_dim_list ::= compound_variable 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression finalVar = var.variable;
	int end = var.variable.end();
	if (var.refCount > 0) {
		finalVar = parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariableReference(varleft + var.refCount - i - 1, varright, finalVar);
		}
		var.list = null;
		end = varright;
	}
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, end, className, finalVar);
	RESULT = parser.resolveDimList(staticFieldAccess, var.list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression finalVar = var.variable;
	int end = var.variable.end();
	if (var.refCount > 0) {
		finalVar = parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariableReference(varleft + var.refCount - i - 1, varright, finalVar);
		}
		var.list = null;
		end = varright;
	}
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, end, className, finalVar);
	RESULT = parser.resolveDimList(staticFieldAccess, var.list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // variable_class_name ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_class_name",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // base_variable ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // base_variable ::= static_member 
            {
              Expression RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression staticFieldAccess = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var;
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var;
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // reference_variable ::= compound_variable 
            {
              Expression RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // compound_variable ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // dim_offset ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // object_dim_list ::= variable_name 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = new ObjectDimList(var); 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // variable_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(1);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // assignment_list_element ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // assignment_list_element ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // encaps_list ::= encaps_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // encaps_var ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new ArrayVariableReference(varNameleft, cright, varName, index, ArrayVariableReference.VARIABLE_ARRAY));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new Scalar(varNameleft, varNameright, varName, Scalar.TYPE_STRING));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft, numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList(openParright, endleft);
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CompilerAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CompilerAstParser$do_action_part00000000(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CompilerAstParser$do_action_part00000001(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
