
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser.php54;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php54.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CompilerAstParser extends AbstractASTParser {

 public final Class getSymbolContainer() {
    return CompilerParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CompilerAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CompilerAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01da\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\005\000\002\007\004" +
    "\000\002\007\002\000\002\010\004\000\002\010\002\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\006\000\002\210\002\000\002\011\006\000\002\211" +
    "\002\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\127\003\000\002\127\003\000\002\130\005\000" +
    "\002\130\003\000\002\006\005\000\002\006\003\000\002" +
    "\005\003\000\002\005\005\000\002\005\004\000\002\005" +
    "\006\000\002\013\004\000\002\013\002\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\006\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\212\002\000\002\015\006\000\002\015" +
    "\011\000\002\015\014\000\002\015\007\000\002\015\011" +
    "\000\002\015\013\000\002\015\007\000\002\015\004\000" +
    "\002\015\005\000\002\015\004\000\002\015\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\003" +
    "\000\002\015\004\000\002\015\005\000\002\015\007\000" +
    "\002\015\012\000\002\015\012\000\002\015\007\000\002" +
    "\015\003\000\002\015\017\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\136\003\000\002\136\002" +
    "\000\002\137\003\000\002\137\004\000\002\140\012\000" +
    "\002\016\003\000\002\016\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\005\000\002\133\003\000\002\134" +
    "\003\000\002\053\002\000\002\053\003\000\002\213\002" +
    "\000\002\214\002\000\002\141\013\000\002\167\005\000" +
    "\002\167\003\000\002\215\002\000\002\216\002\000\002" +
    "\142\014\000\002\217\002\000\002\142\011\000\002\170" +
    "\003\000\002\170\002\000\002\166\003\000\002\166\003" +
    "\000\002\143\003\000\002\143\004\000\002\143\004\000" +
    "\002\143\003\000\002\144\002\000\002\144\004\000\002" +
    "\144\004\000\002\116\003\000\002\117\002\000\002\117" +
    "\004\000\002\145\002\000\002\145\004\000\002\146\003" +
    "\000\002\146\005\000\002\146\005\000\002\146\003\000" +
    "\002\021\002\000\002\021\004\000\002\022\003\000\002" +
    "\022\004\000\002\023\003\000\002\023\006\000\002\024" +
    "\003\000\002\024\006\000\002\025\003\000\002\025\006" +
    "\000\002\026\005\000\002\026\007\000\002\027\005\000" +
    "\002\027\006\000\002\027\006\000\002\027\007\000\002" +
    "\030\002\000\002\030\007\000\002\030\006\000\002\031" +
    "\003\000\002\031\003\000\002\032\003\000\002\032\006" +
    "\000\002\033\002\000\002\033\010\000\002\034\002\000" +
    "\002\034\011\000\002\035\002\000\002\035\004\000\002" +
    "\036\002\000\002\036\005\000\002\037\003\000\002\037" +
    "\002\000\002\042\003\000\002\042\005\000\002\042\004" +
    "\000\002\043\004\000\002\043\005\000\002\043\006\000" +
    "\002\043\007\000\002\043\003\000\002\147\002\000\002" +
    "\147\003\000\002\147\003\000\002\147\003\000\002\044" +
    "\003\000\002\044\002\000\002\045\003\000\002\045\003" +
    "\000\002\045\004\000\002\045\005\000\002\045\005\000" +
    "\002\045\006\000\002\046\005\000\002\046\003\000\002" +
    "\047\003\000\002\047\004\000\002\047\006\000\002\050" +
    "\005\000\002\050\007\000\002\050\003\000\002\050\005" +
    "\000\002\051\004\000\002\051\002\000\002\052\005\000" +
    "\002\052\004\000\002\220\002\000\002\221\002\000\002" +
    "\052\014\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\171\005\000\002\172\003\000\002\172\005" +
    "\000\002\173\003\000\002\173\005\000\002\174\002\000" +
    "\002\174\003\000\002\175\003\000\002\175\004\000\002" +
    "\176\004\000\002\176\004\000\002\177\005\000\002\200" +
    "\003\000\002\200\005\000\002\201\003\000\002\201\003" +
    "\000\002\202\005\000\002\203\006\000\002\203\005\000" +
    "\002\205\003\000\002\205\003\000\002\205\003\000\002" +
    "\204\002\000\002\204\003\000\002\126\003\000\002\126" +
    "\005\000\002\126\002\000\002\151\003\000\002\151\003" +
    "\000\002\125\002\000\002\125\003\000\002\131\003\000" +
    "\002\131\004\000\002\132\003\000\002\132\003\000\002" +
    "\132\003\000\002\132\003\000\002\132\003\000\002\132" +
    "\003\000\002\123\005\000\002\123\007\000\002\123\003" +
    "\000\002\123\005\000\002\206\005\000\002\206\005\000" +
    "\002\206\005\000\002\206\011\000\002\206\011\000\002" +
    "\056\005\000\002\056\003\000\002\124\007\000\002\124" +
    "\006\000\002\054\005\000\002\054\003\000\002\055\002" +
    "\000\002\055\003\000\002\207\005\000\002\057\010\000" +
    "\002\057\005\000\002\057\006\000\002\057\010\000\002" +
    "\057\004\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\004\000\002" +
    "\057\004\000\002\057\004\000\002\057\004\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\004" +
    "\000\002\057\004\000\002\057\004\000\002\057\004\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\003\000\002\057\003\000\002\057\007\000" +
    "\002\057\006\000\002\057\003\000\002\057\004\000\002" +
    "\057\004\000\002\057\004\000\002\057\004\000\002\057" +
    "\004\000\002\057\004\000\002\057\004\000\002\057\004" +
    "\000\002\057\004\000\002\057\003\000\002\057\006\000" +
    "\002\057\005\000\002\057\005\000\002\057\004\000\002" +
    "\057\013\000\002\057\014\000\002\040\002\000\002\040" +
    "\006\000\002\041\005\000\002\041\006\000\002\041\003" +
    "\000\002\041\004\000\002\060\006\000\002\060\010\000" +
    "\002\060\007\000\002\060\010\000\002\060\010\000\002" +
    "\060\010\000\002\060\010\000\002\060\006\000\002\060" +
    "\006\000\002\121\003\000\002\121\003\000\002\121\005" +
    "\000\002\121\004\000\002\122\003\000\002\122\005\000" +
    "\002\122\004\000\002\157\003\000\002\157\003\000\002" +
    "\161\003\000\002\163\003\000\002\163\005\000\002\163" +
    "\005\000\002\061\002\000\002\061\004\000\002\061\005" +
    "\000\002\111\002\000\002\111\003\000\002\111\003\000" +
    "\002\062\002\000\002\062\005\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\005\000\002\063\004\000\002" +
    "\064\003\000\002\064\003\000\002\064\005\000\002\064" +
    "\004\000\002\064\004\000\002\064\004\000\002\064\006" +
    "\000\002\064\005\000\002\064\003\000\002\164\005\000" +
    "\002\065\003\000\002\065\003\000\002\065\005\000\002" +
    "\065\004\000\002\065\003\000\002\065\005\000\002\065" +
    "\005\000\002\065\005\000\002\066\002\000\002\066\004" +
    "\000\002\067\002\000\002\067\003\000\002\070\007\000" +
    "\002\070\005\000\002\070\005\000\002\070\003\000\002" +
    "\071\003\000\002\071\003\000\002\150\003\000\002\120" +
    "\003\000\002\152\003\000\002\135\003\000\002\135\005" +
    "\000\002\135\005\000\002\135\011\000\002\135\011\000" +
    "\002\153\003\000\002\153\004\000\002\100\003\000\002" +
    "\100\004\000\002\077\006\000\002\077\006\000\002\077" +
    "\003\000\002\154\005\000\002\154\005\000\002\073\003" +
    "\000\002\165\003\000\002\165\003\000\002\162\003\000" +
    "\002\162\004\000\002\162\003\000\002\072\006\000\002" +
    "\072\006\000\002\072\003\000\002\074\003\000\002\074" +
    "\006\000\002\075\002\000\002\075\003\000\002\101\002" +
    "\000\002\101\006\000\002\076\006\000\002\076\006\000" +
    "\002\076\003\000\002\102\003\000\002\102\005\000\002" +
    "\103\003\000\002\103\004\000\002\104\005\000\002\104" +
    "\003\000\002\105\003\000\002\105\006\000\002\105\002" +
    "\000\002\106\002\000\002\106\004\000\002\107\007\000" +
    "\002\107\005\000\002\107\005\000\002\107\003\000\002" +
    "\107\010\000\002\107\006\000\002\107\006\000\002\107" +
    "\004\000\002\110\004\000\002\110\004\000\002\110\004" +
    "\000\002\110\003\000\002\110\004\000\002\112\003\000" +
    "\002\112\006\000\002\112\005\000\002\112\005\000\002" +
    "\112\010\000\002\112\005\000\002\112\005\000\002\113" +
    "\003\000\002\113\003\000\002\113\003\000\002\114\006" +
    "\000\002\114\006\000\002\114\004\000\002\114\004\000" +
    "\002\114\006\000\002\114\004\000\002\114\004\000\002" +
    "\155\003\000\002\155\005\000\002\160\005\000\002\160" +
    "\005\000\002\156\003\000\002\115\003\000\002\115\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03ac\000\002\001\ufffb\000\004\002\u03ae\001\002\000" +
    "\250\003\127\004\157\005\172\006\117\007\011\010\066" +
    "\011\035\013\064\015\102\020\141\021\022\022\134\023" +
    "\131\024\046\026\034\030\111\032\173\035\113\037\143" +
    "\043\057\044\133\045\077\046\116\047\150\050\151\051" +
    "\042\053\170\054\027\055\012\057\105\060\163\061\032" +
    "\062\061\063\033\064\156\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\104\070\107\106" +
    "\110\142\111\043\112\072\113\026\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\044\215\065\216\020\222\165\225" +
    "\110\226\122\227\062\230\104\232\130\234\126\001\001" +
    "\000\002\001\ufe9f\000\004\222\u03ab\001\002\000\002\001" +
    "\uffc1\000\002\001\ufea3\000\006\013\u03a0\225\u03a1\001\002" +
    "\000\004\222\u039c\001\002\000\002\001\ufedd\000\002\001" +
    "\ufecf\000\154\004\157\006\117\007\011\010\066\011\177" +
    "\013\064\020\141\035\113\046\257\060\163\061\032\071" +
    "\166\072\013\073\021\074\047\075\050\076\146\077\006" +
    "\100\036\107\255\110\142\111\043\112\072\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\002\000\070\034\u0113\123\u010b" +
    "\124\u011a\125\u0105\143\u0108\144\u039a\145\u0104\146\u0114\147" +
    "\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c" +
    "\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164" +
    "\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\002" +
    "\000\004\063\u029a\001\002\000\002\001\ufe9d\000\154\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\002\001\ufe64\000\002\001\uffb1\000\040" +
    "\067\377\127\365\130\370\131\366\132\376\133\371\134" +
    "\u0100\135\373\136\375\137\367\140\364\141\372\142\374" +
    "\174\ufe78\175\ufe78\001\ufe7a\000\002\001\uffdb\000\014\011" +
    "\177\020\u01c1\112\u038e\114\060\222\u01bf\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\004\222" +
    "\u0387\001\002\000\002\001\uffa0\000\004\222\u0376\001\002" +
    "\000\004\224\u0375\001\ufe29\000\014\013\064\017\u0373\101" +
    "\243\102\u02ad\103\u02ac\001\002\000\002\001\ufe68\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\004\104" +
    "\u0359\001\002\000\002\001\ufe9e\000\006\013\u0350\046\u01b4" +
    "\001\ufeb9\000\004\206\u034d\001\ufe67\000\004\222\u0344\001" +
    "\002\000\002\001\ufe9b\000\002\001\ufe9a\000\004\011\u0335" +
    "\001\002\000\002\001\ufe77\000\004\222\u0332\001\002\000" +
    "\156\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\151\u031f\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\ufe4e\000\020\011\177\013\064" +
    "\107\u018f\112\u018b\114\060\214\212\225\110\001\002\000" +
    "\012\104\u0139\106\ufe69\206\u013a\222\ufe72\001\ufe66\000\156" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\144\u031b\164\114\165" +
    "\073\171\161\172\016\174\055\175\167\176\030\177\144" +
    "\200\041\201\140\202\100\203\147\204\076\205\040\206" +
    "\054\210\103\214\355\222\165\225\110\226\122\227\062" +
    "\230\104\234\126\001\002\000\002\001\ufe28\000\004\222" +
    "\u0318\001\002\000\012\013\064\017\u0316\102\u02ad\103\u02ac" +
    "\001\ufea9\000\004\106\u0312\001\002\000\002\001\ufe2a\000" +
    "\004\063\u029b\001\002\000\002\001\ufea2\000\154\004\157" +
    "\006\117\007\011\010\066\011\177\013\064\020\141\035" +
    "\113\046\257\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\107\255\110" +
    "\142\111\043\112\072\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\164\114\165\073\171\161\172" +
    "\016\174\055\175\167\176\030\177\144\200\041\201\140" +
    "\202\100\203\147\204\076\205\040\206\054\210\103\214" +
    "\355\222\165\225\110\226\122\227\062\230\104\234\126" +
    "\001\002\000\002\001\uffda\000\002\001\ufed9\000\006\011" +
    "\177\114\060\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\177\013\064\020\141\035\113\046\257\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\107\255\110\142\111\043\112" +
    "\072\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\006\013\064\225\u0143\001\002\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\004\011\u0307\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\002\001\ufe8c\000\002\001\uffc8\000" +
    "\020\011\177\013\064\107\u012d\112\u0126\114\060\214\212" +
    "\225\110\001\002\000\012\013\064\017\u02ae\102\u02ad\103" +
    "\u02ac\001\002\000\004\222\u02fa\001\002\000\010\011\177" +
    "\112\346\114\060\001\ufff2\000\006\174\u02ec\175\u02ed\001" +
    "\002\000\004\104\u0144\001\ufe55\000\004\222\u02d5\001\002" +
    "\000\002\001\ufff7\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\177\013\064\020\141\035\113\046\257\060\163\061" +
    "\032\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\107\255\110\142\111\043\112\072\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\355\222\165\225\110\226" +
    "\122\227\062\230\104\234\126\001\002\000\004\151\262" +
    "\001\uffb0\000\002\001\ufea4\000\002\001\ufe88\000\002\001" +
    "\uffde\000\012\013\064\017\u02ae\102\u02ad\103\u02ac\001\002" +
    "\000\002\001\ufe60\000\004\011\u024b\001\002\000\006\122" +
    "\u0246\144\u0247\001\002\000\002\001\ufe9c\000\002\001\uffdc" +
    "\000\002\001\uff9d\000\232\003\127\004\157\005\172\006" +
    "\117\007\011\010\066\011\035\013\064\015\102\020\141" +
    "\021\022\022\134\023\131\024\046\026\034\030\111\032" +
    "\173\035\113\037\143\043\057\044\133\045\077\046\257" +
    "\050\151\051\042\053\170\054\253\055\012\057\105\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\104\070\107\255\110\142\111" +
    "\043\112\072\113\026\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\144\010\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\044\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\002\001\ufe61\000\156\004\157\006" +
    "\117\007\011\010\066\011\177\013\064\020\141\035\113" +
    "\046\257\060\163\061\032\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\107\255\110\142" +
    "\111\043\112\072\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\144\u023d\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\177\013\064\020\141\035\113\046\257\060\163\061" +
    "\032\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\107\255\110\142\111\043\112\072\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\355\222\165\225\110\226" +
    "\122\227\062\230\104\234\126\001\002\000\002\001\ufff6" +
    "\000\154\004\157\006\117\007\011\010\066\011\177\013" +
    "\064\020\141\035\113\046\257\060\163\061\032\071\166" +
    "\072\013\073\021\074\047\075\050\076\146\077\006\100" +
    "\036\107\255\110\142\111\043\112\072\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\164\114\165" +
    "\073\171\161\172\016\174\055\175\167\176\030\177\144" +
    "\200\041\201\140\202\100\203\147\204\076\205\040\206" +
    "\054\210\103\214\355\222\165\225\110\226\122\227\062" +
    "\230\104\234\126\001\002\000\002\001\ufffe\000\154\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\002\001\ufea1\000\002\001\ufe99\000\004" +
    "\222\u021b\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\002\001" +
    "\uffb2\000\002\001\ufea0\000\154\004\157\006\117\007\011" +
    "\010\066\011\177\013\064\020\141\035\113\046\257\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\107\255\110\142\111\043\112" +
    "\072\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\002\000\004" +
    "\011\u0216\001\002\000\156\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\144\u0211\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\355\222\165" +
    "\225\110\226\122\227\062\230\104\234\126\001\002\000" +
    "\002\001\ufe7b\000\004\106\u020f\001\002\000\002\001\ufe7c" +
    "\000\004\112\u020d\001\uffff\000\002\001\uff99\000\004\222" +
    "\u0208\001\ufeac\000\006\106\ufeb8\222\u0191\001\ufe8b\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\002\001\ufff8\000\004\222\u0201\001" +
    "\002\000\004\067\u01f6\001\ufedc\000\154\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\355\222" +
    "\165\225\110\226\122\227\062\230\104\234\126\001\002" +
    "\000\004\222\u01e5\001\002\000\020\011\177\013\064\107" +
    "\u018f\112\u018b\114\060\214\212\225\110\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\002\001\ufffc\000\004\222\u01c5\001" +
    "\002\000\004\222\174\001\002\000\006\011\177\114\060" +
    "\001\002\000\006\122\247\223\246\001\002\000\004\127" +
    "\200\001\002\000\002\001\ufe29\000\056\006\117\007\011" +
    "\010\066\011\177\020\141\072\206\073\021\074\047\075" +
    "\050\076\146\077\006\100\201\107\214\110\142\111\043" +
    "\112\205\114\060\164\213\165\203\206\207\214\212\234" +
    "\126\001\002\000\006\017\244\101\243\001\002\000\002" +
    "\001\ufe96\000\056\006\117\007\011\010\066\011\177\020" +
    "\141\072\206\073\021\074\047\075\050\076\146\077\006" +
    "\100\201\107\214\110\142\111\043\112\205\114\060\164" +
    "\213\165\203\206\207\214\212\234\126\001\002\000\002" +
    "\001\ufe8e\000\006\011\177\114\060\001\002\000\004\222" +
    "\236\001\002\000\056\006\117\007\011\010\066\011\177" +
    "\020\141\072\206\073\021\074\047\075\050\076\146\077" +
    "\006\100\201\107\214\110\142\111\043\112\205\114\060" +
    "\164\213\165\203\206\207\214\212\234\126\001\ufe84\000" +
    "\004\106\221\001\002\000\002\001\uff86\000\002\001\ufeb9" +
    "\000\056\006\117\007\011\010\066\011\177\020\141\072" +
    "\206\073\021\074\047\075\050\076\146\077\006\100\201" +
    "\107\214\110\142\111\043\112\205\114\060\164\213\165" +
    "\203\206\207\214\212\234\126\001\002\000\004\112\216" +
    "\001\002\000\004\106\ufeb8\001\ufe95\000\006\011\177\114" +
    "\060\001\002\000\004\106\ufeb7\001\ufe94\000\002\001\ufe92" +
    "\000\004\011\222\001\002\000\002\001\ufe8d\000\004\207" +
    "\235\001\002\000\004\122\230\001\ufe82\000\004\070\226" +
    "\001\ufe7d\000\056\006\117\007\011\010\066\011\177\020" +
    "\141\072\206\073\021\074\047\075\050\076\146\077\006" +
    "\100\201\107\214\110\142\111\043\112\205\114\060\164" +
    "\213\165\203\206\207\214\212\234\126\001\002\000\002" +
    "\001\ufe7e\000\056\006\117\007\011\010\066\011\177\020" +
    "\141\072\206\073\021\074\047\075\050\076\146\077\006" +
    "\100\201\107\214\110\142\111\043\112\205\114\060\164" +
    "\213\165\203\206\207\214\212\234\126\001\ufe81\000\002" +
    "\001\ufe83\000\004\070\233\001\ufe7f\000\056\006\117\007" +
    "\011\010\066\011\177\020\141\072\206\073\021\074\047" +
    "\075\050\076\146\077\006\100\201\107\214\110\142\111" +
    "\043\112\205\114\060\164\213\165\203\206\207\214\212" +
    "\234\126\001\002\000\002\001\ufe80\000\002\001\ufe8f\000" +
    "\056\006\117\007\011\010\066\011\177\020\141\072\206" +
    "\073\021\074\047\075\050\076\146\077\006\100\201\107" +
    "\214\110\142\111\043\112\205\114\060\164\213\165\203" +
    "\206\207\214\212\234\126\001\ufe84\000\004\223\240\001" +
    "\002\000\002\001\ufe90\000\004\106\ufeb6\001\ufe93\000\002" +
    "\001\ufe91\000\002\001\ufe97\000\004\101\245\001\002\000" +
    "\002\001\ufe98\000\234\003\127\004\157\005\172\006\117" +
    "\007\011\010\066\011\035\013\064\015\102\020\141\021" +
    "\022\022\134\023\131\024\046\026\034\030\111\032\173" +
    "\035\113\037\143\043\057\044\133\045\077\046\257\050" +
    "\151\051\042\053\170\054\253\055\012\057\105\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\104\070\107\255\110\142\111\043" +
    "\112\072\113\026\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\144\010\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\044\222\165\224\256\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\006\011\177\114\060\001\002" +
    "\000\004\127\251\001\002\000\056\006\117\007\011\010" +
    "\066\011\177\020\141\072\206\073\021\074\047\075\050" +
    "\076\146\077\006\100\201\107\214\110\142\111\043\112" +
    "\205\114\060\164\213\165\203\206\207\214\212\234\126" +
    "\001\002\000\002\001\uff85\000\006\020\u01c1\222\u01bf\001" +
    "\002\000\002\001\uffc2\000\004\112\346\001\002\000\002" +
    "\001\uffe3\000\004\151\262\001\uffb0\000\002\001\uff88\000" +
    "\004\222\263\001\002\000\002\001\uffaf\000\022\003\272" +
    "\011\177\072\264\107\271\112\275\114\060\223\uff70\233" +
    "\270\001\uff67\000\002\001\uff65\000\002\001\ufeb5\000\006" +
    "\013\335\151\334\001\002\000\004\122\332\001\uff71\000" +
    "\002\001\uff64\000\004\112\330\001\002\000\002\001\uff68" +
    "\000\002\001\uff66\000\002\001\uff6f\000\006\011\177\114" +
    "\060\001\002\000\004\223\277\001\002\000\004\054\300" +
    "\001\ufec8\000\004\222\315\001\002\000\004\104\302\001" +
    "\002\000\002\001\uffe3\000\250\003\127\004\157\005\172" +
    "\006\117\007\011\010\066\011\035\013\064\015\102\020" +
    "\141\021\022\022\134\023\131\024\046\026\034\030\111" +
    "\032\173\035\113\037\143\043\057\044\133\045\077\046" +
    "\116\050\151\051\042\053\170\054\253\055\012\057\105" +
    "\060\163\061\032\062\305\063\033\064\156\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\104\070\105\307\107\255\110\142\111\043\112\072\113" +
    "\026\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\144\010\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\044\215" +
    "\065\216\020\222\165\225\110\226\122\227\062\230\104" +
    "\232\130\234\126\001\002\000\002\001\uffe4\000\004\222" +
    "\312\001\002\000\002\001\uffe1\000\002\001\ufeca\000\002" +
    "\001\uffe0\000\002\001\uffe2\000\004\223\313\001\002\000" +
    "\004\144\314\001\002\000\002\001\uffdf\000\006\013\320" +
    "\151\316\001\002\000\004\013\326\001\002\000\006\122" +
    "\322\223\321\001\002\000\002\001\ufec4\000\002\001\ufec7" +
    "\000\006\013\324\151\323\001\002\000\004\013\325\001" +
    "\002\000\002\001\ufec6\000\002\001\ufec5\000\002\001\ufec3" +
    "\000\002\001\ufeb3\000\006\011\177\114\060\001\002\000" +
    "\002\001\ufeb4\000\024\003\272\011\177\072\264\107\271" +
    "\112\275\114\060\122\uff6d\223\uff6d\233\270\001\uff67\000" +
    "\002\001\uff6e\000\004\013\340\001\002\000\004\127\336" +
    "\001\uff6c\000\056\006\117\007\011\010\066\011\177\020" +
    "\141\072\206\073\021\074\047\075\050\076\146\077\006" +
    "\100\201\107\214\110\142\111\043\112\205\114\060\164" +
    "\213\165\203\206\207\214\212\234\126\001\002\000\002" +
    "\001\uff6a\000\004\127\341\001\uff6b\000\056\006\117\007" +
    "\011\010\066\011\177\020\141\072\206\073\021\074\047" +
    "\075\050\076\146\077\006\100\201\107\214\110\142\111" +
    "\043\112\205\114\060\164\213\165\203\206\207\214\212" +
    "\234\126\001\002\000\002\001\uff69\000\250\003\127\004" +
    "\157\005\172\006\117\007\011\010\066\011\035\013\064" +
    "\015\102\020\141\021\022\022\134\023\131\024\046\026" +
    "\034\030\111\032\173\033\344\035\113\037\143\043\057" +
    "\044\133\045\077\046\116\050\151\051\042\053\170\054" +
    "\253\055\012\057\105\060\163\061\032\062\305\063\033" +
    "\064\156\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\104\070\107\255\110\142\111\043" +
    "\112\072\113\026\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\144\010\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\044\215\065\216\020\222\165\225\110\226\122\227" +
    "\062\230\104\232\130\234\126\001\002\000\004\144\345" +
    "\001\002\000\002\001\uff87\000\006\011\177\114\060\001" +
    "\002\000\006\106\ufeb7\222\350\001\ufe8a\000\156\004\157" +
    "\006\117\007\011\010\066\011\177\013\064\020\141\035" +
    "\113\046\257\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\107\255\110" +
    "\142\111\043\112\072\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\151\352\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\uff62\000\004\223\u01be\001\002\000\020\011" +
    "\177\013\064\107\u018f\112\u018b\114\060\214\212\225\110" +
    "\001\002\000\066\034\u0113\123\u010b\124\u011a\125\u0105\143" +
    "\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119" +
    "\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161" +
    "\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110" +
    "\170\u0103\173\u0107\001\002\000\044\067\377\122\uff60\127" +
    "\365\130\370\131\366\132\376\133\371\134\u0100\135\373" +
    "\136\375\137\367\140\364\141\372\142\374\174\ufe78\175" +
    "\ufe78\223\uff60\001\ufe7a\000\004\046\u01b4\001\ufeb9\000\004" +
    "\122\360\001\uff63\000\006\122\uff61\223\uff61\001\ufe7b\000" +
    "\156\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\151\361\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\002\000\020\011\177\013\064" +
    "\107\u018f\112\u018b\114\060\214\212\225\110\001\002\000" +
    "\044\067\377\122\uff5d\127\365\130\370\131\366\132\376" +
    "\133\371\134\u0100\135\373\136\375\137\367\140\364\141" +
    "\372\142\374\174\ufe78\175\ufe78\223\uff5d\001\ufe7a\000\006" +
    "\122\uff5e\223\uff5e\001\ufe7b\000\154\004\157\006\117\007" +
    "\011\010\066\011\177\013\064\020\141\035\113\046\257" +
    "\060\163\061\032\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\107\255\110\142\111\043" +
    "\112\072\114\060\115\031\116\074\117\053\120\136\121" +
    "\115\126\067\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\355\222\165" +
    "\225\110\226\122\227\062\230\104\234\126\001\002\000" +
    "\156\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\151\u0188\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\355\222" +
    "\165\225\110\226\122\227\062\230\104\234\126\001\002" +
    "\000\154\004\157\006\117\007\011\010\066\011\177\013" +
    "\064\020\141\035\113\046\257\060\163\061\032\071\166" +
    "\072\013\073\021\074\047\075\050\076\146\077\006\100" +
    "\036\107\255\110\142\111\043\112\072\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\164\114\165" +
    "\073\171\161\172\016\174\055\175\167\176\030\177\144" +
    "\200\041\201\140\202\100\203\147\204\076\205\040\206" +
    "\054\210\103\214\355\222\165\225\110\226\122\227\062" +
    "\230\104\234\126\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\177\013\064\020\141\035\113\046\257" +
    "\060\163\061\032\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\107\255\110\142\111\043" +
    "\112\072\114\060\115\031\116\074\117\053\120\136\121" +
    "\115\126\067\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\355\222\165" +
    "\225\110\226\122\227\062\230\104\234\126\001\002\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\177\013\064\020\141\035\113\046\257\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\107\255\110\142\111\043\112" +
    "\072\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\177\013\064\020\141\035\113\046\257\060\163\061" +
    "\032\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\107\255\110\142\111\043\112\072\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\355\222\165\225\110\226" +
    "\122\227\062\230\104\234\126\001\002\000\014\011\177" +
    "\013\064\104\u0137\114\060\225\110\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\060\034\u0113\143\u0108\145\u0104\146\u0114" +
    "\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\uff06\000\154\004\157\006\117\007\011\010\066\011\177" +
    "\013\064\020\141\035\113\046\257\060\163\061\032\071" +
    "\166\072\013\073\021\074\047\075\050\076\146\077\006" +
    "\100\036\107\255\110\142\111\043\112\072\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\355\222" +
    "\165\225\110\226\122\227\062\230\104\234\126\001\002" +
    "\000\154\004\157\006\117\007\011\010\066\011\177\013" +
    "\064\020\141\035\113\046\257\060\163\061\032\071\166" +
    "\072\013\073\021\074\047\075\050\076\146\077\006\100" +
    "\036\107\255\110\142\111\043\112\072\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\164\114\165" +
    "\073\171\161\172\016\174\055\175\167\176\030\177\144" +
    "\200\041\201\140\202\100\203\147\204\076\205\040\206" +
    "\054\210\103\214\355\222\165\225\110\226\122\227\062" +
    "\230\104\234\126\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\177\013\064\020\141\035\113\046\257" +
    "\060\163\061\032\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\107\255\110\142\111\043" +
    "\112\072\114\060\115\031\116\074\117\053\120\136\121" +
    "\115\126\067\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\355\222\165" +
    "\225\110\226\122\227\062\230\104\234\126\001\002\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\177\013\064\020\141\035\113\046\257\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\107\255\110\142\111\043\112" +
    "\072\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\002\000\156" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\224\u0168\225\110\226\122\227\062" +
    "\230\104\234\126\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\177\013\064\020\141\035\113\046\257" +
    "\060\163\061\032\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\107\255\110\142\111\043" +
    "\112\072\114\060\115\031\116\074\117\053\120\136\121" +
    "\115\126\067\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\355\222\165" +
    "\225\110\226\122\227\062\230\104\234\126\001\002\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\177\013\064\020\141\035\113\046\257\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\107\255\110\142\111\043\112" +
    "\072\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\177\013\064\020\141\035\113\046\257\060\163\061" +
    "\032\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\107\255\110\142\111\043\112\072\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\355\222\165\225\110\226" +
    "\122\227\062\230\104\234\126\001\002\000\154\004\157" +
    "\006\117\007\011\010\066\011\177\013\064\020\141\035" +
    "\113\046\257\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\107\255\110" +
    "\142\111\043\112\072\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\164\114\165\073\171\161\172" +
    "\016\174\055\175\167\176\030\177\144\200\041\201\140" +
    "\202\100\203\147\204\076\205\040\206\054\210\103\214" +
    "\355\222\165\225\110\226\122\227\062\230\104\234\126" +
    "\001\002\000\154\004\157\006\117\007\011\010\066\011" +
    "\177\013\064\020\141\035\113\046\257\060\163\061\032" +
    "\071\166\072\013\073\021\074\047\075\050\076\146\077" +
    "\006\100\036\107\255\110\142\111\043\112\072\114\060" +
    "\115\031\116\074\117\053\120\136\121\115\126\067\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\355\222\165\225\110\226\122" +
    "\227\062\230\104\234\126\001\002\000\154\004\157\006" +
    "\117\007\011\010\066\011\177\013\064\020\141\035\113" +
    "\046\257\060\163\061\032\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\107\255\110\142" +
    "\111\043\112\072\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\164\114\165\073\171\161\172\016" +
    "\174\055\175\167\176\030\177\144\200\041\201\140\202" +
    "\100\203\147\204\076\205\040\206\054\210\103\214\355" +
    "\222\165\225\110\226\122\227\062\230\104\234\126\001" +
    "\002\000\020\011\177\013\064\107\u012d\112\u0126\114\060" +
    "\214\212\225\110\001\002\000\154\004\157\006\117\007" +
    "\011\010\066\011\177\013\064\020\141\035\113\046\257" +
    "\060\163\061\032\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\107\255\110\142\111\043" +
    "\112\072\114\060\115\031\116\074\117\053\120\136\121" +
    "\115\126\067\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\355\222\165" +
    "\225\110\226\122\227\062\230\104\234\126\001\002\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\177\013\064\020\141\035\113\046\257\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\107\255\110\142\111\043\112" +
    "\072\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\154\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\177\013\064\020\141\035\113\046\257\060\163\061" +
    "\032\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\107\255\110\142\111\043\112\072\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\355\222\165\225\110\226" +
    "\122\227\062\230\104\234\126\001\002\000\154\004\157" +
    "\006\117\007\011\010\066\011\177\013\064\020\141\035" +
    "\113\046\257\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\107\255\110" +
    "\142\111\043\112\072\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\164\114\165\073\171\161\172" +
    "\016\174\055\175\167\176\030\177\144\200\041\201\140" +
    "\202\100\203\147\204\076\205\040\206\054\210\103\214" +
    "\355\222\165\225\110\226\122\227\062\230\104\234\126" +
    "\001\002\000\012\034\u0113\166\u0111\167\u0110\170\u0103\001" +
    "\ufef2\000\062\034\u0113\125\u0105\143\u0108\145\u0104\146\u0114" +
    "\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\ufef7\000\034\034\u0113\156\u0118\157\u0116\160\u0109\161\u0117" +
    "\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170" +
    "\u0103\173\u0107\001\ufee5\000\024\034\u0113\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\ufee2\000\024\034\u0113\162\u0112\163\u010e\164\u011b\165\u010a" +
    "\166\u0111\167\u0110\170\u0103\173\u0107\001\ufee1\000\024\034" +
    "\u0113\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110" +
    "\170\u0103\173\u0107\001\ufee0\000\044\034\u0113\152\u0119\153" +
    "\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117" +
    "\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170" +
    "\u0103\173\u0107\001\ufef5\000\052\034\u0113\147\u0106\150\u010d" +
    "\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157" +
    "\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a" +
    "\166\u0111\167\u0110\170\u0103\173\u0107\001\ufefa\000\002\001" +
    "\ufeb1\000\004\106\u015b\001\002\000\006\011\177\114\060" +
    "\001\002\000\010\104\u0139\106\ufe69\206\u013a\001\ufe66\000" +
    "\004\106\u014e\001\ufeb2\000\002\001\ufedf\000\002\001\ufeaf" +
    "\000\006\013\064\225\u0143\001\002\000\004\067\u0131\001" +
    "\ufeb0\000\004\112\u012f\001\002\000\002\001\ufeb8\000\006" +
    "\011\177\114\060\001\002\000\002\001\ufeb7\000\014\011" +
    "\177\013\064\104\u0137\114\060\225\110\001\002\000\002" +
    "\001\ufe57\000\002\001\ufe58\000\002\001\ufeae\000\006\104" +
    "\u0147\206\u0148\001\ufead\000\006\013\064\225\u0143\001\002" +
    "\000\154\004\157\006\117\007\011\010\066\011\177\013" +
    "\064\020\141\035\113\046\257\060\163\061\032\071\166" +
    "\072\013\073\021\074\047\075\050\076\146\077\006\100" +
    "\036\107\255\110\142\111\043\112\072\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\164\114\165" +
    "\073\171\161\172\016\174\055\175\167\176\030\177\144" +
    "\200\041\201\140\202\100\203\147\204\076\205\040\206" +
    "\054\210\103\214\355\222\165\225\110\226\122\227\062" +
    "\230\104\234\126\001\002\000\006\104\u0139\206\u013a\001" +
    "\ufe72\000\154\004\157\006\117\007\011\010\066\011\177" +
    "\013\064\020\141\035\113\046\257\060\163\061\032\071" +
    "\166\072\013\073\021\074\047\075\050\076\146\077\006" +
    "\100\036\107\255\110\142\111\043\112\072\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\355\222" +
    "\165\225\110\226\122\227\062\230\104\234\126\001\ufe5e" +
    "\000\066\034\u0113\123\u010b\124\u011a\125\u0105\143\u0108\145" +
    "\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f" +
    "\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162" +
    "\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103" +
    "\173\u0107\001\ufe5d\000\004\207\u013d\001\002\000\002\001" +
    "\ufe63\000\070\034\u0113\105\u013f\123\u010b\124\u011a\125\u0105" +
    "\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152" +
    "\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109" +
    "\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167" +
    "\u0110\170\u0103\173\u0107\001\002\000\002\001\ufe62\000\070" +
    "\034\u0113\105\u0141\123\u010b\124\u011a\125\u0105\143\u0108\145" +
    "\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f" +
    "\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162" +
    "\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103" +
    "\173\u0107\001\002\000\002\001\ufe56\000\006\104\u0139\206" +
    "\u013a\001\ufe71\000\004\104\u0144\001\ufe54\000\154\004\157" +
    "\006\117\007\011\010\066\011\177\013\064\020\141\035" +
    "\113\046\257\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\107\255\110" +
    "\142\111\043\112\072\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\164\114\165\073\171\161\172" +
    "\016\174\055\175\167\176\030\177\144\200\041\201\140" +
    "\202\100\203\147\204\076\205\040\206\054\210\103\214" +
    "\355\222\165\225\110\226\122\227\062\230\104\234\126" +
    "\001\002\000\070\034\u0113\105\u0146\123\u010b\124\u011a\125" +
    "\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115" +
    "\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160" +
    "\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111" +
    "\167\u0110\170\u0103\173\u0107\001\002\000\002\001\ufe5f\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\177\013\064\020\141\035\113\046\257\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\107\255\110\142\111\043\112" +
    "\072\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\ufe5e\000\004" +
    "\207\u014a\001\002\000\002\001\ufe5a\000\070\034\u0113\105" +
    "\u014c\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114" +
    "\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\002\000\002\001\ufe59\000\006\104\u0139\206\u013a\001\ufe65" +
    "\000\006\013\064\225\110\001\002\000\006\104\u0154\206" +
    "\u0155\001\ufe70\000\006\013\064\225\u0143\001\002\000\002" +
    "\001\ufe6b\000\002\001\ufe6c\000\006\104\u0154\206\u0155\001" +
    "\ufe6f\000\154\004\157\006\117\007\011\010\066\011\177" +
    "\013\064\020\141\035\113\046\257\060\163\061\032\071" +
    "\166\072\013\073\021\074\047\075\050\076\146\077\006" +
    "\100\036\107\255\110\142\111\043\112\072\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\355\222" +
    "\165\225\110\226\122\227\062\230\104\234\126\001\ufe5e" +
    "\000\004\207\u0157\001\002\000\002\001\ufe6e\000\070\034" +
    "\u0113\105\u0159\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104" +
    "\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154" +
    "\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112" +
    "\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173" +
    "\u0107\001\002\000\002\001\ufe6d\000\002\001\ufeb6\000\006" +
    "\013\064\225\110\001\002\000\002\001\ufe6a\000\020\034" +
    "\u0113\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107" +
    "\001\ufeed\000\004\034\u0113\001\ufef0\000\004\034\u0113\001" +
    "\ufeef\000\034\034\u0113\156\u0118\157\u0116\160\u0109\161\u0117" +
    "\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170" +
    "\u0103\173\u0107\001\ufee4\000\020\034\u0113\164\u011b\165\u010a" +
    "\166\u0111\167\u0110\170\u0103\173\u0107\001\ufeec\000\046\034" +
    "\u0113\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118" +
    "\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165" +
    "\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\ufef4\000\034" +
    "\034\u0113\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163" +
    "\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107" +
    "\001\ufee6\000\064\034\u0113\124\u011a\125\u0105\143\u0108\145" +
    "\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f" +
    "\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162" +
    "\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103" +
    "\173\u0107\001\ufef9\000\012\034\u0113\166\u0111\167\u0110\170" +
    "\u0103\001\ufef1\000\024\034\u0113\162\u0112\163\u010e\164\u011b" +
    "\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\ufee3\000" +
    "\070\034\u0113\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104" +
    "\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154" +
    "\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112" +
    "\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173" +
    "\u0107\224\u016a\001\002\000\154\004\157\006\117\007\011" +
    "\010\066\011\177\013\064\020\141\035\113\046\257\060" +
    "\163\061\032\071\166\072\013\073\021\074\047\075\050" +
    "\076\146\077\006\100\036\107\255\110\142\111\043\112" +
    "\072\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\002\000\066" +
    "\034\u0113\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146" +
    "\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102" +
    "\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163" +
    "\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107" +
    "\001\ufeda\000\154\004\157\006\117\007\011\010\066\011" +
    "\177\013\064\020\141\035\113\046\257\060\163\061\032" +
    "\071\166\072\013\073\021\074\047\075\050\076\146\077" +
    "\006\100\036\107\255\110\142\111\043\112\072\114\060" +
    "\115\031\116\074\117\053\120\136\121\115\126\067\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\355\222\165\225\110\226\122" +
    "\227\062\230\104\234\126\001\002\000\066\034\u0113\123" +
    "\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106" +
    "\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156" +
    "\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b" +
    "\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\ufedb\000" +
    "\012\034\u0113\166\u0111\167\u0110\170\u0103\001\ufef3\000\050" +
    "\034\u0113\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\ufef6\000\060\034\u0113\143\u0108\145\u0104\146\u0114\147\u0106" +
    "\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156" +
    "\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b" +
    "\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\ufef8\000" +
    "\054\034\u0113\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119" +
    "\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161" +
    "\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110" +
    "\170\u0103\173\u0107\001\ufefb\000\004\034\u0113\001\ufeee\000" +
    "\034\034\u0113\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112" +
    "\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173" +
    "\u0107\001\ufee7\000\004\222\u017b\001\ufe76\000\010\104\u0147" +
    "\206\u0148\222\u0174\001\ufe75\000\156\004\157\006\117\007" +
    "\011\010\066\011\177\013\064\020\141\035\113\046\257" +
    "\060\163\061\032\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\107\255\110\142\111\043" +
    "\112\072\114\060\115\031\116\074\117\053\120\136\121" +
    "\115\126\067\151\352\164\114\165\073\171\161\172\016" +
    "\174\055\175\167\176\030\177\144\200\041\201\140\202" +
    "\100\203\147\204\076\205\040\206\054\210\103\214\355" +
    "\222\165\225\110\226\122\227\062\230\104\234\126\001" +
    "\uff62\000\004\223\u0176\001\002\000\002\001\ufe5c\000\004" +
    "\206\u0178\001\ufe73\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\ufe5e\000\004\207" +
    "\u017a\001\002\000\002\001\ufe5b\000\156\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\151\352\164\114\165\073\171\161\172" +
    "\016\174\055\175\167\176\030\177\144\200\041\201\140" +
    "\202\100\203\147\204\076\205\040\206\054\210\103\214" +
    "\355\222\165\225\110\226\122\227\062\230\104\234\126" +
    "\001\uff62\000\004\223\u017d\001\002\000\002\001\ufe5c\000" +
    "\004\206\u0178\001\ufe74\000\060\034\u0113\143\u0108\145\u0104" +
    "\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154" +
    "\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112" +
    "\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173" +
    "\u0107\001\uff08\000\060\034\u0113\143\u0108\145\u0104\146\u0114" +
    "\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\uff04\000\060\034\u0113\143\u0108\145\u0104\146\u0114\147\u0106" +
    "\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156" +
    "\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b" +
    "\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\uff00\000" +
    "\060\034\u0113\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d" +
    "\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157" +
    "\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a" +
    "\166\u0111\167\u0110\170\u0103\173\u0107\001\uff05\000\060\034" +
    "\u0113\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115" +
    "\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160" +
    "\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111" +
    "\167\u0110\170\u0103\173\u0107\001\uff01\000\060\034\u0113\143" +
    "\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119" +
    "\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161" +
    "\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110" +
    "\170\u0103\173\u0107\001\uff07\000\060\034\u0113\143\u0108\145" +
    "\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f" +
    "\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162" +
    "\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103" +
    "\173\u0107\001\uff0a\000\060\034\u0113\143\u0108\145\u0104\146" +
    "\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102" +
    "\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163" +
    "\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107" +
    "\001\uff03\000\060\034\u0113\143\u0108\145\u0104\146\u0114\147" +
    "\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c" +
    "\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164" +
    "\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\uff09" +
    "\000\022\011\177\013\064\107\u018f\112\u018b\114\060\210" +
    "\u018e\214\212\225\110\001\002\000\060\034\u0113\143\u0108" +
    "\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153" +
    "\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117" +
    "\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170" +
    "\u0103\173\u0107\001\uff0e\000\004\106\u01a8\001\002\000\006" +
    "\011\177\114\060\001\002\000\004\106\u019b\001\002\000" +
    "\004\067\377\001\uff0d\000\020\011\177\013\064\107\u012d" +
    "\112\u0126\114\060\214\212\225\110\001\002\000\004\112" +
    "\u0194\001\002\000\004\222\u0191\001\ufeb8\000\156\004\157" +
    "\006\117\007\011\010\066\011\177\013\064\020\141\035" +
    "\113\046\257\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\107\255\110" +
    "\142\111\043\112\072\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\151\352\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\uff62\000\004\223\u0193\001\002\000\002\001" +
    "\ufec2\000\006\011\177\114\060\001\002\000\004\222\350" +
    "\001\ufeb7\000\004\222\u0198\001\ufea6\000\002\001\uff0c\000" +
    "\156\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\151\352\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\uff62\000\004\223\u019a\001\002" +
    "\000\002\001\ufea5\000\014\011\177\013\064\104\u0137\114" +
    "\060\225\110\001\002\000\004\222\u01a1\001\002\000\004" +
    "\222\u019e\001\ufe6b\000\156\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\151\352\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\355\222\165" +
    "\225\110\226\122\227\062\230\104\234\126\001\uff62\000" +
    "\004\223\u01a0\001\002\000\002\001\ufebe\000\156\004\157" +
    "\006\117\007\011\010\066\011\177\013\064\020\141\035" +
    "\113\046\257\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\107\255\110" +
    "\142\111\043\112\072\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\151\352\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\uff62\000\004\223\u01a3\001\002\000\002\001" +
    "\ufebf\000\004\222\u01a5\001\ufeb6\000\156\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\151\352\164\114\165\073\171\161\172" +
    "\016\174\055\175\167\176\030\177\144\200\041\201\140" +
    "\202\100\203\147\204\076\205\040\206\054\210\103\214" +
    "\355\222\165\225\110\226\122\227\062\230\104\234\126" +
    "\001\uff62\000\004\223\u01a7\001\002\000\002\001\ufec0\000" +
    "\014\011\177\013\064\104\u0137\114\060\225\110\001\002" +
    "\000\004\222\u01ae\001\002\000\004\222\u01ab\001\ufe6a\000" +
    "\156\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\151\352\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\uff62\000\004\223\u01ad\001\002" +
    "\000\002\001\ufebd\000\156\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\151\352\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\355\222\165" +
    "\225\110\226\122\227\062\230\104\234\126\001\uff62\000" +
    "\004\223\u01b0\001\002\000\002\001\ufebc\000\060\034\u0113" +
    "\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152" +
    "\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109" +
    "\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167" +
    "\u0110\170\u0103\173\u0107\001\uff02\000\002\001\uff5c\000\004" +
    "\067\377\001\ufe79\000\004\151\262\001\uffb0\000\004\222" +
    "\u01b6\001\002\000\022\003\272\011\177\072\264\107\271" +
    "\112\275\114\060\223\uff70\233\270\001\uff67\000\004\223" +
    "\u01b8\001\002\000\004\054\300\001\ufec8\000\004\104\u01ba" +
    "\001\002\000\002\001\uffe3\000\250\003\127\004\157\005" +
    "\172\006\117\007\011\010\066\011\035\013\064\015\102" +
    "\020\141\021\022\022\134\023\131\024\046\026\034\030" +
    "\111\032\173\035\113\037\143\043\057\044\133\045\077" +
    "\046\116\050\151\051\042\053\170\054\253\055\012\057" +
    "\105\060\163\061\032\062\305\063\033\064\156\071\166" +
    "\072\013\073\021\074\047\075\050\076\146\077\006\100" +
    "\036\104\070\105\u01bc\107\255\110\142\111\043\112\072" +
    "\113\026\114\060\115\031\116\074\117\053\120\136\121" +
    "\115\126\067\144\010\164\114\165\073\171\161\172\016" +
    "\174\055\175\167\176\030\177\144\200\041\201\140\202" +
    "\100\203\147\204\076\205\040\206\054\210\103\214\044" +
    "\215\065\216\020\222\165\225\110\226\122\227\062\230" +
    "\104\232\130\234\126\001\002\000\002\001\ufec9\000\002" +
    "\001\uff5f\000\002\001\ufec1\000\004\020\u01c3\001\002\000" +
    "\004\144\u01c2\001\002\000\002\001\uffb4\000\002\001\uffc6" +
    "\000\004\223\u01c4\001\002\000\002\001\uffb3\000\154\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\002\000\070\034\u0113\123\u010b\124\u011a\125\u0105" +
    "\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152" +
    "\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109" +
    "\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167" +
    "\u0110\170\u0103\173\u0107\223\u01c7\001\002\000\234\003\127" +
    "\004\157\005\172\006\117\007\011\010\066\011\035\013" +
    "\064\015\102\020\141\021\022\022\134\023\131\024\046" +
    "\026\034\030\111\032\173\035\113\037\143\043\057\044" +
    "\133\045\077\046\257\050\151\051\042\053\170\054\253" +
    "\055\012\057\105\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\104\070" +
    "\107\255\110\142\111\043\112\072\113\026\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\144\010" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\044\222\165\224\u01c8\225" +
    "\110\226\122\227\062\230\104\234\126\001\002\000\002" +
    "\001\uffe3\000\002\001\uff79\000\006\212\u01cd\213\u01cc\001" +
    "\uff75\000\002\001\uffd8\000\232\003\127\004\157\005\172" +
    "\006\117\007\011\010\066\011\035\013\064\015\102\020" +
    "\141\021\022\022\134\023\131\024\046\026\034\030\111" +
    "\032\173\035\113\037\143\043\057\044\133\045\077\046" +
    "\257\050\151\051\042\053\170\054\253\055\012\057\105" +
    "\060\163\061\032\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\104\070\107\255\110\142" +
    "\111\043\112\072\113\026\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\144\010\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\044\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\004\222\u01ce\001\002\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\070\034\u0113\123\u010b\124\u011a\125" +
    "\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115" +
    "\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160" +
    "\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111" +
    "\167\u0110\170\u0103\173\u0107\223\u01d0\001\002\000\232\003" +
    "\127\004\157\005\172\006\117\007\011\010\066\011\035" +
    "\013\064\015\102\020\141\021\022\022\134\023\131\024" +
    "\046\026\034\030\111\032\173\035\113\037\143\043\057" +
    "\044\133\045\077\046\257\050\151\051\042\053\170\054" +
    "\253\055\012\057\105\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\104" +
    "\070\107\255\110\142\111\043\112\072\113\026\114\060" +
    "\115\031\116\074\117\053\120\136\121\115\126\067\144" +
    "\010\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\044\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\002\001" +
    "\uff78\000\002\001\uff74\000\246\003\127\004\157\005\172" +
    "\006\117\007\011\010\066\011\035\013\064\015\102\020" +
    "\141\021\022\022\134\023\131\024\046\026\034\030\111" +
    "\032\173\035\113\037\143\043\057\044\133\045\077\046" +
    "\116\050\151\051\042\053\170\054\253\055\012\057\105" +
    "\060\163\061\032\062\305\063\033\064\156\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\104\070\107\255\110\142\111\043\112\072\113\026\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\144\010\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\044\215\065\216" +
    "\020\222\165\225\110\226\122\227\062\230\104\232\130" +
    "\234\126\001\uff77\000\006\212\u01d7\213\u01d6\001\uff73\000" +
    "\004\211\u01df\001\002\000\004\224\u01dd\001\002\000\004" +
    "\222\u01d8\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\070\034" +
    "\u0113\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114" +
    "\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\223" +
    "\u01da\001\002\000\004\224\u01db\001\002\000\002\001\uffe3" +
    "\000\246\003\127\004\157\005\172\006\117\007\011\010" +
    "\066\011\035\013\064\015\102\020\141\021\022\022\134" +
    "\023\131\024\046\026\034\030\111\032\173\035\113\037" +
    "\143\043\057\044\133\045\077\046\116\050\151\051\042" +
    "\053\170\054\253\055\012\057\105\060\163\061\032\062" +
    "\305\063\033\064\156\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\104\070\107\255\110" +
    "\142\111\043\112\072\113\026\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\144\010\164\114\165" +
    "\073\171\161\172\016\174\055\175\167\176\030\177\144" +
    "\200\041\201\140\202\100\203\147\204\076\205\040\206" +
    "\054\210\103\214\044\215\065\216\020\222\165\225\110" +
    "\226\122\227\062\230\104\232\130\234\126\001\uff76\000" +
    "\002\001\uffe3\000\246\003\127\004\157\005\172\006\117" +
    "\007\011\010\066\011\035\013\064\015\102\020\141\021" +
    "\022\022\134\023\131\024\046\026\034\030\111\032\173" +
    "\035\113\037\143\043\057\044\133\045\077\046\116\050" +
    "\151\051\042\053\170\054\253\055\012\057\105\060\163" +
    "\061\032\062\305\063\033\064\156\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\104\070" +
    "\107\255\110\142\111\043\112\072\113\026\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\144\010" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\044\215\065\216\020\222" +
    "\165\225\110\226\122\227\062\230\104\232\130\234\126" +
    "\001\uff72\000\004\144\u01e0\001\002\000\002\001\uffd7\000" +
    "\070\034\u0113\123\u010b\124\u011a\125\u0105\143\u0108\144\u01e2" +
    "\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153" +
    "\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117" +
    "\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170" +
    "\u0103\173\u0107\001\002\000\002\001\uffbf\000\002\001\ufefc" +
    "\000\004\067\377\001\ufe78\000\022\011\177\013\064\071" +
    "\u01e9\107\u018f\112\u018b\114\060\214\212\225\110\001\ufe4f" +
    "\000\006\122\u01ed\223\u01ef\001\002\000\002\001\ufe52\000" +
    "\004\067\377\001\ufe51\000\004\222\u01ea\001\002\000\022" +
    "\011\177\013\064\071\u01e9\107\u018f\112\u018b\114\060\214" +
    "\212\225\110\001\ufe4f\000\006\122\u01ed\223\u01ec\001\002" +
    "\000\002\001\ufe50\000\022\011\177\013\064\071\u01e9\107" +
    "\u018f\112\u018b\114\060\214\212\225\110\001\ufe4f\000\002" +
    "\001\ufe53\000\004\127\u01f0\001\002\000\154\004\157\006" +
    "\117\007\011\010\066\011\177\013\064\020\141\035\113" +
    "\046\257\060\163\061\032\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\107\255\110\142" +
    "\111\043\112\072\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\164\114\165\073\171\161\172\016" +
    "\174\055\175\167\176\030\177\144\200\041\201\140\202" +
    "\100\203\147\204\076\205\040\206\054\210\103\214\355" +
    "\222\165\225\110\226\122\227\062\230\104\234\126\001" +
    "\002\000\060\034\u0113\143\u0108\145\u0104\146\u0114\147\u0106" +
    "\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156" +
    "\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b" +
    "\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\uff0f\000" +
    "\004\223\u01f5\001\ufedd\000\070\034\u0113\123\u010b\124\u011a" +
    "\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151" +
    "\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116" +
    "\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166" +
    "\u0111\167\u0110\170\u0103\173\u0107\223\u01f4\001\002\000\002" +
    "\001\ufede\000\002\001\uff1d\000\014\011\177\013\064\104" +
    "\u0137\114\060\225\110\001\002\000\004\222\u01fd\001\uff1c" +
    "\000\010\104\u0147\206\u0148\222\u01f9\001\uff1b\000\156\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\151\352\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\uff62\000\004\223\u01fb\001\002\000\002" +
    "\001\ufe5c\000\004\206\u0178\001\uff19\000\156\004\157\006" +
    "\117\007\011\010\066\011\177\013\064\020\141\035\113" +
    "\046\257\060\163\061\032\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\107\255\110\142" +
    "\111\043\112\072\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\151\352\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\uff62\000\004\223\u01ff\001\002\000\002\001\ufe5c" +
    "\000\004\206\u0178\001\uff1a\000\020\011\177\013\064\107" +
    "\u018f\112\u018b\114\060\214\212\225\110\001\002\000\004" +
    "\067\377\001\ufe2e\000\006\122\u0205\223\u0204\001\002\000" +
    "\002\001\ufe35\000\020\011\177\013\064\107\u018f\112\u018b" +
    "\114\060\214\212\225\110\001\002\000\004\067\377\001" +
    "\ufe2d\000\004\034\u0113\001\ufee9\000\156\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\355\222" +
    "\165\223\u020b\225\110\226\122\227\062\230\104\234\126" +
    "\001\002\000\002\001\ufed1\000\070\034\u0113\123\u010b\124" +
    "\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d" +
    "\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157" +
    "\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a" +
    "\166\u0111\167\u0110\170\u0103\173\u0107\223\u020c\001\002\000" +
    "\002\001\ufeab\000\002\001\ufeaa\000\006\011\177\114\060" +
    "\001\002\000\002\001\ufffd\000\014\011\u0210\013\064\104" +
    "\u0137\114\060\225\110\001\002\000\004\222\ufe29\001\ufe2b" +
    "\000\002\001\uffce\000\042\067\377\127\365\130\370\131" +
    "\366\132\376\133\371\134\u0100\135\373\136\375\137\367" +
    "\140\364\141\372\142\374\144\u0215\174\ufe78\175\ufe78\001" +
    "\ufe7a\000\004\144\u0214\001\ufe7b\000\002\001\uffcd\000\002" +
    "\001\uffcc\000\004\127\u0217\001\002\000\056\006\117\007" +
    "\011\010\066\011\177\020\141\072\206\073\021\074\047" +
    "\075\050\076\146\077\006\100\201\107\214\110\142\111" +
    "\043\112\205\114\060\164\213\165\203\206\207\214\212" +
    "\234\126\001\002\000\002\001\uff15\000\002\001\ufed3\000" +
    "\002\001\ufed7\000\154\004\157\006\117\007\011\010\066" +
    "\011\177\013\064\020\141\035\113\046\257\060\163\061" +
    "\032\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\107\255\110\142\111\043\112\072\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\355\222\165\225\110\226" +
    "\122\227\062\230\104\234\126\001\002\000\070\034\u0113" +
    "\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147" +
    "\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c" +
    "\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164" +
    "\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\223\u021d" +
    "\001\002\000\006\104\u021f\224\u0220\001\002\000\002\001" +
    "\uffd3\000\004\144\u0232\001\uff80\000\004\144\u0222\001\uff80" +
    "\000\010\040\u022f\041\u0225\042\u0226\001\002\000\002\001" +
    "\uff80\000\010\040\u0224\041\u0225\042\u0226\001\002\000\004" +
    "\144\u022e\001\002\000\154\004\157\006\117\007\011\010" +
    "\066\011\177\013\064\020\141\035\113\046\257\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\107\255\110\142\111\043\112\072" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\355\222\165\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\006\144" +
    "\u0229\224\u0228\001\002\000\002\001\uffe3\000\002\001\uff7d" +
    "\000\002\001\uff7c\000\246\003\127\004\157\005\172\006" +
    "\117\007\011\010\066\011\035\013\064\015\102\020\141" +
    "\021\022\022\134\023\131\024\046\026\034\030\111\032" +
    "\173\035\113\037\143\043\057\044\133\045\077\046\116" +
    "\050\151\051\042\053\170\054\253\055\012\057\105\060" +
    "\163\061\032\062\305\063\033\064\156\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\104" +
    "\070\107\255\110\142\111\043\112\072\113\026\114\060" +
    "\115\031\116\074\117\053\120\136\121\115\126\067\144" +
    "\010\164\114\165\073\171\161\172\016\174\055\175\167" +
    "\176\030\177\144\200\041\201\140\202\100\203\147\204" +
    "\076\205\040\206\054\210\103\214\044\215\065\216\020" +
    "\222\165\225\110\226\122\227\062\230\104\232\130\234" +
    "\126\001\uff7e\000\072\034\u0113\123\u010b\124\u011a\125\u0105" +
    "\143\u0108\144\u0229\145\u0104\146\u0114\147\u0106\150\u010d\151" +
    "\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116" +
    "\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166" +
    "\u0111\167\u0110\170\u0103\173\u0107\224\u0228\001\002\000\002" +
    "\001\uffe3\000\246\003\127\004\157\005\172\006\117\007" +
    "\011\010\066\011\035\013\064\015\102\020\141\021\022" +
    "\022\134\023\131\024\046\026\034\030\111\032\173\035" +
    "\113\037\143\043\057\044\133\045\077\046\116\050\151" +
    "\051\042\053\170\054\253\055\012\057\105\060\163\061" +
    "\032\062\305\063\033\064\156\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\104\070\107" +
    "\255\110\142\111\043\112\072\113\026\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\144\010\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\044\215\065\216\020\222\165" +
    "\225\110\226\122\227\062\230\104\232\130\234\126\001" +
    "\uff7f\000\002\001\uff81\000\004\144\u0230\001\002\000\002" +
    "\001\uff82\000\010\041\u0225\042\u0226\105\u0235\001\002\000" +
    "\002\001\uff80\000\010\041\u0225\042\u0226\105\u0234\001\002" +
    "\000\002\001\uff83\000\002\001\uff84\000\002\001\ufed5\000" +
    "\066\034\u0113\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104" +
    "\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154" +
    "\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112" +
    "\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173" +
    "\u0107\001\ufe30\000\066\034\u0113\123\u010b\124\u011a\125\u0105" +
    "\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152" +
    "\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109" +
    "\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167" +
    "\u0110\170\u0103\173\u0107\001\uff13\000\006\122\u023a\144\u023b" +
    "\001\002\000\154\004\157\006\117\007\011\010\066\011" +
    "\177\013\064\020\141\035\113\046\257\060\163\061\032" +
    "\071\166\072\013\073\021\074\047\075\050\076\146\077" +
    "\006\100\036\107\255\110\142\111\043\112\072\114\060" +
    "\115\031\116\074\117\053\120\136\121\115\126\067\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\355\222\165\225\110\226\122" +
    "\227\062\230\104\234\126\001\002\000\002\001\uffc9\000" +
    "\066\034\u0113\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104" +
    "\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154" +
    "\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112" +
    "\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173" +
    "\u0107\001\uff14\000\002\001\uffd0\000\070\034\u0113\123\u010b" +
    "\124\u011a\125\u0105\143\u0108\144\u023f\145\u0104\146\u0114\147" +
    "\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c" +
    "\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164" +
    "\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\002" +
    "\000\002\001\uffcf\000\004\024\u0241\001\002\000\004\222" +
    "\u0242\001\002\000\154\004\157\006\117\007\011\010\066" +
    "\011\177\013\064\020\141\035\113\046\257\060\163\061" +
    "\032\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\107\255\110\142\111\043\112\072\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\355\222\165\225\110\226" +
    "\122\227\062\230\104\234\126\001\002\000\070\034\u0113" +
    "\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147" +
    "\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c" +
    "\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164" +
    "\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\223\u0244" +
    "\001\002\000\004\144\u0245\001\002\000\002\001\uffd5\000" +
    "\004\011\u0248\001\002\000\002\001\uffef\000\004\127\u0249" +
    "\001\002\000\056\006\117\007\011\010\066\011\177\020" +
    "\141\072\206\073\021\074\047\075\050\076\146\077\006" +
    "\100\201\107\214\110\142\111\043\112\205\114\060\164" +
    "\213\165\203\206\207\214\212\234\126\001\002\000\002" +
    "\001\uff16\000\004\065\u024d\001\uff98\000\002\001\uffa6\000" +
    "\014\003\u0250\011\177\107\271\112\275\114\060\001\002" +
    "\000\004\122\u0251\001\uff97\000\002\001\uff94\000\002\001" +
    "\uff91\000\014\003\u0253\011\177\107\271\112\275\114\060" +
    "\001\002\000\002\001\uff93\000\002\001\uff92\000\004\104" +
    "\u0255\001\002\000\002\001\uff51\000\040\003\u0264\047\150" +
    "\054\u0266\056\u026a\063\033\064\156\105\u0263\113\u0262\214" +
    "\u0267\215\u025b\216\u025c\217\u0260\220\u025a\221\u0265\232\130" +
    "\001\uff2b\000\002\001\uffa1\000\004\046\u029c\001\002\000" +
    "\002\001\uff49\000\002\001\uff26\000\004\063\u029b\001\uff23" +
    "\000\004\063\u029a\001\uff22\000\002\001\uff52\000\020\046" +
    "\uff2a\214\u0267\215\u0298\216\u0299\217\u0260\220\u025a\221\u0265" +
    "\001\uff2d\000\002\001\uffa5\000\002\001\uff25\000\002\001" +
    "\uff29\000\002\001\uff4b\000\002\001\uffa2\000\002\001\uff4a" +
    "\000\002\001\uff27\000\012\011\177\107\271\112\275\114" +
    "\060\001\002\000\002\001\uff24\000\004\013\u026c\001\002" +
    "\000\006\122\u0246\144\u026b\001\002\000\002\001\uff2c\000" +
    "\002\001\uff4f\000\004\127\u0273\001\uff1f\000\006\122\u026e" +
    "\144\u026f\001\002\000\004\013\u0270\001\002\000\002\001" +
    "\uff50\000\004\127\u0271\001\uff21\000\056\006\117\007\011" +
    "\010\066\011\177\020\141\072\206\073\021\074\047\075" +
    "\050\076\146\077\006\100\201\107\214\110\142\111\043" +
    "\112\205\114\060\164\213\165\203\206\207\214\212\234" +
    "\126\001\002\000\002\001\uff20\000\056\006\117\007\011" +
    "\010\066\011\177\020\141\072\206\073\021\074\047\075" +
    "\050\076\146\077\006\100\201\107\214\110\142\111\043" +
    "\112\205\114\060\164\213\165\203\206\207\214\212\234" +
    "\126\001\002\000\002\001\uff1e\000\010\104\u0278\122\u0277" +
    "\144\u027a\001\002\000\002\001\uff47\000\012\011\177\107" +
    "\271\112\275\114\060\001\002\000\012\011\u0283\107\271" +
    "\112\275\114\060\001\uff43\000\002\001\uff48\000\002\001" +
    "\uff45\000\004\036\u028f\001\002\000\004\144\u028e\001\002" +
    "\000\012\011\u0283\107\271\112\275\114\060\001\uff42\000" +
    "\004\105\u028c\001\002\000\004\231\u0287\001\uff39\000\004" +
    "\106\u0285\001\002\000\002\001\uff41\000\004\144\u0284\001" +
    "\002\000\004\036\uff3a\001\ufe29\000\002\001\uff3f\000\004" +
    "\011\u0286\001\002\000\002\001\uff38\000\012\011\177\107" +
    "\271\112\275\114\060\001\002\000\004\122\u028a\001\uff3d" +
    "\000\002\001\uff3c\000\012\011\177\107\271\112\275\114" +
    "\060\001\002\000\002\001\uff3b\000\002\001\uff44\000\002" +
    "\001\uff40\000\002\001\uff3e\000\010\217\u0292\220\u0293\221" +
    "\u0290\001\uff32\000\002\001\uff35\000\004\011\u0295\001\002" +
    "\000\002\001\uff33\000\002\001\uff34\000\004\144\uff36\001" +
    "\uff31\000\002\001\uff37\000\002\001\uff46\000\002\001\uff28" +
    "\000\002\001\uff23\000\002\001\uff22\000\002\001\uff9e\000" +
    "\002\001\uff9f\000\004\151\262\001\uffb0\000\006\011\177" +
    "\114\060\001\002\000\002\001\uff4e\000\004\222\u02a0\001" +
    "\002\000\022\003\272\011\177\072\264\107\271\112\275" +
    "\114\060\223\uff70\233\270\001\uff67\000\004\223\u02a2\001" +
    "\002\000\002\001\uff4d\000\006\104\u02a5\144\u02a6\001\uff2e" +
    "\000\002\001\uff4c\000\002\001\uffe3\000\002\001\uff30\000" +
    "\250\003\127\004\157\005\172\006\117\007\011\010\066" +
    "\011\035\013\064\015\102\020\141\021\022\022\134\023" +
    "\131\024\046\026\034\030\111\032\173\035\113\037\143" +
    "\043\057\044\133\045\077\046\116\050\151\051\042\053" +
    "\170\054\253\055\012\057\105\060\163\061\032\062\305" +
    "\063\033\064\156\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\104\070\105\u02a8\107\255" +
    "\110\142\111\043\112\072\113\026\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\044\215\065\216\020\222\165\225" +
    "\110\226\122\227\062\230\104\232\130\234\126\001\002" +
    "\000\002\001\uff2f\000\006\067\u02bf\206\u02be\001\ufe3f\000" +
    "\016\013\064\016\u02bd\017\u02bc\102\u02ad\103\u02ac\226\u02bb" +
    "\001\002\000\002\001\ufe41\000\020\011\177\013\064\107" +
    "\u018f\112\u018b\114\060\214\212\225\110\001\002\000\156" +
    "\004\157\006\117\007\011\010\066\011\177\012\u02b1\013" +
    "\064\020\141\035\113\046\257\060\163\061\032\071\166" +
    "\072\013\073\021\074\047\075\050\076\146\077\006\100" +
    "\036\107\255\110\142\111\043\112\072\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\164\114\165" +
    "\073\171\161\172\016\174\055\175\167\176\030\177\144" +
    "\200\041\201\140\202\100\203\147\204\076\205\040\206" +
    "\054\210\103\214\355\222\165\225\110\226\122\227\062" +
    "\230\104\234\126\001\002\000\010\013\064\102\u02ad\103" +
    "\u02ac\001\002\000\002\001\ufe40\000\070\034\u0113\105\u02b7" +
    "\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147" +
    "\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c" +
    "\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164" +
    "\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\002" +
    "\000\006\105\u02b2\206\u02b3\001\002\000\002\001\ufe3a\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\070\034\u0113\123\u010b\124\u011a" +
    "\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151" +
    "\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116" +
    "\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166" +
    "\u0111\167\u0110\170\u0103\173\u0107\207\u02b5\001\002\000\004" +
    "\105\u02b6\001\002\000\002\001\ufe3b\000\002\001\ufe3c\000" +
    "\006\067\377\105\u02b9\001\002\000\002\001\ufe39\000\002" +
    "\001\ufe44\000\002\001\ufe87\000\002\001\ufe43\000\002\001" +
    "\ufe42\000\012\011\177\013\064\014\u02c4\114\060\001\002" +
    "\000\006\011\177\114\060\001\002\000\002\001\ufe3d\000" +
    "\002\001\ufe36\000\004\207\u02c5\001\002\000\002\001\ufe38" +
    "\000\002\001\ufe37\000\002\001\ufe3e\000\010\011\177\114" +
    "\060\222\263\001\002\000\002\001\uffae\000\004\222\u02c9" +
    "\001\002\000\022\003\272\011\177\072\264\107\271\112" +
    "\275\114\060\223\uff70\233\270\001\uff67\000\004\223\u02cb" +
    "\001\002\000\002\001\uffad\000\006\003\u02ce\104\u02cd\001" +
    "\002\000\002\001\uffe3\000\002\001\uffaa\000\002\001\uffac" +
    "\000\250\003\127\004\157\005\172\006\117\007\011\010" +
    "\066\011\035\013\064\015\102\020\141\021\022\022\134" +
    "\023\131\024\046\026\034\030\111\032\173\035\113\037" +
    "\143\043\057\044\133\045\077\046\116\050\151\051\042" +
    "\053\170\054\253\055\012\057\105\060\163\061\032\062" +
    "\305\063\033\064\156\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\104\070\105\u02d1\107" +
    "\255\110\142\111\043\112\072\113\026\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\144\010\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\044\215\065\216\020\222\165" +
    "\225\110\226\122\227\062\230\104\232\130\234\126\001" +
    "\002\000\002\001\uffab\000\066\034\u0113\123\u010b\124\u011a" +
    "\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151" +
    "\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116" +
    "\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166" +
    "\u0111\167\u0110\170\u0103\173\u0107\001\ufe2f\000\012\034\u0113" +
    "\166\u0111\167\u0110\170\u0103\001\ufeeb\000\002\001\uff0b\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\042\036\u02e7\067\377\127\365" +
    "\130\370\131\366\132\376\133\371\134\u0100\135\373\136" +
    "\375\137\367\140\364\141\372\142\374\174\ufe78\175\ufe78" +
    "\001\ufe7a\000\004\036\u02d8\001\ufe7b\000\020\011\177\013" +
    "\064\107\u018f\112\u018b\114\060\214\212\225\110\001\002" +
    "\000\006\067\377\070\u02db\001\uff90\000\004\223\u02e0\001" +
    "\002\000\022\011\177\013\064\107\u018f\112\u018b\114\060" +
    "\151\u02de\214\212\225\110\001\002\000\002\001\uff8f\000" +
    "\004\067\377\001\uff8e\000\020\011\177\013\064\107\u018f" +
    "\112\u018b\114\060\214\212\225\110\001\002\000\004\067" +
    "\377\001\uff8d\000\234\003\127\004\157\005\172\006\117" +
    "\007\011\010\066\011\035\013\064\015\102\020\141\021" +
    "\022\022\134\023\131\024\046\026\034\030\111\032\173" +
    "\035\113\037\143\043\057\044\133\045\077\046\257\050" +
    "\151\051\042\053\170\054\253\055\012\057\105\060\163" +
    "\061\032\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\104\070\107\255\110\142\111\043" +
    "\112\072\113\026\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\144\010\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\044\222\165\224\u02e1\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\002\001\uffe3\000\002\001\uff8a" +
    "\000\002\001\uffc3\000\250\003\127\004\157\005\172\006" +
    "\117\007\011\010\066\011\035\013\064\015\102\020\141" +
    "\021\022\022\134\023\131\024\046\026\034\030\111\031" +
    "\u02e5\032\173\035\113\037\143\043\057\044\133\045\077" +
    "\046\116\050\151\051\042\053\170\054\253\055\012\057" +
    "\105\060\163\061\032\062\305\063\033\064\156\071\166" +
    "\072\013\073\021\074\047\075\050\076\146\077\006\100" +
    "\036\104\070\107\255\110\142\111\043\112\072\113\026" +
    "\114\060\115\031\116\074\117\053\120\136\121\115\126" +
    "\067\144\010\164\114\165\073\171\161\172\016\174\055" +
    "\175\167\176\030\177\144\200\041\201\140\202\100\203" +
    "\147\204\076\205\040\206\054\210\103\214\044\215\065" +
    "\216\020\222\165\225\110\226\122\227\062\230\104\232" +
    "\130\234\126\001\002\000\004\144\u02e6\001\002\000\002" +
    "\001\uff89\000\022\011\177\013\064\107\u018f\112\u018b\114" +
    "\060\151\u02de\214\212\225\110\001\002\000\004\070\u02db" +
    "\001\uff90\000\004\223\u02ea\001\002\000\234\003\127\004" +
    "\157\005\172\006\117\007\011\010\066\011\035\013\064" +
    "\015\102\020\141\021\022\022\134\023\131\024\046\026" +
    "\034\030\111\032\173\035\113\037\143\043\057\044\133" +
    "\045\077\046\257\050\151\051\042\053\170\054\253\055" +
    "\012\057\105\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\104\070\107" +
    "\255\110\142\111\043\112\072\113\026\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\144\010\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\044\222\165\224\u02e1\225\110" +
    "\226\122\227\062\230\104\234\126\001\002\000\002\001" +
    "\uffc4\000\002\001\ufeff\000\002\001\ufefd\000\006\003\u02f1" +
    "\104\u02f2\001\002\000\002\001\ufff4\000\010\003\u02f1\104" +
    "\u02f2\144\u02f5\001\002\000\002\001\uffeb\000\002\001\ufff9" +
    "\000\002\001\uffed\000\002\001\ufff3\000\002\001\uffee\000" +
    "\252\003\127\004\157\005\172\006\117\007\011\010\066" +
    "\011\035\013\064\015\102\020\141\021\022\022\134\023" +
    "\131\024\046\026\034\030\111\032\173\035\113\037\143" +
    "\043\057\044\133\045\077\046\116\047\150\050\151\051" +
    "\042\053\170\054\027\055\012\057\105\060\163\061\032" +
    "\062\061\063\033\064\156\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\104\070\105\u02f7" +
    "\107\106\110\142\111\043\112\072\113\026\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\144\010" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\044\215\065\216\020\222" +
    "\165\225\110\226\122\227\062\230\104\232\130\234\126" +
    "\001\002\000\002\001\uffec\000\002\001\ufffa\000\002\001" +
    "\ufff1\000\020\011\177\013\064\107\u018f\112\u018b\114\060" +
    "\214\212\225\110\001\002\000\002\001\uffb7\000\004\067" +
    "\377\001\uffb5\000\006\122\u02ff\223\u02fe\001\002\000\004" +
    "\144\u0301\001\002\000\020\011\177\013\064\107\u018f\112" +
    "\u018b\114\060\214\212\225\110\001\002\000\002\001\uffb6" +
    "\000\002\001\uffc5\000\016\013\064\016\u02bd\017\u02bc\102" +
    "\u02ad\103\u02ac\230\u0303\001\002\000\002\001\ufe86\000\004" +
    "\222\u0198\001\ufea6\000\002\001\uff10\000\002\001\ufed4\000" +
    "\004\144\u0308\001\002\000\002\001\uffbe\000\002\001\ufed2" +
    "\000\010\104\u0139\206\u013a\222\ufe71\001\ufe65\000\066\034" +
    "\u0113\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114" +
    "\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\ufe32\000\012\034\u0113\166\u0111\167\u0110\170\u0103\001\ufeea" +
    "\000\006\106\ufeb6\222\u01a5\001\ufe89\000\002\001\uffe3\000" +
    "\250\003\127\004\157\005\172\006\117\007\011\010\066" +
    "\011\035\013\064\015\102\020\141\021\022\022\134\023" +
    "\131\024\046\026\034\030\111\032\173\035\113\037\143" +
    "\043\057\044\133\045\077\046\116\050\151\051\042\053" +
    "\170\054\253\055\012\057\105\060\163\061\032\062\305" +
    "\063\033\064\156\071\166\072\013\073\021\074\047\075" +
    "\050\076\146\077\006\100\036\104\070\105\u0310\107\255" +
    "\110\142\111\043\112\072\113\026\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\144\010\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\044\215\065\216\020\222\165\225" +
    "\110\226\122\227\062\230\104\232\130\234\126\001\002" +
    "\000\002\001\uffd9\000\060\034\u0113\143\u0108\145\u0104\146" +
    "\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102" +
    "\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163" +
    "\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107" +
    "\001\ufecb\000\014\011\u0313\013\064\104\u0137\114\060\225" +
    "\110\001\002\000\004\222\ufe29\001\ufe2c\000\004\227\u0317" +
    "\001\002\000\014\013\064\016\u02bd\017\u02bc\102\u02ad\103" +
    "\u02ac\001\ufea7\000\010\013\064\102\u02ad\103\u02ac\001\ufea8" +
    "\000\002\001\ufecc\000\004\223\u0319\001\002\000\004\144" +
    "\u031a\001\002\000\002\001\ufff5\000\002\001\uffd2\000\070" +
    "\034\u0113\123\u010b\124\u011a\125\u0105\143\u0108\144\u031d\145" +
    "\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f" +
    "\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162" +
    "\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103" +
    "\173\u0107\001\002\000\002\001\uffd1\000\002\001\ufefe\000" +
    "\020\011\177\013\064\107\u018f\112\u018b\114\060\214\212" +
    "\225\110\001\002\000\070\034\u0113\070\u032d\123\u010b\124" +
    "\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d" +
    "\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157" +
    "\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a" +
    "\166\u0111\167\u0110\170\u0103\173\u0107\001\ufe49\000\004\122" +
    "\u0324\001\ufe82\000\004\207\u0323\001\002\000\002\001\ufecd" +
    "\000\156\004\157\006\117\007\011\010\066\011\177\013" +
    "\064\020\141\035\113\046\257\060\163\061\032\071\166" +
    "\072\013\073\021\074\047\075\050\076\146\077\006\100" +
    "\036\107\255\110\142\111\043\112\072\114\060\115\031" +
    "\116\074\117\053\120\136\121\115\126\067\151\u0326\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\355\222\165\225\110\226\122" +
    "\227\062\230\104\234\126\001\ufe81\000\002\001\ufe4d\000" +
    "\020\011\177\013\064\107\u018f\112\u018b\114\060\214\212" +
    "\225\110\001\002\000\070\034\u0113\070\u0328\123\u010b\124" +
    "\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d" +
    "\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157" +
    "\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a" +
    "\166\u0111\167\u0110\170\u0103\173\u0107\001\ufe4b\000\156\004" +
    "\157\006\117\007\011\010\066\011\177\013\064\020\141" +
    "\035\113\046\257\060\163\061\032\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\107\255" +
    "\110\142\111\043\112\072\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\151\u0329\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\002\000\020\011\177\013\064\107\u018f" +
    "\112\u018b\114\060\214\212\225\110\001\002\000\066\034" +
    "\u0113\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114" +
    "\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\ufe4c\000\002\001\ufe48\000\002\001\ufe47\000\156\004\157" +
    "\006\117\007\011\010\066\011\177\013\064\020\141\035" +
    "\113\046\257\060\163\061\032\071\166\072\013\073\021" +
    "\074\047\075\050\076\146\077\006\100\036\107\255\110" +
    "\142\111\043\112\072\114\060\115\031\116\074\117\053" +
    "\120\136\121\115\126\067\151\u032e\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\020\011\177\013\064\107\u018f\112" +
    "\u018b\114\060\214\212\225\110\001\002\000\066\034\u0113" +
    "\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147" +
    "\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c" +
    "\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164" +
    "\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\ufe4a" +
    "\000\002\001\ufe46\000\002\001\ufe45\000\154\004\157\006" +
    "\117\007\011\010\066\011\177\013\064\020\141\035\113" +
    "\046\257\060\163\061\032\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\107\255\110\142" +
    "\111\043\112\072\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\164\114\165\073\171\161\172\016" +
    "\174\055\175\167\176\030\177\144\200\041\201\140\202" +
    "\100\203\147\204\076\205\040\206\054\210\103\214\355" +
    "\222\165\225\110\226\122\227\062\230\104\234\126\001" +
    "\002\000\070\034\u0113\123\u010b\124\u011a\125\u0105\143\u0108" +
    "\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115\152\u0119\153" +
    "\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160\u0109\161\u0117" +
    "\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111\167\u0110\170" +
    "\u0103\173\u0107\223\u0334\001\002\000\002\001\ufe31\000\002" +
    "\001\uffa9\000\004\065\u0337\001\uff9c\000\014\003\u0343\011" +
    "\177\107\271\112\275\114\060\001\002\000\004\003\u033a" +
    "\001\uffa3\000\004\066\u033c\001\uff96\000\002\001\uffa4\000" +
    "\002\001\uffa8\000\014\003\u0250\011\177\107\271\112\275" +
    "\114\060\001\002\000\004\122\u0251\001\uff95\000\004\104" +
    "\u033f\001\002\000\002\001\uff51\000\040\003\u0264\047\150" +
    "\054\u0266\056\u026a\063\033\064\156\105\u0263\113\u0262\214" +
    "\u0267\215\u025b\216\u025c\217\u0260\220\u025a\221\u0265\232\130" +
    "\001\uff2b\000\002\001\uffa7\000\002\001\uff9b\000\002\001" +
    "\uff9a\000\154\004\157\006\117\007\011\010\066\011\177" +
    "\013\064\020\141\035\113\046\257\060\163\061\032\071" +
    "\166\072\013\073\021\074\047\075\050\076\146\077\006" +
    "\100\036\107\255\110\142\111\043\112\072\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\164\114" +
    "\165\073\171\161\172\016\174\055\175\167\176\030\177" +
    "\144\200\041\201\140\202\100\203\147\204\076\205\040" +
    "\206\054\210\103\214\355\222\165\225\110\226\122\227" +
    "\062\230\104\234\126\001\002\000\070\034\u0113\123\u010b" +
    "\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150" +
    "\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118" +
    "\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165" +
    "\u010a\166\u0111\167\u0110\170\u0103\173\u0107\223\u0346\001\002" +
    "\000\234\003\127\004\157\005\172\006\117\007\011\010" +
    "\066\011\035\013\064\015\102\020\141\021\022\022\134" +
    "\023\131\024\046\026\034\030\111\032\173\035\113\037" +
    "\143\043\057\044\133\045\077\046\257\050\151\051\042" +
    "\053\170\054\253\055\012\057\105\060\163\061\032\071" +
    "\166\072\013\073\021\074\047\075\050\076\146\077\006" +
    "\100\036\104\070\107\255\110\142\111\043\112\072\113" +
    "\026\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\144\010\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\044\222" +
    "\165\224\u0347\225\110\226\122\227\062\230\104\234\126" +
    "\001\002\000\002\001\uffe3\000\002\001\uffd6\000\002\001" +
    "\uff7b\000\250\003\127\004\157\005\172\006\117\007\011" +
    "\010\066\011\035\013\064\015\102\020\141\021\022\022" +
    "\134\023\131\024\046\025\u034b\026\034\030\111\032\173" +
    "\035\113\037\143\043\057\044\133\045\077\046\116\050" +
    "\151\051\042\053\170\054\253\055\012\057\105\060\163" +
    "\061\032\062\305\063\033\064\156\071\166\072\013\073" +
    "\021\074\047\075\050\076\146\077\006\100\036\104\070" +
    "\107\255\110\142\111\043\112\072\113\026\114\060\115" +
    "\031\116\074\117\053\120\136\121\115\126\067\144\010" +
    "\164\114\165\073\171\161\172\016\174\055\175\167\176" +
    "\030\177\144\200\041\201\140\202\100\203\147\204\076" +
    "\205\040\206\054\210\103\214\044\215\065\216\020\222" +
    "\165\225\110\226\122\227\062\230\104\232\130\234\126" +
    "\001\002\000\004\144\u034c\001\002\000\002\001\uff7a\000" +
    "\154\004\157\006\117\007\011\010\066\011\177\013\064" +
    "\020\141\035\113\046\257\060\163\061\032\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\107\255\110\142\111\043\112\072\114\060\115\031\116" +
    "\074\117\053\120\136\121\115\126\067\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\355\222\165\225\110\226\122\227\062\230" +
    "\104\234\126\001\ufe5e\000\004\207\u034f\001\002\000\002" +
    "\001\ufeba\000\004\127\u0357\001\uff54\000\006\122\u0352\144" +
    "\u0353\001\002\000\004\013\u0354\001\002\000\002\001\uffca" +
    "\000\004\127\u0355\001\uff56\000\056\006\117\007\011\010" +
    "\066\011\177\020\141\072\206\073\021\074\047\075\050" +
    "\076\146\077\006\100\201\107\214\110\142\111\043\112" +
    "\205\114\060\164\213\165\203\206\207\214\212\234\126" +
    "\001\002\000\002\001\uff55\000\056\006\117\007\011\010" +
    "\066\011\177\020\141\072\206\073\021\074\047\075\050" +
    "\076\146\077\006\100\201\107\214\110\142\111\043\112" +
    "\205\114\060\164\213\165\203\206\207\214\212\234\126" +
    "\001\002\000\002\001\uff53\000\002\001\uffe3\000\250\003" +
    "\127\004\157\005\172\006\117\007\011\010\066\011\035" +
    "\013\064\015\102\020\141\021\022\022\134\023\131\024" +
    "\046\026\034\030\111\032\173\035\113\037\143\043\057" +
    "\044\133\045\077\046\116\050\151\051\042\053\170\054" +
    "\253\055\012\057\105\060\163\061\032\062\305\063\033" +
    "\064\156\071\166\072\013\073\021\074\047\075\050\076" +
    "\146\077\006\100\036\104\070\105\u035b\107\255\110\142" +
    "\111\043\112\072\113\026\114\060\115\031\116\074\117" +
    "\053\120\136\121\115\126\067\144\010\164\114\165\073" +
    "\171\161\172\016\174\055\175\167\176\030\177\144\200" +
    "\041\201\140\202\100\203\147\204\076\205\040\206\054" +
    "\210\103\214\044\215\065\216\020\222\165\225\110\226" +
    "\122\227\062\230\104\232\130\234\126\001\002\000\004" +
    "\052\u035c\001\002\000\004\222\u035d\001\002\000\012\011" +
    "\177\107\271\112\275\114\060\001\002\000\004\013\064" +
    "\001\002\000\004\223\u0360\001\002\000\004\104\u0361\001" +
    "\002\000\002\001\uffe3\000\250\003\127\004\157\005\172" +
    "\006\117\007\011\010\066\011\035\013\064\015\102\020" +
    "\141\021\022\022\134\023\131\024\046\026\034\030\111" +
    "\032\173\035\113\037\143\043\057\044\133\045\077\046" +
    "\116\050\151\051\042\053\170\054\253\055\012\057\105" +
    "\060\163\061\032\062\305\063\033\064\156\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\104\070\105\u0363\107\255\110\142\111\043\112\072\113" +
    "\026\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\144\010\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\044\215" +
    "\065\216\020\222\165\225\110\226\122\227\062\230\104" +
    "\232\130\234\126\001\002\000\004\052\u0364\001\uffbb\000" +
    "\004\222\u0369\001\002\000\002\001\uffc0\000\002\001\uffba" +
    "\000\004\052\u0364\001\uffbc\000\002\001\uffb9\000\012\011" +
    "\177\107\271\112\275\114\060\001\002\000\004\013\u036b" +
    "\001\002\000\004\223\u036c\001\002\000\004\104\u036d\001" +
    "\002\000\002\001\uffe3\000\250\003\127\004\157\005\172" +
    "\006\117\007\011\010\066\011\035\013\064\015\102\020" +
    "\141\021\022\022\134\023\131\024\046\026\034\030\111" +
    "\032\173\035\113\037\143\043\057\044\133\045\077\046" +
    "\116\050\151\051\042\053\170\054\253\055\012\057\105" +
    "\060\163\061\032\062\305\063\033\064\156\071\166\072" +
    "\013\073\021\074\047\075\050\076\146\077\006\100\036" +
    "\104\070\105\u036f\107\255\110\142\111\043\112\072\113" +
    "\026\114\060\115\031\116\074\117\053\120\136\121\115" +
    "\126\067\144\010\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\044\215" +
    "\065\216\020\222\165\225\110\226\122\227\062\230\104" +
    "\232\130\234\126\001\002\000\002\001\uffb8\000\002\001" +
    "\ufed6\000\002\001\ufed0\000\016\013\064\016\u02bd\017\u02bc" +
    "\101\u0374\102\u02ad\103\u02ac\001\002\000\012\013\064\101" +
    "\245\102\u02ad\103\u02ac\001\002\000\002\001\ufe85\000\002" +
    "\001\uffdd\000\154\004\157\006\117\007\011\010\066\011" +
    "\177\013\064\020\141\035\113\046\257\060\163\061\032" +
    "\071\166\072\013\073\021\074\047\075\050\076\146\077" +
    "\006\100\036\107\255\110\142\111\043\112\072\114\060" +
    "\115\031\116\074\117\053\120\136\121\115\126\067\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\355\222\165\225\110\226\122" +
    "\227\062\230\104\234\126\001\uff12\000\066\034\u0113\123" +
    "\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147\u0106" +
    "\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c\156" +
    "\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164\u011b" +
    "\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\uff17\000" +
    "\004\144\u037c\001\002\000\004\122\u037a\001\uff11\000\154" +
    "\004\157\006\117\007\011\010\066\011\177\013\064\020" +
    "\141\035\113\046\257\060\163\061\032\071\166\072\013" +
    "\073\021\074\047\075\050\076\146\077\006\100\036\107" +
    "\255\110\142\111\043\112\072\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\164\114\165\073\171" +
    "\161\172\016\174\055\175\167\176\030\177\144\200\041" +
    "\201\140\202\100\203\147\204\076\205\040\206\054\210" +
    "\103\214\355\222\165\225\110\226\122\227\062\230\104" +
    "\234\126\001\002\000\066\034\u0113\123\u010b\124\u011a\125" +
    "\u0105\143\u0108\145\u0104\146\u0114\147\u0106\150\u010d\151\u0115" +
    "\152\u0119\153\u010f\154\u0102\155\u010c\156\u0118\157\u0116\160" +
    "\u0109\161\u0117\162\u0112\163\u010e\164\u011b\165\u010a\166\u0111" +
    "\167\u0110\170\u0103\173\u0107\001\uff18\000\154\004\157\006" +
    "\117\007\011\010\066\011\177\013\064\020\141\035\113" +
    "\046\257\060\163\061\032\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\107\255\110\142" +
    "\111\043\112\072\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\164\114\165\073\171\161\172\016" +
    "\174\055\175\167\176\030\177\144\200\041\201\140\202" +
    "\100\203\147\204\076\205\040\206\054\210\103\214\355" +
    "\222\165\225\110\226\122\227\062\230\104\234\126\001" +
    "\uff12\000\004\144\u037e\001\002\000\154\004\157\006\117" +
    "\007\011\010\066\011\177\013\064\020\141\035\113\046" +
    "\257\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\107\255\110\142\111" +
    "\043\112\072\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\164\114\165\073\171\161\172\016\174" +
    "\055\175\167\176\030\177\144\200\041\201\140\202\100" +
    "\203\147\204\076\205\040\206\054\210\103\214\355\222" +
    "\165\225\110\226\122\227\062\230\104\234\126\001\uff12" +
    "\000\004\223\u0380\001\002\000\234\003\127\004\157\005" +
    "\172\006\117\007\011\010\066\011\035\013\064\015\102" +
    "\020\141\021\022\022\134\023\131\024\046\026\034\030" +
    "\111\032\173\035\113\037\143\043\057\044\133\045\077" +
    "\046\257\050\151\051\042\053\170\054\253\055\012\057" +
    "\105\060\163\061\032\071\166\072\013\073\021\074\047" +
    "\075\050\076\146\077\006\100\036\104\070\107\255\110" +
    "\142\111\043\112\072\113\026\114\060\115\031\116\074" +
    "\117\053\120\136\121\115\126\067\144\010\164\114\165" +
    "\073\171\161\172\016\174\055\175\167\176\030\177\144" +
    "\200\041\201\140\202\100\203\147\204\076\205\040\206" +
    "\054\210\103\214\044\222\165\224\u0382\225\110\226\122" +
    "\227\062\230\104\234\126\001\002\000\002\001\uffd4\000" +
    "\002\001\uffe3\000\002\001\uff8c\000\250\003\127\004\157" +
    "\005\172\006\117\007\011\010\066\011\035\013\064\015" +
    "\102\020\141\021\022\022\134\023\131\024\046\026\034" +
    "\027\u0385\030\111\032\173\035\113\037\143\043\057\044" +
    "\133\045\077\046\116\050\151\051\042\053\170\054\253" +
    "\055\012\057\105\060\163\061\032\062\305\063\033\064" +
    "\156\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\104\070\107\255\110\142\111\043\112" +
    "\072\113\026\114\060\115\031\116\074\117\053\120\136" +
    "\121\115\126\067\144\010\164\114\165\073\171\161\172" +
    "\016\174\055\175\167\176\030\177\144\200\041\201\140" +
    "\202\100\203\147\204\076\205\040\206\054\210\103\214" +
    "\044\215\065\216\020\222\165\225\110\226\122\227\062" +
    "\230\104\232\130\234\126\001\002\000\004\144\u0386\001" +
    "\002\000\002\001\uff8b\000\020\011\177\013\064\107\u018f" +
    "\112\u018b\114\060\214\212\225\110\001\002\000\006\067" +
    "\377\223\u0389\001\002\000\002\001\ufe34\000\066\034\u0113" +
    "\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114\147" +
    "\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155\u010c" +
    "\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e\164" +
    "\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001\ufe33" +
    "\000\002\001\ufed8\000\004\036\u0396\001\uffe8\000\002\001" +
    "\uffe9\000\006\011\177\114\060\001\002\000\006\122\u0390" +
    "\144\u0391\001\002\000\010\011\177\112\u038e\114\060\001" +
    "\002\000\002\001\ufff0\000\002\001\uffea\000\004\036\u0394" +
    "\001\uffe6\000\004\011\u0395\001\002\000\002\001\uffe5\000" +
    "\004\011\u0397\001\002\000\002\001\uffe7\000\006\122\u023a" +
    "\144\u0399\001\002\000\002\001\uffbd\000\002\001\uffc7\000" +
    "\002\001\ufee8\000\156\004\157\006\117\007\011\010\066" +
    "\011\177\013\064\020\141\035\113\046\257\060\163\061" +
    "\032\071\166\072\013\073\021\074\047\075\050\076\146" +
    "\077\006\100\036\107\255\110\142\111\043\112\072\114" +
    "\060\115\031\116\074\117\053\120\136\121\115\126\067" +
    "\151\u031f\164\114\165\073\171\161\172\016\174\055\175" +
    "\167\176\030\177\144\200\041\201\140\202\100\203\147" +
    "\204\076\205\040\206\054\210\103\214\355\222\165\225" +
    "\110\226\122\227\062\230\104\234\126\001\ufe4e\000\004" +
    "\223\u039e\001\002\000\002\001\ufece\000\006\122\u03a8\144" +
    "\u03a9\001\002\000\002\001\uff59\000\022\011\177\013\064" +
    "\104\u03a5\107\u018f\112\u018b\114\060\214\212\225\110\001" +
    "\002\000\002\001\uff5a\000\002\001\uff58\000\004\067\377" +
    "\001\ufe7a\000\154\004\157\006\117\007\011\010\066\011" +
    "\177\013\064\020\141\035\113\046\257\060\163\061\032" +
    "\071\166\072\013\073\021\074\047\075\050\076\146\077" +
    "\006\100\036\107\255\110\142\111\043\112\072\114\060" +
    "\115\031\116\074\117\053\120\136\121\115\126\067\164" +
    "\114\165\073\171\161\172\016\174\055\175\167\176\030" +
    "\177\144\200\041\201\140\202\100\203\147\204\076\205" +
    "\040\206\054\210\103\214\355\222\165\225\110\226\122" +
    "\227\062\230\104\234\126\001\002\000\070\034\u0113\105" +
    "\u03a7\123\u010b\124\u011a\125\u0105\143\u0108\145\u0104\146\u0114" +
    "\147\u0106\150\u010d\151\u0115\152\u0119\153\u010f\154\u0102\155" +
    "\u010c\156\u0118\157\u0116\160\u0109\161\u0117\162\u0112\163\u010e" +
    "\164\u011b\165\u010a\166\u0111\167\u0110\170\u0103\173\u0107\001" +
    "\002\000\002\001\uff57\000\006\013\u03a0\225\u03a1\001\002" +
    "\000\002\001\uffcb\000\002\001\uff5b\000\156\004\157\006" +
    "\117\007\011\010\066\011\177\013\064\020\141\035\113" +
    "\046\257\060\163\061\032\071\166\072\013\073\021\074" +
    "\047\075\050\076\146\077\006\100\036\107\255\110\142" +
    "\111\043\112\072\114\060\115\031\116\074\117\053\120" +
    "\136\121\115\126\067\151\352\164\114\165\073\171\161" +
    "\172\016\174\055\175\167\176\030\177\144\200\041\201" +
    "\140\202\100\203\147\204\076\205\040\206\054\210\103" +
    "\214\355\222\165\225\110\226\122\227\062\230\104\234" +
    "\126\001\uff62\000\004\223\u03ad\001\002\000\002\001\ufebb" +
    "\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03ac\000\006\002\003\007\004\001\001\000\002\001" +
    "\001\000\110\003\157\004\154\011\170\012\161\015\120" +
    "\057\151\060\044\063\117\065\014\071\016\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\116\123\121\062" +
    "\124\124\133\111\134\134\135\024\141\144\142\023\143" +
    "\050\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\046\u039e\047\u03a1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u039a\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\066\003\157\004" +
    "\154\054\u0397\057\151\060\044\063\117\065\014\071\u0237" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\024\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\u038b\004\154\005\u038c\006\u038e\020" +
    "\u01bf\115\136\001\001\000\064\003\157\004\154\057\151" +
    "\060\044\063\117\065\014\071\u038a\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\121\062\135\024\150\153" +
    "\152\106\153\006\154\022\156\122\160\100\162\036\165" +
    "\051\206\163\207\013\001\001\000\064\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u0389\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\110\u0371\112\u02aa\156\u02a8\001\001\000\002\001\001" +
    "\000\064\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u0370\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\064\003\157\004\154\057\151\060\044\063" +
    "\117\065\014\071\u036f\072\055\073\152\074\131\103\074" +
    "\114\070\115\136\121\062\135\024\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\u0350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u031f\072\055\073" +
    "\152\074\131\103\074\106\u0321\107\u0320\114\070\115\136" +
    "\121\062\135\024\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\042\003\u018f\004\154\060\044\072\055\073\u0189\074" +
    "\131\103\074\115\136\121\u018b\135\u01e3\152\u031d\153\006" +
    "\154\022\156\122\162\036\165\051\001\001\000\002\001" +
    "\001\000\064\003\157\004\154\057\151\060\044\063\117" +
    "\065\014\071\u031b\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\024\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\110\u0314\111\u0313\112\u02aa\156\u02a8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u0310\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\004\212\u030d\001\001\000\002\001\001\000" +
    "\010\003\u030c\004\154\115\136\001\001\000\064\003\157" +
    "\004\154\057\151\060\044\063\117\065\014\071\u030b\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\064" +
    "\003\157\004\154\057\151\060\044\063\117\065\014\071" +
    "\u030a\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\121\062\135\024\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\010\072\u0309\074\131\156\122\001\001\000\064\003" +
    "\157\004\154\057\151\060\044\063\117\065\014\071\u0308" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\024\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\002\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u0305\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\u012d\004\154\072\u0126\073\u0124\074\131\103" +
    "\u012a\115\136\121\u0127\154\022\156\122\157\u0303\161\u0123" +
    "\162\u0129\163\u012b\001\001\000\010\110\u0301\112\u02aa\156" +
    "\u02a8\001\001\000\002\001\001\000\012\003\u02ee\004\154" +
    "\115\136\211\u02ed\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\157" +
    "\004\154\057\151\060\044\063\117\065\014\071\u02d3\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\064" +
    "\003\157\004\154\057\151\060\044\063\117\065\014\071" +
    "\u02d2\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\121\062\135\024\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\064\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u02d1\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\004\053\u02c5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\110\u02a9\112\u02aa" +
    "\156\u02a8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\003\157\004\154\012\u023f\015\120\057" +
    "\151\060\044\063\117\065\014\071\016\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\002\001\001\000" +
    "\064\003\157\004\154\057\151\060\044\063\117\065\014" +
    "\071\u023d\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\121\062\135\024\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\066\003\157\004\154\054\u0238\057\151\060\044" +
    "\063\117\065\014\071\u0237\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\064\003\157" +
    "\004\154\057\151\060\044\063\117\065\014\071\u0236\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\002" +
    "\001\001\000\064\003\157\004\154\057\151\060\044\063" +
    "\117\065\014\071\u0235\072\055\073\152\074\131\103\074" +
    "\114\070\115\136\121\062\135\024\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u0219\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u0218\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\002\001\001\000\064\003\157\004\154\057" +
    "\u0212\060\044\063\117\065\014\071\352\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\u0211\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\u0208\001\001\000\002\001\001\000" +
    "\064\003\157\004\154\057\151\060\044\063\117\065\014" +
    "\071\u0206\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\121\062\135\024\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u01f2\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\u01f1" +
    "\001\001\000\002\001\001\000\042\003\u018f\004\154\060" +
    "\044\072\055\073\u0189\074\131\103\074\115\136\121\u018b" +
    "\135\u01e3\152\u01e2\153\006\154\022\156\122\162\036\165" +
    "\051\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u01e0\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\174\115\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\214\004\154\063\201\064\210\115\136\121\207\164" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\214\004\154\063\201\064\241\115\136\121\207\164" +
    "\203\001\001\000\002\001\001\000\010\003\240\004\154" +
    "\115\136\001\001\000\002\001\001\000\024\003\214\004" +
    "\154\063\201\064\224\066\222\070\223\115\136\121\207" +
    "\164\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\214\004\154\063\201\064\217" +
    "\115\136\121\207\164\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\216\004\154\115\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\230\001\001" +
    "\000\002\001\001\000\020\003\214\004\154\063\201\064" +
    "\226\115\136\121\207\164\203\001\001\000\002\001\001" +
    "\000\020\003\214\004\154\063\201\064\231\115\136\121" +
    "\207\164\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\214\004\154\063\201\064\233\115\136\121" +
    "\207\164\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\214\004\154\063\201\064\224\066\236\070" +
    "\223\115\136\121\207\164\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\003\157\004\154\012\257\015\120\025\253\057\151\060" +
    "\044\063\117\065\014\071\016\072\055\073\152\074\131" +
    "\103\074\114\070\115\136\121\062\135\024\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\004\115\247\001\001\000" +
    "\002\001\001\000\020\003\214\004\154\063\201\064\251" +
    "\115\136\121\207\164\203\001\001\000\002\001\001\000" +
    "\004\020\u01bf\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\342\001\001\000\004\053\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\264\004\154\037\275\042\266\043\273\115\136\122" +
    "\272\147\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\326\004\154\115\136\001\001\000" +
    "\002\001\001\000\004\040\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\302\001\001\000\106\003" +
    "\157\004\154\012\310\014\303\015\120\057\151\060\044" +
    "\063\117\065\014\071\016\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\116\123\121\062\133\305\134\307" +
    "\135\024\141\144\142\023\143\050\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\330\004" +
    "\154\115\136\001\001\000\002\001\001\000\016\003\264" +
    "\004\154\043\332\115\136\122\272\147\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\214\004\154\063\201\064\336\115\136\121\207\164" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\214\004\154\063\201\064\341\115\136\121\207\164" +
    "\203\001\001\000\002\001\001\000\106\003\157\004\154" +
    "\012\310\014\303\015\120\057\151\060\044\063\117\065" +
    "\014\071\016\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\116\123\121\062\133\305\134\307\135\024\141" +
    "\144\142\023\143\050\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\346" +
    "\004\154\115\136\001\001\000\002\001\001\000\070\003" +
    "\157\004\154\044\350\045\355\057\356\060\044\063\117" +
    "\065\014\071\352\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\353\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\002\001\001\000\042\003\u018f\004\154" +
    "\060\044\072\055\073\u0189\074\131\103\074\115\136\120" +
    "\u01bc\121\u018b\135\u01b2\153\006\154\022\156\122\162\036" +
    "\165\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\157\004\154\057\362\060\044\063\117\065\014\071" +
    "\352\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\121\062\135\361\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\042\003\u018f\004\154\060\044\072\055\073\u0189\074" +
    "\131\103\074\115\136\120\u01b1\121\u018b\135\u01b2\153\006" +
    "\154\022\156\122\162\036\165\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\003\157\004\154\057\151" +
    "\060\044\063\117\065\014\071\u01b0\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\121\062\135\024\150\153" +
    "\152\106\153\006\154\022\156\122\160\100\162\036\165" +
    "\051\206\163\207\013\001\001\000\064\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u0188\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\064\003\157" +
    "\004\154\057\151\060\044\063\117\065\014\071\u0186\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\064" +
    "\003\157\004\154\057\151\060\044\063\117\065\014\071" +
    "\u0185\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\121\062\135\024\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\064\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u0184\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\064\003\157\004\154\057\151\060\044\063" +
    "\117\065\014\071\u0183\072\055\073\152\074\131\103\074" +
    "\114\070\115\136\121\062\135\024\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\064\003\157\004\154\057\151\060" +
    "\044\063\117\065\014\071\u0182\072\055\073\152\074\131" +
    "\103\074\114\070\115\136\121\062\135\024\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\064\003\157\004\154\057" +
    "\151\060\044\063\117\065\014\071\u0181\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\064\003\157\004" +
    "\154\057\151\060\044\063\117\065\014\071\u0180\072\055" +
    "\073\152\074\131\103\074\114\070\115\136\121\062\135" +
    "\024\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\064\003" +
    "\157\004\154\057\151\060\044\063\117\065\014\071\u017f" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\024\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\064\003\157\004\154\057\151\060\044\063\117\065\014" +
    "\071\u017e\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\121\062\135\024\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\022\072\u0137\074\131\076\u0172\102\u0132\103\u0135" +
    "\115\u0131\153\u0171\156\122\001\001\000\064\003\157\004" +
    "\154\057\151\060\044\063\117\065\014\071\u0100\072\055" +
    "\073\152\074\131\103\074\114\070\115\136\121\062\135" +
    "\024\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\002\001" +
    "\001\000\064\003\157\004\154\057\151\060\044\063\117" +
    "\065\014\071\u0170\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\024\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u016f\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\064\003\157\004\154\057\151" +
    "\060\044\063\117\065\014\071\u016e\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\121\062\135\024\150\153" +
    "\152\106\153\006\154\022\156\122\160\100\162\036\165" +
    "\051\206\163\207\013\001\001\000\064\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u016d\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\064\003\157" +
    "\004\154\057\151\060\044\063\117\065\014\071\u016c\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\064" +
    "\003\157\004\154\057\151\060\044\063\117\065\014\071" +
    "\u016b\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\121\062\135\024\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\064\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u0166\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\064\003\157\004\154\057\151\060\044\063" +
    "\117\065\014\071\u0165\072\055\073\152\074\131\103\074" +
    "\114\070\115\136\121\062\135\024\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\064\003\157\004\154\057\151\060" +
    "\044\063\117\065\014\071\u0164\072\055\073\152\074\131" +
    "\103\074\114\070\115\136\121\062\135\024\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\064\003\157\004\154\057" +
    "\151\060\044\063\117\065\014\071\u0163\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\064\003\157\004" +
    "\154\057\151\060\044\063\117\065\014\071\u0162\072\055" +
    "\073\152\074\131\103\074\114\070\115\136\121\062\135" +
    "\024\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\064\003" +
    "\157\004\154\057\151\060\044\063\117\065\014\071\u0161" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\024\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\064\003\157\004\154\057\151\060\044\063\117\065\014" +
    "\071\u0160\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\121\062\135\024\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\064\003\157\004\154\057\151\060\044\063\117" +
    "\065\014\071\u015f\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\024\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u015e\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\064\003\157\004\154\057\151" +
    "\060\044\063\117\065\014\071\u015d\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\121\062\135\024\150\153" +
    "\152\106\153\006\154\022\156\122\160\100\162\036\165" +
    "\051\206\163\207\013\001\001\000\064\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u015c\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\036\003\u012d" +
    "\004\154\072\u0126\073\u0124\074\131\103\u012a\115\136\121" +
    "\u0127\154\022\156\122\157\u0128\161\u0123\162\u0129\163\u012b" +
    "\001\001\000\064\003\157\004\154\057\151\060\044\063" +
    "\117\065\014\071\u0122\072\055\073\152\074\131\103\074" +
    "\114\070\115\136\121\062\135\024\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\064\003\157\004\154\057\151\060" +
    "\044\063\117\065\014\071\u0121\072\055\073\152\074\131" +
    "\103\074\114\070\115\136\121\062\135\024\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\064\003\157\004\154\057" +
    "\151\060\044\063\117\065\014\071\u0120\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\064\003\157\004" +
    "\154\057\151\060\044\063\117\065\014\071\u011f\072\055" +
    "\073\152\074\131\103\074\114\070\115\136\121\062\135" +
    "\024\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\064\003" +
    "\157\004\154\057\151\060\044\063\117\065\014\071\u011e" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\024\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\064\003\157\004\154\057\151\060\044\063\117\065\014" +
    "\071\u011d\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\121\062\135\024\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\064\003\157\004\154\057\151\060\044\063\117" +
    "\065\014\071\u011c\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\024\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u011b\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\u0159\004\154\115" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\072\u014c\074\131\156" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\u012f\004\154\115\136\001\001\000" +
    "\002\001\001\000\022\072\u0137\074\131\076\u0134\102\u0132" +
    "\103\u0135\115\u0131\153\u0133\156\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\072\u0141\074\131\156\122\001\001\000\064\003" +
    "\157\004\154\057\151\060\044\063\117\065\014\071\u013f" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\024\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\002\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u013d\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\066\003\157\004\154\057\151" +
    "\060\044\063\117\065\014\071\u013a\072\055\073\152\074" +
    "\131\075\u013b\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\157\004\154\057" +
    "\151\060\044\063\117\065\014\071\u0144\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u014a\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\066\003\157\004\154\057\151" +
    "\060\044\063\117\065\014\071\u013a\072\055\073\152\074" +
    "\131\075\u0148\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\074\u0151\077\u014e\100\u0150\103\u014f" +
    "\156\122\001\001\000\002\001\001\000\010\074\u0151\077" +
    "\u0152\156\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\157\004\154\057\151\060" +
    "\044\063\117\065\014\071\u0157\072\055\073\152\074\131" +
    "\103\074\114\070\115\136\121\062\135\024\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\066\003\157\004\154\057" +
    "\151\060\044\063\117\065\014\071\u013a\072\055\073\152" +
    "\074\131\075\u0155\103\074\114\070\115\136\121\062\135" +
    "\024\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\074\u0151\077\u014e\100\u015b\103" +
    "\u014f\156\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\157\004\154\057\151\060\044\063\117" +
    "\065\014\071\u0168\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\024\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\002\001\001\000\064\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u016a\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\157\004\154\044" +
    "\u0174\045\355\057\356\060\044\063\117\065\014\071\352" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\353\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\002\001\001\000\004\101\u0176\001\001\000\002\001\001" +
    "\000\066\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u013a\072\055\073\152\074\131\075\u0178\103\074" +
    "\114\070\115\136\121\062\135\024\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\003\157\004\154\044\u017b\045\355\057\356\060\044" +
    "\063\117\065\014\071\352\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\353\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\004\101\u017d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\u018f\004\154\060\044\072\055" +
    "\073\u0189\074\131\103\074\115\136\121\u018b\135\u018c\153" +
    "\006\154\022\156\122\162\036\165\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\u01a3\004\154\115" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\u012d\004\154\072\u0126\073\u0124\074\131\103\u012a\115" +
    "\136\121\u0127\154\022\156\122\157\u0195\161\u0123\162\u0129" +
    "\163\u012b\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\003\157\004\154\044\u0191\045\355\057\356\060\044" +
    "\063\117\065\014\071\352\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\353\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\u0194\004\154\115\136\001\001\000\002\001" +
    "\001\000\004\062\u0196\001\001\000\002\001\001\000\070" +
    "\003\157\004\154\044\u0198\045\355\057\356\060\044\063" +
    "\117\065\014\071\352\072\055\073\152\074\131\103\074" +
    "\114\070\115\136\121\062\135\353\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\074\u0151\077\u014e\100\u019c\102\u019b\103\u014f\115\u0131" +
    "\156\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\003\157\004\154\044\u019e\045\355\057\356\060\044" +
    "\063\117\065\014\071\352\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\353\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\003\157\004\154\044\u01a1\045\355\057\356\060" +
    "\044\063\117\065\014\071\352\072\055\073\152\074\131" +
    "\103\074\114\070\115\136\121\062\135\353\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\003\157\004\154\044\u01a5" +
    "\045\355\057\356\060\044\063\117\065\014\071\352\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\353\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\074\u0151\077\u014e\100" +
    "\u01a9\102\u01a8\103\u014f\115\u0131\156\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\157\004\154\044" +
    "\u01ab\045\355\057\356\060\044\063\117\065\014\071\352" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\353\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\003\157\004\154" +
    "\044\u01ae\045\355\057\356\060\044\063\117\065\014\071" +
    "\352\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\121\062\135\353\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\u01b4\001\001" +
    "\000\002\001\001\000\022\003\264\004\154\037\u01b6\042" +
    "\266\043\273\115\136\122\272\147\265\001\001\000\002" +
    "\001\001\000\004\040\u01b8\001\001\000\002\001\001\000" +
    "\004\013\u01ba\001\001\000\106\003\157\004\154\012\310" +
    "\014\303\015\120\057\151\060\044\063\117\065\014\071" +
    "\016\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\116\123\121\062\133\305\134\307\135\024\141\144\142" +
    "\023\143\050\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\157" +
    "\004\154\057\151\060\044\063\117\065\014\071\u01c5\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\002" +
    "\001\001\000\070\003\157\004\154\012\u01c8\015\120\057" +
    "\151\060\044\063\117\065\014\071\016\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\004\013\u01d2\001" +
    "\001\000\004\033\u01c9\001\001\000\004\035\u01ca\001\001" +
    "\000\002\001\001\000\070\003\157\004\154\012\u01d1\015" +
    "\120\057\151\060\044\063\117\065\014\071\016\072\055" +
    "\073\152\074\131\103\074\114\070\115\136\121\062\135" +
    "\024\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\002\001" +
    "\001\000\064\003\157\004\154\057\151\060\044\063\117" +
    "\065\014\071\u01ce\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\024\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\002\001\001\000\070\003\157\004\154" +
    "\012\u01d0\015\120\057\151\060\044\063\117\065\014\071" +
    "\016\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\121\062\135\024\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\110\003\157\004" +
    "\154\012\310\014\303\015\120\034\u01d3\057\151\060\044" +
    "\063\117\065\014\071\016\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\116\123\121\062\133\305\134\307" +
    "\135\024\141\144\142\023\143\050\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\004\036\u01d4\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\157" +
    "\004\154\057\151\060\044\063\117\065\014\071\u01d8\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\u01db\001\001\000" +
    "\106\003\157\004\154\012\310\014\303\015\120\057\151" +
    "\060\044\063\117\065\014\071\016\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\116\123\121\062\133\305" +
    "\134\307\135\024\141\144\142\023\143\050\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\004\013\u01dd\001\001\000" +
    "\106\003\157\004\154\012\310\014\303\015\120\057\151" +
    "\060\044\063\117\065\014\071\016\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\116\123\121\062\133\305" +
    "\134\307\135\024\141\144\142\023\143\050\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\u018f\004\154\060\044\072" +
    "\055\073\u0189\074\131\103\074\104\u01e5\105\u01e6\115\136" +
    "\121\u018b\135\u01e7\153\006\154\022\156\122\162\036\165" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\003\u018f\004\154\060" +
    "\044\072\055\073\u0189\074\131\103\074\104\u01ea\105\u01e6" +
    "\115\136\121\u018b\135\u01e7\153\006\154\022\156\122\162" +
    "\036\165\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\u018f\004\154\060\044\072\055\073\u0189\074" +
    "\131\103\074\105\u01ed\115\136\121\u018b\135\u01e7\153\006" +
    "\154\022\156\122\162\036\165\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\003\157\004\154\057\151" +
    "\060\044\063\117\065\014\071\u01f0\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\121\062\135\024\150\153" +
    "\152\106\153\006\154\022\156\122\160\100\162\036\165" +
    "\051\206\163\207\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\072\u0137\074\131\076\u01f7\102\u0132\103\u0135" +
    "\115\u0131\153\u01f6\156\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\003\157\004\154\044\u01f9\045\355" +
    "\057\356\060\044\063\117\065\014\071\352\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\121\062\135\353" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\002\001\001" +
    "\000\004\101\u01fb\001\001\000\002\001\001\000\070\003" +
    "\157\004\154\044\u01fd\045\355\057\356\060\044\063\117" +
    "\065\014\071\352\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\353\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\002\001\001\000\004\101\u01ff\001\001" +
    "\000\002\001\001\000\042\003\u018f\004\154\060\044\072" +
    "\055\073\u0189\074\131\103\074\115\136\121\u018b\135\u0201" +
    "\153\006\154\022\155\u0202\156\122\162\036\165\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\u018f\004\154\060\044\072\055\073\u0189\074" +
    "\131\103\074\115\136\121\u018b\135\u0205\153\006\154\022" +
    "\156\122\162\036\165\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u0209\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\115\u020d\001" +
    "\001\000\002\001\001\000\020\074\u0151\077\u014e\100\u01a9" +
    "\102\u01a8\103\u014f\115\u0131\156\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\214\004\154\063\201\064\u0217\115\136\121\207" +
    "\164\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u021b\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\004\027\u021d" +
    "\001\001\000\002\001\001\000\004\030\u0230\001\001\000" +
    "\004\030\u0220\001\001\000\002\001\001\000\004\030\u0222" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\157\004\154\057\151\060\044\063\117\065\014\071\u022a" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\121" +
    "\062\135\024\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\004\031\u0226\001\001\000\004\013\u0229\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\003\157\004\154\012" +
    "\310\014\303\015\120\057\151\060\044\063\117\065\014" +
    "\071\016\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\116\123\121\062\133\305\134\307\135\024\141\144" +
    "\142\023\143\050\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\004\031\u022b\001\001\000\004\013\u022c\001\001\000" +
    "\106\003\157\004\154\012\310\014\303\015\120\057\151" +
    "\060\044\063\117\065\014\071\016\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\116\123\121\062\133\305" +
    "\134\307\135\024\141\144\142\023\143\050\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u0232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\157\004\154\057\151\060" +
    "\044\063\117\065\014\071\u023b\072\055\073\152\074\131" +
    "\103\074\114\070\115\136\121\062\135\024\150\153\152" +
    "\106\153\006\154\022\156\122\160\100\162\036\165\051" +
    "\206\163\207\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\157\004" +
    "\154\057\151\060\044\063\117\065\014\071\u0242\072\055" +
    "\073\152\074\131\103\074\114\070\115\136\121\062\135" +
    "\024\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\214\004" +
    "\154\063\201\064\u0249\115\136\121\207\164\203\001\001" +
    "\000\002\001\001\000\004\117\u024b\001\001\000\004\217" +
    "\u0253\001\001\000\014\003\264\004\154\115\136\122\u024e" +
    "\146\u024d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\264\004\154\115\136\122\u0251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\u0255\001\001\000\032\052\u025c\116\123" +
    "\124\u0268\125\u0257\131\u025d\132\u0260\134\u0256\142\023\143" +
    "\050\151\u0267\166\u025e\171\u0258\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\132\u0296\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\264\004\154\115" +
    "\136\122\u0275\172\u0274\001\001\000\002\001\001\000\004" +
    "\123\u026c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\214\004\154\063\201\064\u0271\115\136\121\207\164\203" +
    "\001\001\000\002\001\001\000\020\003\214\004\154\063" +
    "\201\064\u0273\115\136\121\207\164\203\001\001\000\002" +
    "\001\001\000\004\173\u0278\001\001\000\002\001\001\000" +
    "\012\003\264\004\154\115\136\122\u0295\001\001\000\030" +
    "\003\264\004\154\115\136\122\u027f\174\u027d\175\u027c\176" +
    "\u0280\177\u0281\201\u027a\202\u027e\203\u027b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\264\004\154\115\136\122\u027f\176\u028c" +
    "\177\u0281\201\u027a\202\u027e\203\u027b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\264\004\154" +
    "\115\136\122\u0288\200\u0287\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\264\004\154\115\136\122\u028a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\204\u0290\205\u0293\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u029c" +
    "\001\001\000\004\115\u029d\001\001\000\004\220\u029e\001" +
    "\001\000\002\001\001\000\022\003\264\004\154\037\u02a0" +
    "\042\266\043\273\115\136\122\272\147\265\001\001\000" +
    "\002\001\001\000\004\221\u02a2\001\001\000\004\126\u02a3" +
    "\001\001\000\002\001\001\000\004\013\u02a6\001\001\000" +
    "\002\001\001\000\106\003\157\004\154\012\310\014\303" +
    "\015\120\057\151\060\044\063\117\065\014\071\016\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\116\123" +
    "\121\062\133\305\134\307\135\024\141\144\142\023\143" +
    "\050\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\112\u02b9\156\u02a8\001\001" +
    "\000\002\001\001\000\040\003\u018f\004\154\060\044\072" +
    "\055\073\u0189\074\131\103\074\115\136\121\u018b\135\u02b7" +
    "\153\006\154\022\156\122\162\036\165\051\001\001\000" +
    "\064\003\157\004\154\057\151\060\044\063\117\065\014" +
    "\071\u02af\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\121\062\135\024\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\006\112\u02ae\156\u02a8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\003\157\004\154\057\151\060\044\063\117\065\014" +
    "\071\u02b3\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\121\062\135\024\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\113\u02c1\115\u02c2\156\u02c0\001\001\000" +
    "\004\115\u02bf\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\115\u02c6\001\001\000\004\213\u02c7" +
    "\001\001\000\002\001\001\000\022\003\264\004\154\037" +
    "\u02c9\042\266\043\273\115\136\122\272\147\265\001\001" +
    "\000\002\001\001\000\004\214\u02cb\001\001\000\004\167" +
    "\u02ce\001\001\000\004\013\u02cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\106\003\157\004\154\012\310\014" +
    "\303\015\120\057\151\060\044\063\117\065\014\071\016" +
    "\072\055\073\152\074\131\103\074\114\070\115\136\116" +
    "\123\121\062\133\305\134\307\135\024\141\144\142\023" +
    "\143\050\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\157\004\154\057\u02d6\060\044\063\117" +
    "\065\014\071\352\072\055\073\152\074\131\103\074\114" +
    "\070\115\136\121\062\135\u02d5\150\153\152\106\153\006" +
    "\154\022\156\122\160\100\162\036\165\051\206\163\207" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\u018f\004\154\060\044\072\055\073\u0189\074\131\103" +
    "\074\115\136\121\u018b\135\u02d8\153\006\154\022\156\122" +
    "\162\036\165\051\001\001\000\004\021\u02d9\001\001\000" +
    "\002\001\001\000\042\003\u018f\004\154\022\u02db\060\044" +
    "\072\055\073\u0189\074\131\103\074\115\136\121\u018b\135" +
    "\u02dc\153\006\154\022\156\122\162\036\165\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\u018f\004" +
    "\154\060\044\072\055\073\u0189\074\131\103\074\115\136" +
    "\121\u018b\135\u02de\153\006\154\022\156\122\162\036\165" +
    "\051\001\001\000\002\001\001\000\072\003\157\004\154" +
    "\012\u02e1\015\120\024\u02e2\057\151\060\044\063\117\065" +
    "\014\071\016\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\004\013\u02e3\001\001\000\002\001\001\000" +
    "\002\001\001\000\106\003\157\004\154\012\310\014\303" +
    "\015\120\057\151\060\044\063\117\065\014\071\016\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\116\123" +
    "\121\062\133\305\134\307\135\024\141\144\142\023\143" +
    "\050\150\153\152\106\153\006\154\022\156\122\160\100" +
    "\162\036\165\051\206\163\207\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\u018f\004\154\022\u02e7" +
    "\060\044\072\055\073\u0189\074\131\103\074\115\136\121" +
    "\u018b\135\u02dc\153\006\154\022\156\122\162\036\165\051" +
    "\001\001\000\004\021\u02e8\001\001\000\002\001\001\000" +
    "\072\003\157\004\154\012\u02e1\015\120\024\u02ea\057\151" +
    "\060\044\063\117\065\014\071\016\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\121\062\135\024\150\153" +
    "\152\106\153\006\154\022\156\122\160\100\162\036\165" +
    "\051\206\163\207\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\130\u02f8\001\001\000" +
    "\004\210\u02ef\001\001\000\006\127\u02f3\130\u02f2\001\001" +
    "\000\002\001\001\000\004\010\u02f5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\003\157" +
    "\004\154\011\u02f7\012\161\015\120\057\151\060\044\063" +
    "\117\065\014\071\016\072\055\073\152\074\131\103\074" +
    "\114\070\115\136\116\123\121\062\124\124\133\111\134" +
    "\134\135\024\141\144\142\023\143\050\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\u018f\004\154\016\u02fc\017" +
    "\u02fa\060\044\072\055\073\u0189\074\131\103\074\115\136" +
    "\121\u018b\135\u02fb\153\006\154\022\156\122\162\036\165" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\u018f\004\154\017" +
    "\u02ff\060\044\072\055\073\u0189\074\131\103\074\115\136" +
    "\121\u018b\135\u02fb\153\006\154\022\156\122\162\036\165" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\112\u02b9\156\u02a8\001\001\000\002\001\001\000\004\062" +
    "\u0304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u030e\001\001\000\106\003\157\004\154\012" +
    "\310\014\303\015\120\057\151\060\044\063\117\065\014" +
    "\071\016\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\116\123\121\062\133\305\134\307\135\024\141\144" +
    "\142\023\143\050\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\074\u0151\077" +
    "\u014e\100\u019c\102\u019b\103\u014f\115\u0131\156\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\112\u02b9\156" +
    "\u02a8\001\001\000\006\112\u02ae\156\u02a8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\u018f\004\154\060\044\072" +
    "\055\073\u0189\074\131\103\074\115\136\120\u0330\121\u018b" +
    "\135\u01b2\153\006\154\022\156\122\162\036\165\051\001" +
    "\001\000\002\001\001\000\004\067\u0324\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\157\004\154\057" +
    "\151\060\044\063\117\065\014\071\u0326\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\002\001\001\000" +
    "\042\003\u018f\004\154\060\044\072\055\073\u0189\074\131" +
    "\103\074\115\136\120\u032b\121\u018b\135\u01b2\153\006\154" +
    "\022\156\122\162\036\165\051\001\001\000\002\001\001" +
    "\000\064\003\157\004\154\057\151\060\044\063\117\065" +
    "\014\071\u0329\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\042\003\u018f\004\154\060\044\072\055\073" +
    "\u0189\074\131\103\074\115\136\120\u032a\121\u018b\135\u01b2" +
    "\153\006\154\022\156\122\162\036\165\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\157\004\154\057\151\060\044\063\117\065\014\071" +
    "\u032e\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\121\062\135\024\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\042\003\u018f\004\154\060\044\072\055\073\u0189\074" +
    "\131\103\074\115\136\120\u032f\121\u018b\135\u01b2\153\006" +
    "\154\022\156\122\162\036\165\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\003\157" +
    "\004\154\057\151\060\044\063\117\065\014\071\u0332\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\215\u0335\001\001\000" +
    "\004\144\u0337\001\001\000\012\003\264\004\154\115\136" +
    "\122\u0341\001\001\000\004\170\u0338\001\001\000\004\145" +
    "\u033a\001\001\000\002\001\001\000\004\216\u033d\001\001" +
    "\000\014\003\264\004\154\115\136\122\u024e\146\u033c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u033f" +
    "\001\001\000\032\052\u025c\116\123\124\u0268\125\u0257\131" +
    "\u025d\132\u0260\134\u0256\142\023\143\050\151\u0267\166\u0340" +
    "\171\u0258\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\003\157\004\154\057\151\060\044" +
    "\063\117\065\014\071\u0344\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\072\003\157" +
    "\004\154\012\u0348\015\120\032\u0347\057\151\060\044\063" +
    "\117\065\014\071\016\072\055\073\152\074\131\103\074" +
    "\114\070\115\136\121\062\135\024\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\004\013\u0349\001\001\000\002\001" +
    "\001\000\002\001\001\000\106\003\157\004\154\012\310" +
    "\014\303\015\120\057\151\060\044\063\117\065\014\071" +
    "\016\072\055\073\152\074\131\103\074\114\070\115\136" +
    "\116\123\121\062\133\305\134\307\135\024\141\144\142" +
    "\023\143\050\150\153\152\106\153\006\154\022\156\122" +
    "\160\100\162\036\165\051\206\163\207\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u013a\072\055\073" +
    "\152\074\131\075\u034d\103\074\114\070\115\136\121\062" +
    "\135\024\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\214\004\154\063\201\064\u0355\115\136\121" +
    "\207\164\203\001\001\000\002\001\001\000\020\003\214" +
    "\004\154\063\201\064\u0357\115\136\121\207\164\203\001" +
    "\001\000\002\001\001\000\004\013\u0359\001\001\000\106" +
    "\003\157\004\154\012\310\014\303\015\120\057\151\060" +
    "\044\063\117\065\014\071\016\072\055\073\152\074\131" +
    "\103\074\114\070\115\136\116\123\121\062\133\305\134" +
    "\307\135\024\141\144\142\023\143\050\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\264\004\154\115\136\122\u035d\001\001\000" +
    "\004\156\u035e\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0361\001\001\000\106\003\157\004\154\012" +
    "\310\014\303\015\120\057\151\060\044\063\117\065\014" +
    "\071\016\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\116\123\121\062\133\305\134\307\135\024\141\144" +
    "\142\023\143\050\150\153\152\106\153\006\154\022\156" +
    "\122\160\100\162\036\165\051\206\163\207\013\001\001" +
    "\000\010\136\u0364\137\u0366\140\u0365\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\140\u0367" +
    "\001\001\000\002\001\001\000\012\003\264\004\154\115" +
    "\136\122\u0369\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u036d\001\001\000\106\003" +
    "\157\004\154\012\310\014\303\015\120\057\151\060\044" +
    "\063\117\065\014\071\016\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\116\123\121\062\133\305\134\307" +
    "\135\024\141\144\142\023\143\050\150\153\152\106\153" +
    "\006\154\022\156\122\160\100\162\036\165\051\206\163" +
    "\207\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\112\u02b9\156\u02a8\001\001\000\006" +
    "\112\u02ae\156\u02a8\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\157\004\154\055\u0377\056\u0378\057\151" +
    "\060\044\063\117\065\014\071\u0376\072\055\073\152\074" +
    "\131\103\074\114\070\115\136\121\062\135\024\150\153" +
    "\152\106\153\006\154\022\156\122\160\100\162\036\165" +
    "\051\206\163\207\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\157\004\154\057" +
    "\151\060\044\063\117\065\014\071\u037a\072\055\073\152" +
    "\074\131\103\074\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\002\001\001\000" +
    "\070\003\157\004\154\055\u037c\056\u0378\057\151\060\044" +
    "\063\117\065\014\071\u0376\072\055\073\152\074\131\103" +
    "\074\114\070\115\136\121\062\135\024\150\153\152\106" +
    "\153\006\154\022\156\122\160\100\162\036\165\051\206" +
    "\163\207\013\001\001\000\002\001\001\000\070\003\157" +
    "\004\154\055\u037e\056\u0378\057\151\060\044\063\117\065" +
    "\014\071\u0376\072\055\073\152\074\131\103\074\114\070" +
    "\115\136\121\062\135\024\150\153\152\106\153\006\154" +
    "\022\156\122\160\100\162\036\165\051\206\163\207\013" +
    "\001\001\000\002\001\001\000\072\003\157\004\154\012" +
    "\u0382\015\120\023\u0380\057\151\060\044\063\117\065\014" +
    "\071\016\072\055\073\152\074\131\103\074\114\070\115" +
    "\136\121\062\135\024\150\153\152\106\153\006\154\022" +
    "\156\122\160\100\162\036\165\051\206\163\207\013\001" +
    "\001\000\002\001\001\000\004\013\u0383\001\001\000\002" +
    "\001\001\000\106\003\157\004\154\012\310\014\303\015" +
    "\120\057\151\060\044\063\117\065\014\071\016\072\055" +
    "\073\152\074\131\103\074\114\070\115\136\116\123\121" +
    "\062\133\305\134\307\135\024\141\144\142\023\143\050" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\u018f\004\154\060\044\072" +
    "\055\073\u0189\074\131\103\074\115\136\121\u018b\135\u0387" +
    "\153\006\154\022\156\122\162\036\165\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\u0392\004\154\115\136\001\001\000\002\001\001\000\012" +
    "\003\u038b\004\154\005\u0391\115\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\003\157\004\154\057\151\060\044\063" +
    "\117\065\014\071\u031f\072\055\073\152\074\131\103\074" +
    "\106\u039c\107\u0320\114\070\115\136\121\062\135\024\150" +
    "\153\152\106\153\006\154\022\156\122\160\100\162\036" +
    "\165\051\206\163\207\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\u018f\004\154\060\044\072\055\073\u0189\074\131\103" +
    "\074\115\136\121\u018b\135\u03a3\150\u03a2\153\006\154\022" +
    "\156\122\162\036\165\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\003\157\004\154" +
    "\057\151\060\044\063\117\065\014\071\u03a5\072\055\073" +
    "\152\074\131\103\074\114\070\115\136\121\062\135\024" +
    "\150\153\152\106\153\006\154\022\156\122\160\100\162" +
    "\036\165\051\206\163\207\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\u03a9\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\003\157\004\154\044\u03ab" +
    "\045\355\057\356\060\044\063\117\065\014\071\352\072" +
    "\055\073\152\074\131\103\074\114\070\115\136\121\062" +
    "\135\353\150\153\152\106\153\006\154\022\156\122\160" +
    "\100\162\036\165\051\206\163\207\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;

		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}

	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher = new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

	protected Expression createDispatch(Expression dispatcher, ObjectDimList dimList) {
		return resolveDimList(this.createDispatch(dispatcher, dimList.variable), dimList.list);
	}

	protected Expression resolveDimList(Expression variable, DimList list) {
		if (list == null) {
			return variable;
		}
		for (DimList.Element el : list) {
			if (variable.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
				variable = new ArrayVariableReference(variable.start(), el.right, ((SimpleReference) variable).getName(), el.index, el.type);
			} else {
				variable = new ReflectionArrayVariableReference(variable.start(), el.right, variable, el.index, el.type);
			}
		}
		return variable;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CompilerAstParser$actions {
  private final CompilerAstParser parser;

  /** Constructor */
  CUP$CompilerAstParser$actions(CompilerAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000000(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();

	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment) c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
		if (c instanceof Comment) {
			program.getCommentList().add((Comment) c);
		}
	}

	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerAstParser$parser.done_parsing();
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= namespace_name_list 
            {
              FullyQualifiedReference RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ?
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, listright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name_list ::= string_st 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name_list ::= namespace_name_list T_NS_SEPARATOR string_st 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (statement != null) {
		parser.addStatement(statement);
		if (parser.pendingStatement != null) {
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while (!parser.declarations.isEmpty()) {
		parser.addStatement(parser.declarations.pop());
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // namespace_statement_list ::= namespace_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	if (!(parser.declarations.peek() instanceof NamespaceDeclaration)) {
		statementList.add(parser.declarations.pop());
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // namespace_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, nameright, nameleft, nameright, name.getFullyQualifiedName(), null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$0",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_NAMESPACE namespace_name NT$0 named_namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, startright, startright, startright, NamespaceDeclaration.GLOBAL, null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$1",135, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // top_statement ::= T_NAMESPACE NT$1 namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock) decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.declarations.push(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // named_namespace_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.setEnd(endright);
	namespaceDeclaration.setBracketed(false);

	parser.currentNamespace = namespaceDeclaration;

	parser.metUnbracketedNSDecl = true;
	if (parser.metBracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // named_namespace_body ::= namespace_body 
            {
              Statement RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // namespace_body ::= T_CURLY_OPEN namespace_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.getBody().setStart(startleft);
	namespaceDeclaration.getBody().setEnd(endright);
	namespaceDeclaration.getBody().getStatements().clear();
	namespaceDeclaration.getBody().acceptStatements(statementList);
	namespaceDeclaration.setEnd(endright);

	parser.metBracketedNSDecl = true;
	if (parser.metUnbracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // namespace_body ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (NamespaceDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT =null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // use_declarations ::= use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // use_declaration ::= namespace_name 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoLabel(labelleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$2 ::= 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$2",136, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_CURLY_OPEN NT$2 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = (Block) parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);

	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);
	RESULT = whileStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);
	RESULT = doStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForStatement forStatement = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);
	RESULT = forStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	GlobalStatement global = new GlobalStatement(startleft, endright, list);
	RESULT = global;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, list);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(startleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, expr);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, functionInvocation);
	RESULT = expressionStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);
	RESULT = declare;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, tryBlock, catchesList);
	RESULT = tryStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-12)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoStatement(startleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catches",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);
	RESULT = catchClause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("additional_catch",94, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$3 ::= 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$3",137, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$4 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$4",138, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$3 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$4 function_body 
            {
              PHPMethodDeclaration RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",95, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (PHPMethodDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$5 ::= 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration;
	if (modifier.modifier == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) {
		classDeclaration = new TraitDeclaration(modifierleft, classNameright,
			classNameleft, classNameright, modifier.modifier, className, null, null,
			new Block(classNameright, classNameright, null), modifier.doc);
	}else{
		classDeclaration = new ClassDeclaration(modifierleft, classNameright,
			classNameleft, classNameright, modifier.modifier, className, null, null,
			new Block(classNameright, classNameright, null), modifier.doc);
	}
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$5",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$6 ::= 
            {
              Statement RESULT =(Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.peek();
	if (superClass != null) {
		if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) {
			parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd()), String.format("A trait (%s) cannot extend a class. Traits can only be composed from other traits with the 'use' keyword", classDeclaration.getName()));
		} else {
			classDeclaration.setSuperClass(superClass);
		}
	}
	if (interfaces != null) {
		if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait && interfaces.size() > 0) {
		SimpleReference node = (SimpleReference) interfaces.get(0);
			parser.reportError(new ASTError(node.sourceStart(), node.sourceEnd()), String.format("Cannot use '%s' as interface on '%s' since it is a Trait", node.getName(), classDeclaration.getName()));
		} else {
			classDeclaration.setInterfaceList(interfaces);
		}
	}
	classDeclaration.setEnd(interfacesright);
	classDeclaration.getBody().setStart(interfacesright);
	classDeclaration.getBody().setEnd(interfacesright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$6",140, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unticked_class_declaration_statement ::= class_entry_type T_STRING NT$5 extends_from errorOrNot implements_list NT$6 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}
	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$7 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft, interfacesright, classNameleft, classNameright, className, interfaces, new Block(interfacesright, interfacesright, null), start);
	interfaceDeclaration.setRecovered(true);
	parser.declarations.push(interfaceDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$7",141, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list NT$7 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration) parser.declarations.pop();
	interfaceDeclaration.setRecovered(false);
	interfaceDeclaration.setEnd(blockEndright);
	interfaceDeclaration.getBody().setStart(blockStartleft);
	interfaceDeclaration.getBody().setEnd(blockEndright);
	RESULT = interfaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // errorOrNot ::= error 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // errorOrNot ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // class_entry_type ::= T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // class_entry_type ::= T_FINAL T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // class_entry_type ::= T_TRAIT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(org.eclipse.php.core.compiler.IPHPModifiers.AccTrait, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // interface_list ::= error 
            {
              List RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression reference = new ReferenceExpression (startleft, varright, var);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(key);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	lists[0].add(key);
	lists[1].add(value);
	RESULT = lists;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, caseList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, scalarright, classType, v, scalar);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, scalarright, classType, v, scalar);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // parameter ::= error 
            {
              FormalParameter RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // optional_class_type ::= fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(arrayleft, arrayright, "array", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // optional_class_type ::= T_CALLABLE 
            {
              TypeReference RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object callable = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(callableleft, callableright, "callable", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // global_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // class_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference) decl[0];
		Expression initializer = (Expression) decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock) decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // NT$8 ::= 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$8",142, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$9",143, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st NT$8 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$9 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	if (body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration) parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());
	if (body instanceof EmptyStatement) { /* method without body part */
		if (type instanceof ClassDeclaration) {
			ClassDeclaration classDeclaration = (ClassDeclaration) type;
			if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) { /* handle traits */
				if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
				}
			} else { /* handle classes */
				if ((classDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
					if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
					}
				} else {
					if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
					} else {
						String message = Messages.getString("AbstractMethodInAbstractClass", methodDeclaration.getName(), classDeclaration.getName());
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodInAbstractClass), message);

						message = Messages.getString("AbstractMethodsInConcreteClass", classDeclaration.getName());
						parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodsInConcreteClass), message);
					}
				}
			}
		}
	} else if (body == null) { /* method with body part */
		if (type instanceof ClassDeclaration) { /* handle classes and traits */
			if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
				parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
			}
		} else if (type instanceof InterfaceDeclaration) {
			parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
		}
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // class_statement ::= error 
            {
              Object RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // class_statement ::= trait_use_statement 
            {
              Object RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft, adaptationsright, list, adaptations);
	parser.addDeclarationStatement(traitUseStatement);
	parser.declarations.push(traitUseStatement);
	RESULT = traitUseStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_use_statement",119, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TypeReference> traitList = new LinkedList<TypeReference>();
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",121, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",121, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // trait_adaptation_list ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",122, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",122, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT =null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft, endright, precedence);
	RESULT = traitPrecedenceStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft, endright, alias);
	RESULT = traitAliasStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT =null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft, trListright, methodReference, trList);
	RESULT = traitPrecedence;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_precedence",125, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TypeReference> trList = new LinkedList<TypeReference>();
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",127, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",127, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, className, functionName);
	RESULT = methodReference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference_fully_qualified",128, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // trait_alias ::= trait_method_reference T_AS trait_modifiers T_STRING 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference, modifierValue,
		new SimpleReference(functionNameleft, functionNameright, functionName));
	RESULT = alias;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",129, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // trait_alias ::= trait_method_reference T_AS non_empty_trait_modifiers 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference, modifierValue, null);
	RESULT = alias;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",129, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // non_empty_trait_modifiers ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",131, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // non_empty_trait_modifiers ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",131, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // non_empty_trait_modifiers ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",131, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // trait_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",130, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // trait_modifiers ::= non_empty_trait_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = modifier;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",130, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	// return an EmptyStatement object to make distinction between an abstract method and a method with an empty body
	RESULT = new EmptyStatement(endleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // method_body ::= 
            {
              Statement RESULT =null;
		
	parser.reportError();
	RESULT = new ASTError(0, 0);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // variable_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendPropertyModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",103, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // variable_modifiers ::= T_VAR 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock var = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",103, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // method_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // method_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendMethodModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // member_modifier ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // member_modifier ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // member_modifier ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // member_modifier ::= T_STATIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // member_modifier ::= T_ABSTRACT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // member_modifier ::= T_FINAL 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // chain_instance_call ::= T_OPEN_PARENTHESE new_expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);

	if (memberProperty.getClass().equals(SimpleReference.class)) {
		RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty, paramsList);
	} else {
		RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty, paramsList);
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	if (memberProperty.list != null) {
		Expression dispatch = parser.createDispatch(ch, memberProperty);
		if (dispatch.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, null, (SimpleReference) dispatch, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, null, dispatch, paramsList);
		}
	} else {
		if (memberProperty.variable.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty.variable, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty.variable, paramsList);
		}
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, varList);
	Assignment list = new Assignment(startleft, exprright, vars, Assignment.OP_EQUAL, expr);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation);
	RESULT = assignment;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, expr);
	RESULT = clone;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_AND_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_OR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MUL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_DIV, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MOD, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_PLUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_MINUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_NOT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_TILDA);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr, className);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expr_without_variable ::= new_expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr_without_variable ::= chain_instance_call 
            {
              Expression RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression call = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = call;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ifTrue, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, null, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_INT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_REAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000001(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_OBJECT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_BOOL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_UNSET);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // expr_without_variable ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, list);
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, varsList,
		new Block(blockStartleft, blockEndright, list), isReference.booleanValue());

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new LambdaFunctionDeclaration(sleft, blockEndright, paramList, varsList,
		new Block(blockStartleft, blockEndright, list), isReference.booleanValue(), true);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // lexical_vars ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new VariableReference(varleft, varright, var));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object namespace = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	if (functionName.getNamespace() != null) {
		functionName.getNamespace().setLocal(true);
	}
	RESULT = new PHPCallExpression(namespaceleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	NamespaceReference namespace = functionName.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		functionName.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	functionName.setStart(sleft);
	RESULT = new PHPCallExpression(sleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name;
	if (functionName instanceof SimpleReference) {
		name = (SimpleReference) functionName;
	}else{
		name = new SimpleReference(functionNameleft, functionNameleft, "");
	}
	RESULT = new StaticMethodInvocation(classNameleft, endright, className, functionName, name, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList(finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariableReference(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, finalVar);
	}
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, finalVar, parameters);
	RESULT = functionInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList(finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariableReference(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, finalVar);
	}
	RESULT = new ReflectionStaticMethodInvocation(classNameleft, endright, className, finalVar, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name;
	if (functionName instanceof SimpleReference) {
		name = (SimpleReference) functionName;
	}else{
		name = new SimpleReference(functionNameleft, functionNameleft, "");
	}
	RESULT = new StaticMethodInvocation(classNameleft, endright, className, functionName, name, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // function_call ::= function_call T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		RESULT = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		RESULT = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // class_name ::= T_STATIC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FullyQualifiedReference(sleft, sright, "static", null);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // class_name ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // fully_qualified_class_name ::= namespace_name 
            {
              TypeReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // class_name_reference ::= class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // dynamic_class_name_reference ::= dynamic_class_name_variable_property 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // dynamic_class_name_variable_property ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // backticks_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // backticks_expr ::= encaps_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // common_scalar ::= T_BNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_BIN);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // common_scalar ::= T_LINE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // common_scalar ::= T_FILE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // common_scalar ::= T_DIR 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // common_scalar ::= T_TRAIT_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__TRAIT__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // common_scalar ::= T_NS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(labelleft, eright, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // static_scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // static_scalar ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, list);
	RESULT = array;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, vname);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_QUOTE);
	RESULT = quote;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, list, Quote.QT_SINGLE);
	RESULT = quote;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // r_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("r_variable",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // w_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("w_variable",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // rw_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("rw_variable",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // variable ::= variable T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);

	if (memberProperty.getClass().equals(SimpleReference.class)) {
		RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty, paramsList);
	} else {
		RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty, paramsList);
	}

	RESULT = parser.resolveDimList(RESULT, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // variable ::= variable T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	if (memberProperty.list != null) {
		Expression dispatch = parser.createDispatch(ch, memberProperty);
		if (dispatch.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, null, (SimpleReference) dispatch, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, null, dispatch, paramsList);
		}
	} else {
		if (memberProperty.variable.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty.variable, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty.variable, paramsList);
		}
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // field_access_dim_list_indirect_reference ::= field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // field_access_dim_list_indirect_reference ::= simple_indirect_reference field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.refCount = ref_count;
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // field_access_dim_list ::= field_access_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_ARRAY, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // field_access_dim_list ::= field_access_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // field_access_dim_list ::= compound_variable 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression finalVar = var.variable;
	int end = var.variable.end();
	if (var.refCount > 0) {
		finalVar = parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariableReference(varleft + var.refCount - i - 1, varright, finalVar);
		}
		var.list = null;
		end = varright;
	}
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, end, className, finalVar);
	RESULT = parser.resolveDimList(staticFieldAccess, var.list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression finalVar = var.variable;
	int end = var.variable.end();
	if (var.refCount > 0) {
		finalVar = parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariableReference(varleft + var.refCount - i - 1, varright, finalVar);
		}
		var.list = null;
		end = varright;
	}
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, end, className, finalVar);
	RESULT = parser.resolveDimList(staticFieldAccess, var.list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // variable_class_name ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_class_name",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // base_variable ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // base_variable ::= static_member 
            {
              Expression RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression staticFieldAccess = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var;
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var;
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // reference_variable ::= compound_variable 
            {
              Expression RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // compound_variable ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // dim_offset ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // dim_list ::= 
            {
              DimList RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_list",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // dim_list ::= dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              DimList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (list == null) {
		list = new DimList();
	}
	list.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_list",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // object_dim_list ::= variable_name 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = new ObjectDimList(var); 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // variable_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(1);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // assignment_list_element ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, varList);
	RESULT = vars;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // assignment_list_element ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // encaps_list ::= encaps_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // encaps_var ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new ArrayVariableReference(varNameleft, cright, varName, index, ArrayVariableReference.VARIABLE_ARRAY));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new Scalar(varNameleft, varNameright, varName, Scalar.TYPE_STRING));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft, numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList varList = new PHPCallArgumentsList(openParright, endleft);
	varList.addNode(var);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CompilerAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CompilerAstParser$do_action_part00000000(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CompilerAstParser$do_action_part00000001(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
