
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser.php56;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php56.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CompilerAstParser extends AbstractASTParser {

 public final Class getSymbolContainer() {
    return CompilerParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CompilerAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CompilerAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u022a\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\005\000\002\007\004" +
    "\000\002\007\002\000\002\010\004\000\002\010\002\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\006\000\002\230\002\000\002\011\006\000\002\231" +
    "\002\000\002\011\005\000\002\011\005\000\002\011\006" +
    "\000\002\011\006\000\002\011\004\000\002\130\003\000" +
    "\002\130\003\000\002\131\005\000\002\131\003\000\002" +
    "\006\005\000\002\006\003\000\002\005\003\000\002\005" +
    "\005\000\002\005\004\000\002\005\006\000\002\013\004" +
    "\000\002\013\002\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\006\000\002\012\003\000\002" +
    "\012\004\000\002\012\003\000\002\012\003\000\002\232" +
    "\002\000\002\015\006\000\002\015\011\000\002\015\014" +
    "\000\002\015\007\000\002\015\011\000\002\015\013\000" +
    "\002\015\007\000\002\015\004\000\002\015\005\000\002" +
    "\015\004\000\002\015\005\000\002\015\004\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\015\004\000\002\015\005\000\002\015\007\000\002" +
    "\015\011\000\002\015\012\000\002\015\007\000\002\015" +
    "\003\000\002\015\010\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\137\003\000\002\137\002\000" +
    "\002\140\003\000\002\140\004\000\002\141\012\000\002" +
    "\212\003\000\002\212\002\000\002\213\006\000\002\016" +
    "\003\000\002\016\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\005\000\002\134\003\000\002\135\003\000" +
    "\002\053\002\000\002\053\003\000\002\233\002\000\002" +
    "\234\002\000\002\142\013\000\002\170\005\000\002\170" +
    "\003\000\002\235\002\000\002\236\002\000\002\143\014" +
    "\000\002\237\002\000\002\143\011\000\002\172\003\000" +
    "\002\172\002\000\002\167\003\000\002\167\003\000\002" +
    "\144\003\000\002\144\004\000\002\144\004\000\002\144" +
    "\003\000\002\145\002\000\002\145\004\000\002\145\004" +
    "\000\002\117\003\000\002\120\002\000\002\120\004\000" +
    "\002\146\002\000\002\146\004\000\002\147\003\000\002" +
    "\147\005\000\002\147\005\000\002\147\003\000\002\215" +
    "\003\000\002\215\003\000\002\021\004\000\002\216\003" +
    "\000\002\216\003\000\002\022\003\000\002\022\004\000" +
    "\002\214\006\000\002\023\003\000\002\023\006\000\002" +
    "\024\003\000\002\024\006\000\002\025\003\000\002\025" +
    "\006\000\002\026\005\000\002\026\007\000\002\027\005" +
    "\000\002\027\006\000\002\027\006\000\002\027\007\000" +
    "\002\030\002\000\002\030\007\000\002\030\006\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\006\000\002\033\002\000\002\033\010\000\002\034\002" +
    "\000\002\034\011\000\002\035\002\000\002\035\004\000" +
    "\002\036\002\000\002\036\005\000\002\037\003\000\002" +
    "\037\002\000\002\042\003\000\002\042\005\000\002\042" +
    "\004\000\002\043\004\000\002\043\005\000\002\043\005" +
    "\000\002\043\006\000\002\043\006\000\002\043\007\000" +
    "\002\043\003\000\002\150\002\000\002\150\003\000\002" +
    "\150\003\000\002\150\003\000\002\044\003\000\002\044" +
    "\002\000\002\045\003\000\002\045\003\000\002\045\004" +
    "\000\002\045\004\000\002\045\004\000\002\045\005\000" +
    "\002\045\005\000\002\045\006\000\002\045\006\000\002" +
    "\045\006\000\002\046\005\000\002\046\003\000\002\047" +
    "\003\000\002\047\004\000\002\047\006\000\002\050\005" +
    "\000\002\050\007\000\002\050\003\000\002\050\005\000" +
    "\002\051\004\000\002\051\002\000\002\052\005\000\002" +
    "\052\004\000\002\240\002\000\002\241\002\000\002\052" +
    "\014\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\173\005\000\002\174\003\000\002\174\005\000" +
    "\002\175\003\000\002\175\005\000\002\176\002\000\002" +
    "\176\003\000\002\177\003\000\002\177\004\000\002\200" +
    "\004\000\002\200\004\000\002\201\005\000\002\202\003" +
    "\000\002\202\005\000\002\203\003\000\002\203\003\000" +
    "\002\204\005\000\002\205\006\000\002\205\005\000\002" +
    "\207\003\000\002\207\003\000\002\207\003\000\002\206" +
    "\002\000\002\206\003\000\002\127\003\000\002\127\005" +
    "\000\002\127\002\000\002\152\003\000\002\152\003\000" +
    "\002\126\002\000\002\126\003\000\002\132\003\000\002" +
    "\132\004\000\002\133\003\000\002\133\003\000\002\133" +
    "\003\000\002\133\003\000\002\133\003\000\002\133\003" +
    "\000\002\124\005\000\002\124\007\000\002\124\003\000" +
    "\002\124\005\000\002\210\005\000\002\210\005\000\002" +
    "\210\005\000\002\210\011\000\002\210\011\000\002\056" +
    "\005\000\002\056\003\000\002\125\007\000\002\125\006" +
    "\000\002\054\005\000\002\054\003\000\002\055\002\000" +
    "\002\055\003\000\002\211\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\006\000\002\057\010\000\002\057" +
    "\004\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\004\000\002\057\004\000\002\057\004\000\002\057\004" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\005\000\002\057\005\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\004\000\002\057\004\000\002" +
    "\057\004\000\002\057\004\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\003\000\002\057\003\000\002\057\007\000\002\057" +
    "\006\000\002\057\003\000\002\057\004\000\002\057\004" +
    "\000\002\057\004\000\002\057\004\000\002\057\004\000" +
    "\002\057\004\000\002\057\004\000\002\057\004\000\002" +
    "\057\004\000\002\057\003\000\002\057\003\000\002\057" +
    "\005\000\002\057\004\000\002\242\002\000\002\057\012" +
    "\000\002\243\002\000\002\057\013\000\002\171\005\000" +
    "\002\171\003\000\002\221\006\000\002\221\005\000\002" +
    "\222\006\000\002\222\006\000\002\040\002\000\002\040" +
    "\006\000\002\041\005\000\002\041\006\000\002\041\003" +
    "\000\002\041\004\000\002\060\006\000\002\060\010\000" +
    "\002\060\007\000\002\060\010\000\002\060\010\000\002" +
    "\060\010\000\002\060\010\000\002\060\006\000\002\060" +
    "\006\000\002\122\003\000\002\122\003\000\002\122\005" +
    "\000\002\122\004\000\002\123\003\000\002\123\005\000" +
    "\002\123\004\000\002\160\003\000\002\160\003\000\002" +
    "\162\003\000\002\164\003\000\002\164\005\000\002\164" +
    "\005\000\002\061\002\000\002\061\004\000\002\061\005" +
    "\000\002\112\002\000\002\112\003\000\002\112\003\000" +
    "\002\062\002\000\002\062\005\000\002\225\006\000\002" +
    "\225\006\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\005\000\002\063\004\000\002\064\003\000\002\064" +
    "\006\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\005\000\002\064\005\000\002" +
    "\064\005\000\002\064\005\000\002\064\005\000\002\064" +
    "\005\000\002\064\005\000\002\064\005\000\002\064\005" +
    "\000\002\064\005\000\002\064\005\000\002\064\005\000" +
    "\002\064\005\000\002\064\005\000\002\064\005\000\002" +
    "\064\005\000\002\064\005\000\002\064\005\000\002\064" +
    "\004\000\002\064\004\000\002\064\004\000\002\064\004" +
    "\000\002\064\007\000\002\064\006\000\002\064\005\000" +
    "\002\223\006\000\002\223\005\000\002\224\006\000\002" +
    "\224\006\000\002\226\006\000\002\226\006\000\002\227" +
    "\006\000\002\227\006\000\002\227\006\000\002\065\003" +
    "\000\002\065\003\000\002\065\005\000\002\065\004\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\165\005\000\002\165\005\000\002\066" +
    "\003\000\002\066\003\000\002\066\005\000\002\066\004" +
    "\000\002\066\003\000\002\066\005\000\002\066\005\000" +
    "\002\066\005\000\002\066\003\000\002\066\003\000\002" +
    "\067\002\000\002\067\004\000\002\070\002\000\002\070" +
    "\003\000\002\071\007\000\002\071\005\000\002\071\005" +
    "\000\002\071\003\000\002\072\003\000\002\072\003\000" +
    "\002\151\003\000\002\121\003\000\002\153\003\000\002" +
    "\136\003\000\002\136\005\000\002\136\005\000\002\136" +
    "\011\000\002\136\011\000\002\154\003\000\002\154\004" +
    "\000\002\101\003\000\002\101\004\000\002\100\006\000" +
    "\002\100\006\000\002\100\003\000\002\155\005\000\002" +
    "\155\005\000\002\074\003\000\002\166\003\000\002\166" +
    "\003\000\002\166\003\000\002\163\003\000\002\163\004" +
    "\000\002\163\003\000\002\073\006\000\002\073\006\000" +
    "\002\073\003\000\002\075\003\000\002\075\006\000\002" +
    "\076\002\000\002\076\003\000\002\102\002\000\002\102" +
    "\006\000\002\077\006\000\002\077\006\000\002\077\003" +
    "\000\002\103\003\000\002\103\005\000\002\104\003\000" +
    "\002\104\004\000\002\105\005\000\002\105\003\000\002" +
    "\106\003\000\002\106\003\000\002\106\002\000\002\107" +
    "\002\000\002\107\004\000\002\110\007\000\002\110\005" +
    "\000\002\110\005\000\002\110\003\000\002\110\010\000" +
    "\002\110\006\000\002\110\006\000\002\110\004\000\002" +
    "\111\004\000\002\111\004\000\002\111\004\000\002\111" +
    "\003\000\002\111\004\000\002\113\003\000\002\113\006" +
    "\000\002\113\005\000\002\113\005\000\002\113\010\000" +
    "\002\113\005\000\002\113\005\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\115\006\000\002\115" +
    "\006\000\002\115\004\000\002\115\004\000\002\115\006" +
    "\000\002\115\004\000\002\115\004\000\002\156\003\000" +
    "\002\156\005\000\002\161\005\000\002\161\005\000\002" +
    "\161\005\000\002\157\003\000\002\116\003\000\002\116" +
    "\003\000\002\217\003\000\002\217\003\000\002\220\003" +
    "\000\002\220\004\000\002\220\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0439\000\002\001\ufffb\000\004\002\u043b\001\002\000" +
    "\252\003\134\004\167\005\203\006\123\007\012\010\072" +
    "\011\040\013\070\015\107\020\150\021\024\022\142\023" +
    "\136\024\051\026\037\030\116\032\202\035\120\037\151" +
    "\043\063\044\140\045\104\046\124\047\156\050\160\051" +
    "\013\052\046\054\200\056\031\057\011\061\111\062\173" +
    "\063\034\064\065\065\036\066\166\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\106\074" +
    "\111\113\112\147\113\045\114\075\115\027\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\147\010" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\047\221\071\222\020\226" +
    "\175\231\115\232\127\233\066\234\112\236\137\240\133" +
    "\001\001\000\002\001\ufe83\000\004\226\u0438\001\002\000" +
    "\002\001\uffbe\000\006\013\u042d\231\u042e\001\002\000\002" +
    "\001\ufe87\000\154\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\001\ufdda\000\004\226\u0424\001" +
    "\002\000\002\001\ufec9\000\002\001\ufebc\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\004\065\u0311\001\002\000\072\034\u016f\125" +
    "\u0167\126\u0176\127\u015f\146\u0164\147\u0422\150\u0160\151\u0170" +
    "\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160" +
    "\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a" +
    "\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177" +
    "\u0162\001\002\000\004\212\u041f\001\ufe3d\000\002\001\ufe81" +
    "\000\154\004\167\006\123\007\012\010\072\011\206\013" +
    "\070\020\150\035\120\046\211\062\173\063\034\073\176" +
    "\074\014\075\023\076\052\077\055\100\152\101\006\102" +
    "\041\111\210\112\147\113\045\114\075\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\207\226\175\231\115\232\127\233\066" +
    "\234\112\240\133\001\002\000\002\001\ufe1a\000\042\071" +
    "\u0159\131\u014f\132\u0154\133\u0150\134\u015b\135\u0153\136\u015a" +
    "\137\u0156\140\u0158\141\u0152\142\u014e\143\u0155\144\u0157\145" +
    "\u0151\200\ufe2f\201\ufe2f\001\ufe31\000\002\001\uffd9\000\002" +
    "\001\uffab\000\020\011\206\020\254\046\u040c\047\u040f\114" +
    "\u040e\116\064\226\252\001\002\000\154\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\207\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\154\004\167\006\123\007\012\010\072\011\206\013" +
    "\070\020\150\035\120\046\211\062\173\063\034\073\176" +
    "\074\014\075\023\076\052\077\055\100\152\101\006\102" +
    "\041\111\210\112\147\113\045\114\075\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\207\226\175\231\115\232\127\233\066" +
    "\234\112\240\133\001\002\000\004\226\u0406\001\002\000" +
    "\004\131\u0404\001\002\000\002\001\uff9a\000\004\226\u03f3" +
    "\001\002\000\004\230\u03f2\001\ufdde\000\014\013\070\017" +
    "\u03f0\103\u0139\104\u0324\105\u0323\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\002\001\ufe1f\000\154\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\002\001\ufe82\000\004\106\u03d8\001\002\000\006\013\u03cf" +
    "\046\u021f\001\ufe9f\000\004\212\u03cc\001\ufe1e\000\004\226" +
    "\u03c3\001\002\000\002\001\ufe7f\000\004\212\u03c0\001\ufe1d" +
    "\000\004\011\u03b1\001\002\000\002\001\ufe7e\000\002\001" +
    "\ufe2e\000\004\226\u03ae\001\002\000\156\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\154\u039b\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\ufe04\000\024\011\206\013\070\074\014\111\u01ee\114" +
    "\u01ea\116\064\212\060\220\304\231\115\001\002\000\012" +
    "\106\u0195\110\ufe20\212\u0196\226\ufe29\001\ufe1c\000\156\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\147\u0397\167\121\170\100" +
    "\175\171\176\017\200\061\201\177\202\032\203\154\204" +
    "\044\205\146\206\105\207\155\210\101\211\042\212\060" +
    "\214\110\220\207\226\175\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\002\001\ufddd\000\004\226\u0394" +
    "\001\002\000\012\013\070\017\u0392\104\u0324\105\u0323\001" +
    "\ufe8f\000\006\110\u038b\212\u038a\001\002\000\002\001\ufddf" +
    "\000\004\065\u0312\001\002\000\002\001\ufe86\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\002\001\uffd8\000\006\011\206\116\064" +
    "\001\002\000\002\001\ufec6\000\004\212\u0207\001\ufebb\000" +
    "\154\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\167\121\170\100" +
    "\175\171\176\017\200\061\201\177\202\032\203\154\204" +
    "\044\205\146\206\105\207\155\210\101\211\042\212\060" +
    "\214\110\220\207\226\175\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\154\004\167\006\123\007\012" +
    "\010\072\011\206\013\070\020\150\035\120\046\211\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\111\210\112\147\113\045\114" +
    "\075\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\154" +
    "\004\167\006\123\007\012\010\072\011\206\013\070\020" +
    "\150\035\120\046\211\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\111" +
    "\210\112\147\113\045\114\075\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\002\000\006\013\070\231\u019f\001\002\000" +
    "\004\011\u037f\001\002\000\154\004\167\006\123\007\012" +
    "\010\072\011\206\013\070\020\150\035\120\046\211\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\111\210\112\147\113\045\114" +
    "\075\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\002" +
    "\001\ufe45\000\002\001\uffc5\000\020\011\206\013\070\111" +
    "\u0189\114\u0182\116\064\220\304\231\115\001\002\000\004" +
    "\226\u0374\001\002\000\012\013\070\017\u0325\104\u0324\105" +
    "\u0323\001\002\000\010\011\206\114\u0142\116\064\001\ufff2" +
    "\000\006\200\u0364\201\u0365\001\002\000\004\106\u01a0\001" +
    "\ufe0b\000\004\226\u034c\001\002\000\002\001\ufff7\000\154" +
    "\004\167\006\123\007\012\010\072\011\206\013\070\020" +
    "\150\035\120\046\211\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\111" +
    "\210\112\147\113\045\114\075\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\002\000\154\004\167\006\123\007\012\010" +
    "\072\011\206\013\070\020\150\035\120\046\211\062\173" +
    "\063\034\073\176\074\014\075\023\076\052\077\055\100" +
    "\152\101\006\102\041\111\210\112\147\113\045\114\075" +
    "\116\064\117\033\120\102\121\057\122\144\123\122\130" +
    "\073\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\207\226\175\231\115" +
    "\232\127\233\066\234\112\240\133\001\002\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\002\001\ufe88\000\004\154\212\001\uffaa" +
    "\000\002\001\ufe41\000\002\001\uffdc\000\012\013\070\017" +
    "\u0325\104\u0324\105\u0323\001\002\000\002\001\ufe16\000\004" +
    "\011\u02c2\001\002\000\006\124\u02bd\147\u02be\001\002\000" +
    "\002\001\ufe80\000\002\001\uffda\000\002\001\ufe17\000\234" +
    "\003\134\004\167\005\203\006\123\007\012\010\072\011" +
    "\040\013\070\015\107\020\150\021\024\022\142\023\136" +
    "\024\051\026\037\030\116\032\202\035\120\037\151\043" +
    "\063\044\140\045\104\046\211\050\160\051\013\052\046" +
    "\054\200\056\241\057\011\061\111\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\106\074\111\210\112\147\113\045\114\075\115" +
    "\027\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\147\010\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\047\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\002\001\uff97\000\156\004\167\006\123\007\012\010" +
    "\072\011\206\013\070\020\150\035\120\046\211\062\173" +
    "\063\034\073\176\074\014\075\023\076\052\077\055\100" +
    "\152\101\006\102\041\111\210\112\147\113\045\114\075" +
    "\116\064\117\033\120\102\121\057\122\144\123\122\130" +
    "\073\147\u02b4\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\004\212\u02b1\001\ufe3c\000\154\004\167\006\123\007\012" +
    "\010\072\011\206\013\070\020\150\035\120\046\211\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\111\210\112\147\113\045\114" +
    "\075\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\002" +
    "\001\ufff6\000\154\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\001\002\000\002\001\ufffe\000" +
    "\154\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\167\121\170\100" +
    "\175\171\176\017\200\061\201\177\202\032\203\154\204" +
    "\044\205\146\206\105\207\155\210\101\211\042\212\060" +
    "\214\110\220\207\226\175\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\002\001\ufe7d\000\004\212\u02a7" +
    "\001\ufe85\000\004\226\u028c\001\002\000\002\001\ufe84\000" +
    "\002\001\uffac\000\154\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\004\011\u0287\001\002\000\004\147\u0286\001" +
    "\002\000\156\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\147\u0281" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\004\212\u027e" +
    "\001\002\000\002\001\ufe32\000\004\110\u027c\001\002\000" +
    "\002\001\ufe33\000\004\114\u027a\001\uffff\000\002\001\uff93" +
    "\000\004\226\u0275\001\ufe92\000\010\110\ufe9e\212\ufe9e\226" +
    "\u01f0\001\ufe44\000\154\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\002\001\ufff8" +
    "\000\004\226\u026e\001\002\000\004\071\u0263\001\ufeca\000" +
    "\156\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\051\013\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\002\000\004\226\u0255\001\002" +
    "\000\024\011\206\013\070\074\014\111\u01ee\114\u01ea\116" +
    "\064\212\060\220\304\231\115\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\002\001\ufffc\000\004\226\u0241\001\002\000" +
    "\004\226\204\001\002\000\154\004\167\006\123\007\012" +
    "\010\072\011\206\013\070\020\150\035\120\046\211\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\111\210\112\147\113\045\114" +
    "\075\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\072" +
    "\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151" +
    "\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d" +
    "\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166" +
    "\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e" +
    "\177\u0162\227\u0227\001\002\000\002\001\ufdde\000\004\046" +
    "\u021f\001\ufe9f\000\004\114\u0142\001\002\000\004\154\212" +
    "\001\uffaa\000\002\001\uffa9\000\004\226\214\001\002\000" +
    "\022\003\223\011\206\074\215\111\222\114\225\116\064" +
    "\227\uff66\237\221\001\uff5b\000\002\001\uff59\000\002\001" +
    "\ufe9b\000\010\013\301\154\300\241\277\001\002\000\004" +
    "\124\275\001\uff67\000\002\001\uff58\000\004\114\273\001" +
    "\002\000\002\001\uff5c\000\002\001\uff5a\000\006\011\206" +
    "\116\064\001\002\000\002\001\uff65\000\004\227\230\001" +
    "\002\000\004\056\231\001\ufeae\000\004\226\260\001\002" +
    "\000\002\001\ufeb8\000\006\003\235\106\234\001\002\000" +
    "\002\001\uffe1\000\002\001\ufeb3\000\002\001\ufeb7\000\252" +
    "\003\134\004\167\005\203\006\123\007\012\010\072\011" +
    "\040\013\070\015\107\020\150\021\024\022\142\023\136" +
    "\024\051\026\037\030\116\032\202\035\120\037\151\043" +
    "\063\044\140\045\104\046\124\050\160\051\013\052\046" +
    "\054\200\056\241\057\011\061\111\062\173\063\034\064" +
    "\242\065\036\066\166\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\106\074\107\244\111" +
    "\210\112\147\113\045\114\075\115\027\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\147\010\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\047\221\071\222\020\226\175" +
    "\231\115\232\127\233\066\234\112\236\137\240\133\001" +
    "\002\000\002\001\uffe2\000\006\020\254\226\252\001\002" +
    "\000\004\226\247\001\002\000\002\001\uffdf\000\002\001" +
    "\ufeb4\000\002\001\uffde\000\002\001\uffe0\000\004\227\250" +
    "\001\002\000\004\147\251\001\002\000\002\001\uffdd\000" +
    "\004\020\256\001\002\000\004\147\255\001\002\000\002" +
    "\001\uffae\000\002\001\uffc3\000\004\227\257\001\002\000" +
    "\002\001\uffad\000\006\013\263\154\261\001\002\000\004" +
    "\013\271\001\002\000\006\124\265\227\264\001\002\000" +
    "\002\001\ufeaa\000\002\001\ufead\000\006\013\267\154\266" +
    "\001\002\000\004\013\270\001\002\000\002\001\ufeac\000" +
    "\002\001\ufeab\000\002\001\ufea9\000\002\001\ufe99\000\006" +
    "\011\206\116\064\001\002\000\002\001\ufe9a\000\024\003" +
    "\223\011\206\074\215\111\222\114\225\116\064\124\uff63" +
    "\227\uff63\237\221\001\uff5b\000\002\001\uff64\000\004\013" +
    "\u0141\001\002\000\006\013\u013d\241\u013c\001\002\000\004" +
    "\131\302\001\uff62\000\064\006\123\007\012\010\072\011" +
    "\206\020\317\074\312\075\023\076\052\077\055\100\152" +
    "\101\006\102\303\111\314\112\147\113\045\114\306\116" +
    "\064\167\322\170\313\175\311\176\316\212\320\220\304" +
    "\226\325\240\133\001\002\000\006\017\u013a\103\u0139\001" +
    "\002\000\002\001\ufe9f\000\004\110\u0136\001\002\000\006" +
    "\011\206\116\064\001\002\000\002\001\ufe4f\000\004\212" +
    "\u0132\001\ufe48\000\064\006\123\007\012\010\072\011\206" +
    "\020\317\074\312\075\023\076\052\077\055\100\152\101" +
    "\006\102\303\111\314\112\147\113\045\114\306\116\064" +
    "\167\322\170\313\175\311\176\316\212\320\220\304\226" +
    "\325\240\133\001\002\000\004\226\u012e\001\002\000\064" +
    "\006\123\007\012\010\072\011\206\020\317\074\312\075" +
    "\023\076\052\077\055\100\152\101\006\102\303\111\314" +
    "\112\147\113\045\114\306\116\064\167\322\170\313\175" +
    "\311\176\316\212\320\220\304\226\325\240\133\001\002" +
    "\000\004\114\u012b\001\002\000\002\001\ufe49\000\064\006" +
    "\123\007\012\010\072\011\206\020\317\074\312\075\023" +
    "\076\052\077\055\100\152\101\006\102\303\111\314\112" +
    "\147\113\045\114\306\116\064\167\322\170\313\175\311" +
    "\176\316\212\320\220\304\226\325\240\133\001\002\000" +
    "\004\212\u0127\001\ufe85\000\064\006\123\007\012\010\072" +
    "\011\206\020\317\074\312\075\023\076\052\077\055\100" +
    "\152\101\006\102\303\111\314\112\147\113\045\114\306" +
    "\116\064\167\322\170\313\175\311\176\316\212\320\220" +
    "\304\226\325\240\133\001\ufe3b\000\070\125\346\126\367" +
    "\127\337\146\341\150\336\151\360\152\340\153\350\154" +
    "\361\155\365\156\352\157\334\160\347\161\364\162\362" +
    "\163\344\164\363\165\357\166\351\167\366\170\345\171" +
    "\356\172\343\173\353\174\335\177\342\212\355\001\uff5e" +
    "\000\064\006\123\007\012\010\072\011\206\020\317\074" +
    "\312\075\023\076\052\077\055\100\152\101\006\102\303" +
    "\111\314\112\147\113\045\114\306\116\064\167\322\170" +
    "\313\175\311\176\316\212\320\220\304\226\325\240\133" +
    "\001\002\000\004\212\u0118\001\ufe4b\000\004\110\ufe9e\001" +
    "\ufe4e\000\064\006\123\007\012\010\072\011\206\020\317" +
    "\074\312\075\023\076\052\077\055\100\152\101\006\102" +
    "\303\111\314\112\147\113\045\114\306\116\064\167\322" +
    "\170\313\175\311\176\316\212\320\220\304\226\325\240" +
    "\133\001\002\000\004\212\330\001\ufe4a\000\002\001\ufe7a" +
    "\000\052\006\123\007\012\010\072\011\206\020\317\074" +
    "\312\075\023\076\052\077\055\100\152\101\006\102\303" +
    "\111\314\112\147\113\045\114\306\116\064\212\320\220" +
    "\304\240\133\001\002\000\004\213\332\001\002\000\002" +
    "\001\ufe55\000\072\125\346\126\367\127\337\146\341\150" +
    "\336\151\360\152\340\153\350\154\361\155\365\156\352" +
    "\157\334\160\347\161\364\162\362\163\344\164\363\165" +
    "\357\166\351\167\366\170\345\171\356\172\343\173\353" +
    "\174\335\177\342\212\355\227\354\001\002\000\064\006" +
    "\123\007\012\010\072\011\206\020\317\074\312\075\023" +
    "\076\052\077\055\100\152\101\006\102\303\111\314\112" +
    "\147\113\045\114\306\116\064\167\322\170\313\175\311" +
    "\176\316\212\320\220\304\226\325\240\133\001\002\000" +
    "\064\006\123\007\012\010\072\011\206\020\317\074\312" +
    "\075\023\076\052\077\055\100\152\101\006\102\303\111" +
    "\314\112\147\113\045\114\306\116\064\167\322\170\313" +
    "\175\311\176\316\212\320\220\304\226\325\240\133\001" +
    "\002\000\064\006\123\007\012\010\072\011\206\020\317" +
    "\074\312\075\023\076\052\077\055\100\152\101\006\102" +
    "\303\111\314\112\147\113\045\114\306\116\064\167\322" +
    "\170\313\175\311\176\316\212\320\220\304\226\325\240" +
    "\133\001\002\000\064\006\123\007\012\010\072\011\206" +
    "\020\317\074\312\075\023\076\052\077\055\100\152\101" +
    "\006\102\303\111\314\112\147\113\045\114\306\116\064" +
    "\167\322\170\313\175\311\176\316\212\320\220\304\226" +
    "\325\240\133\001\002\000\064\006\123\007\012\010\072" +
    "\011\206\020\317\074\312\075\023\076\052\077\055\100" +
    "\152\101\006\102\303\111\314\112\147\113\045\114\306" +
    "\116\064\167\322\170\313\175\311\176\316\212\320\220" +
    "\304\226\325\240\133\001\002\000\066\006\123\007\012" +
    "\010\072\011\206\020\317\074\312\075\023\076\052\077" +
    "\055\100\152\101\006\102\303\111\314\112\147\113\045" +
    "\114\306\116\064\167\322\170\313\175\311\176\316\212" +
    "\320\220\304\226\325\230\u010e\240\133\001\002\000\064" +
    "\006\123\007\012\010\072\011\206\020\317\074\312\075" +
    "\023\076\052\077\055\100\152\101\006\102\303\111\314" +
    "\112\147\113\045\114\306\116\064\167\322\170\313\175" +
    "\311\176\316\212\320\220\304\226\325\240\133\001\002" +
    "\000\064\006\123\007\012\010\072\011\206\020\317\074" +
    "\312\075\023\076\052\077\055\100\152\101\006\102\303" +
    "\111\314\112\147\113\045\114\306\116\064\167\322\170" +
    "\313\175\311\176\316\212\320\220\304\226\325\240\133" +
    "\001\002\000\064\006\123\007\012\010\072\011\206\020" +
    "\317\074\312\075\023\076\052\077\055\100\152\101\006" +
    "\102\303\111\314\112\147\113\045\114\306\116\064\167" +
    "\322\170\313\175\311\176\316\212\320\220\304\226\325" +
    "\240\133\001\002\000\064\006\123\007\012\010\072\011" +
    "\206\020\317\074\312\075\023\076\052\077\055\100\152" +
    "\101\006\102\303\111\314\112\147\113\045\114\306\116" +
    "\064\167\322\170\313\175\311\176\316\212\320\220\304" +
    "\226\325\240\133\001\002\000\064\006\123\007\012\010" +
    "\072\011\206\020\317\074\312\075\023\076\052\077\055" +
    "\100\152\101\006\102\303\111\314\112\147\113\045\114" +
    "\306\116\064\167\322\170\313\175\311\176\316\212\320" +
    "\220\304\226\325\240\133\001\002\000\064\006\123\007" +
    "\012\010\072\011\206\020\317\074\312\075\023\076\052" +
    "\077\055\100\152\101\006\102\303\111\314\112\147\113" +
    "\045\114\306\116\064\167\322\170\313\175\311\176\316" +
    "\212\320\220\304\226\325\240\133\001\002\000\064\006" +
    "\123\007\012\010\072\011\206\020\317\074\312\075\023" +
    "\076\052\077\055\100\152\101\006\102\303\111\314\112" +
    "\147\113\045\114\306\116\064\167\322\170\313\175\311" +
    "\176\316\212\320\220\304\226\325\240\133\001\002\000" +
    "\064\006\123\007\012\010\072\011\206\020\317\074\312" +
    "\075\023\076\052\077\055\100\152\101\006\102\303\111" +
    "\314\112\147\113\045\114\306\116\064\167\322\170\313" +
    "\175\311\176\316\212\320\220\304\226\325\240\133\001" +
    "\002\000\064\006\123\007\012\010\072\011\206\020\317" +
    "\074\312\075\023\076\052\077\055\100\152\101\006\102" +
    "\303\111\314\112\147\113\045\114\306\116\064\167\322" +
    "\170\313\175\311\176\316\212\320\220\304\226\325\240" +
    "\133\001\002\000\064\006\123\007\012\010\072\011\206" +
    "\020\317\074\312\075\023\076\052\077\055\100\152\101" +
    "\006\102\303\111\314\112\147\113\045\114\306\116\064" +
    "\167\322\170\313\175\311\176\316\212\320\220\304\226" +
    "\325\240\133\001\002\000\002\001\ufe59\000\052\006\123" +
    "\007\012\010\072\011\206\020\317\074\312\075\023\076" +
    "\052\077\055\100\152\101\006\102\303\111\314\112\147" +
    "\113\045\114\306\116\064\212\320\220\304\240\133\001" +
    "\002\000\064\006\123\007\012\010\072\011\206\020\317" +
    "\074\312\075\023\076\052\077\055\100\152\101\006\102" +
    "\303\111\314\112\147\113\045\114\306\116\064\167\322" +
    "\170\313\175\311\176\316\212\320\220\304\226\325\240" +
    "\133\001\002\000\064\006\123\007\012\010\072\011\206" +
    "\020\317\074\312\075\023\076\052\077\055\100\152\101" +
    "\006\102\303\111\314\112\147\113\045\114\306\116\064" +
    "\167\322\170\313\175\311\176\316\212\320\220\304\226" +
    "\325\240\133\001\002\000\064\006\123\007\012\010\072" +
    "\011\206\020\317\074\312\075\023\076\052\077\055\100" +
    "\152\101\006\102\303\111\314\112\147\113\045\114\306" +
    "\116\064\167\322\170\313\175\311\176\316\212\320\220" +
    "\304\226\325\240\133\001\002\000\064\006\123\007\012" +
    "\010\072\011\206\020\317\074\312\075\023\076\052\077" +
    "\055\100\152\101\006\102\303\111\314\112\147\113\045" +
    "\114\306\116\064\167\322\170\313\175\311\176\316\212" +
    "\320\220\304\226\325\240\133\001\002\000\064\006\123" +
    "\007\012\010\072\011\206\020\317\074\312\075\023\076" +
    "\052\077\055\100\152\101\006\102\303\111\314\112\147" +
    "\113\045\114\306\116\064\167\322\170\313\175\311\176" +
    "\316\212\320\220\304\226\325\240\133\001\002\000\064" +
    "\006\123\007\012\010\072\011\206\020\317\074\312\075" +
    "\023\076\052\077\055\100\152\101\006\102\303\111\314" +
    "\112\147\113\045\114\306\116\064\167\322\170\313\175" +
    "\311\176\316\212\320\220\304\226\325\240\133\001\002" +
    "\000\064\006\123\007\012\010\072\011\206\020\317\074" +
    "\312\075\023\076\052\077\055\100\152\101\006\102\303" +
    "\111\314\112\147\113\045\114\306\116\064\167\322\170" +
    "\313\175\311\176\316\212\320\220\304\226\325\240\133" +
    "\001\002\000\064\006\123\007\012\010\072\011\206\020" +
    "\317\074\312\075\023\076\052\077\055\100\152\101\006" +
    "\102\303\111\314\112\147\113\045\114\306\116\064\167" +
    "\322\170\313\175\311\176\316\212\320\220\304\226\325" +
    "\240\133\001\002\000\064\006\123\007\012\010\072\011" +
    "\206\020\317\074\312\075\023\076\052\077\055\100\152" +
    "\101\006\102\303\111\314\112\147\113\045\114\306\116" +
    "\064\167\322\170\313\175\311\176\316\212\320\220\304" +
    "\226\325\240\133\001\002\000\064\006\123\007\012\010" +
    "\072\011\206\020\317\074\312\075\023\076\052\077\055" +
    "\100\152\101\006\102\303\111\314\112\147\113\045\114" +
    "\306\116\064\167\322\170\313\175\311\176\316\212\320" +
    "\220\304\226\325\240\133\001\002\000\064\127\337\146" +
    "\341\150\336\151\360\152\340\153\350\154\361\155\365" +
    "\156\352\157\334\160\347\161\364\162\362\163\344\164" +
    "\363\165\357\166\351\167\366\170\345\171\356\172\343" +
    "\173\353\174\335\177\342\212\355\001\ufe6c\000\014\171" +
    "\356\172\343\173\353\174\335\212\355\001\ufe67\000\036" +
    "\161\364\162\362\163\344\164\363\165\357\166\351\167" +
    "\366\170\345\171\356\172\343\173\353\174\335\177\342" +
    "\212\355\001\ufe76\000\026\165\357\166\351\167\366\170" +
    "\345\171\356\172\343\173\353\174\335\177\342\212\355" +
    "\001\ufe73\000\026\165\357\166\351\167\366\170\345\171" +
    "\356\172\343\173\353\174\335\177\342\212\355\001\ufe72" +
    "\000\026\165\357\166\351\167\366\170\345\171\356\172" +
    "\343\173\353\174\335\177\342\212\355\001\ufe71\000\046" +
    "\155\365\156\352\157\334\160\347\161\364\162\362\163" +
    "\344\164\363\165\357\166\351\167\366\170\345\171\356" +
    "\172\343\173\353\174\335\177\342\212\355\001\ufe6a\000" +
    "\054\152\340\153\350\154\361\155\365\156\352\157\334" +
    "\160\347\161\364\162\362\163\344\164\363\165\357\166" +
    "\351\167\366\170\345\171\356\172\343\173\353\174\335" +
    "\177\342\212\355\001\ufe6f\000\022\167\366\170\345\171" +
    "\356\172\343\173\353\174\335\177\342\212\355\001\ufe62" +
    "\000\004\212\355\001\ufe65\000\004\213\u0103\001\002\000" +
    "\002\001\ufe79\000\004\212\355\001\ufe64\000\036\161\364" +
    "\162\362\163\344\164\363\165\357\166\351\167\366\170" +
    "\345\171\356\172\343\173\353\174\335\177\342\212\355" +
    "\001\ufe75\000\022\167\366\170\345\171\356\172\343\173" +
    "\353\174\335\177\342\212\355\001\ufe61\000\050\154\361" +
    "\155\365\156\352\157\334\160\347\161\364\162\362\163" +
    "\344\164\363\165\357\166\351\167\366\170\345\171\356" +
    "\172\343\173\353\174\335\177\342\212\355\001\ufe69\000" +
    "\036\161\364\162\362\163\344\164\363\165\357\166\351" +
    "\167\366\170\345\171\356\172\343\173\353\174\335\177" +
    "\342\212\355\001\ufe77\000\066\126\367\127\337\146\341" +
    "\150\336\151\360\152\340\153\350\154\361\155\365\156" +
    "\352\157\334\160\347\161\364\162\362\163\344\164\363" +
    "\165\357\166\351\167\366\170\345\171\356\172\343\173" +
    "\353\174\335\177\342\212\355\001\ufe6e\000\014\171\356" +
    "\172\343\173\353\174\335\212\355\001\ufe66\000\026\165" +
    "\357\166\351\167\366\170\345\171\356\172\343\173\353" +
    "\174\335\177\342\212\355\001\ufe74\000\004\212\355\001" +
    "\ufe60\000\014\171\356\172\343\173\353\174\335\212\355" +
    "\001\ufe68\000\064\006\123\007\012\010\072\011\206\020" +
    "\317\074\312\075\023\076\052\077\055\100\152\101\006" +
    "\102\303\111\314\112\147\113\045\114\306\116\064\167" +
    "\322\170\313\175\311\176\316\212\320\220\304\226\325" +
    "\240\133\001\002\000\072\125\346\126\367\127\337\146" +
    "\341\150\336\151\360\152\340\153\350\154\361\155\365" +
    "\156\352\157\334\160\347\161\364\162\362\163\344\164" +
    "\363\165\357\166\351\167\366\170\345\171\356\172\343" +
    "\173\353\174\335\177\342\212\355\230\u0110\001\002\000" +
    "\064\006\123\007\012\010\072\011\206\020\317\074\312" +
    "\075\023\076\052\077\055\100\152\101\006\102\303\111" +
    "\314\112\147\113\045\114\306\116\064\167\322\170\313" +
    "\175\311\176\316\212\320\220\304\226\325\240\133\001" +
    "\002\000\070\125\346\126\367\127\337\146\341\150\336" +
    "\151\360\152\340\153\350\154\361\155\365\156\352\157" +
    "\334\160\347\161\364\162\362\163\344\164\363\165\357" +
    "\166\351\167\366\170\345\171\356\172\343\173\353\174" +
    "\335\177\342\212\355\001\ufe5b\000\070\125\346\126\367" +
    "\127\337\146\341\150\336\151\360\152\340\153\350\154" +
    "\361\155\365\156\352\157\334\160\347\161\364\162\362" +
    "\163\344\164\363\165\357\166\351\167\366\170\345\171" +
    "\356\172\343\173\353\174\335\177\342\212\355\001\ufe5a" +
    "\000\052\153\350\154\361\155\365\156\352\157\334\160" +
    "\347\161\364\162\362\163\344\164\363\165\357\166\351" +
    "\167\366\170\345\171\356\172\343\173\353\174\335\177" +
    "\342\212\355\001\ufe6b\000\062\146\341\150\336\151\360" +
    "\152\340\153\350\154\361\155\365\156\352\157\334\160" +
    "\347\161\364\162\362\163\344\164\363\165\357\166\351" +
    "\167\366\170\345\171\356\172\343\173\353\174\335\177" +
    "\342\212\355\001\ufe6d\000\056\151\360\152\340\153\350" +
    "\154\361\155\365\156\352\157\334\160\347\161\364\162" +
    "\362\163\344\164\363\165\357\166\351\167\366\170\345" +
    "\171\356\172\343\173\353\174\335\177\342\212\355\001" +
    "\ufe70\000\004\212\355\001\ufe63\000\036\161\364\162\362" +
    "\163\344\164\363\165\357\166\351\167\366\170\345\171" +
    "\356\172\343\173\353\174\335\177\342\212\355\001\ufe78" +
    "\000\052\006\123\007\012\010\072\011\206\020\317\074" +
    "\312\075\023\076\052\077\055\100\152\101\006\102\303" +
    "\111\314\112\147\113\045\114\306\116\064\212\320\220" +
    "\304\240\133\001\002\000\004\213\u011a\001\002\000\002" +
    "\001\ufe56\000\014\171\356\172\343\173\353\174\335\212" +
    "\355\001\ufe5f\000\004\124\u0122\001\ufe39\000\072\072\u0120" +
    "\125\346\126\367\127\337\146\341\150\336\151\360\152" +
    "\340\153\350\154\361\155\365\156\352\157\334\160\347" +
    "\161\364\162\362\163\344\164\363\165\357\166\351\167" +
    "\366\170\345\171\356\172\343\173\353\174\335\177\342" +
    "\212\355\001\ufe34\000\004\213\u011f\001\002\000\002\001" +
    "\ufe57\000\064\006\123\007\012\010\072\011\206\020\317" +
    "\074\312\075\023\076\052\077\055\100\152\101\006\102" +
    "\303\111\314\112\147\113\045\114\306\116\064\167\322" +
    "\170\313\175\311\176\316\212\320\220\304\226\325\240" +
    "\133\001\002\000\070\125\346\126\367\127\337\146\341" +
    "\150\336\151\360\152\340\153\350\154\361\155\365\156" +
    "\352\157\334\160\347\161\364\162\362\163\344\164\363" +
    "\165\357\166\351\167\366\170\345\171\356\172\343\173" +
    "\353\174\335\177\342\212\355\001\ufe35\000\064\006\123" +
    "\007\012\010\072\011\206\020\317\074\312\075\023\076" +
    "\052\077\055\100\152\101\006\102\303\111\314\112\147" +
    "\113\045\114\306\116\064\167\322\170\313\175\311\176" +
    "\316\212\320\220\304\226\325\240\133\001\ufe38\000\002" +
    "\001\ufe3a\000\072\072\u0125\125\346\126\367\127\337\146" +
    "\341\150\336\151\360\152\340\153\350\154\361\155\365" +
    "\156\352\157\334\160\347\161\364\162\362\163\344\164" +
    "\363\165\357\166\351\167\366\170\345\171\356\172\343" +
    "\173\353\174\335\177\342\212\355\001\ufe36\000\064\006" +
    "\123\007\012\010\072\011\206\020\317\074\312\075\023" +
    "\076\052\077\055\100\152\101\006\102\303\111\314\112" +
    "\147\113\045\114\306\116\064\167\322\170\313\175\311" +
    "\176\316\212\320\220\304\226\325\240\133\001\002\000" +
    "\070\125\346\126\367\127\337\146\341\150\336\151\360" +
    "\152\340\153\350\154\361\155\365\156\352\157\334\160" +
    "\347\161\364\162\362\163\344\164\363\165\357\166\351" +
    "\167\366\170\345\171\356\172\343\173\353\174\335\177" +
    "\342\212\355\001\ufe37\000\052\006\123\007\012\010\072" +
    "\011\206\020\317\074\312\075\023\076\052\077\055\100" +
    "\152\101\006\102\303\111\314\112\147\113\045\114\306" +
    "\116\064\212\320\220\304\240\133\001\002\000\004\213" +
    "\u0129\001\002\000\002\001\ufe54\000\004\212\355\001\ufe5d" +
    "\000\006\011\206\116\064\001\002\000\004\110\ufe9d\001" +
    "\ufe4d\000\014\171\356\172\343\173\353\174\335\212\355" +
    "\001\ufe5e\000\064\006\123\007\012\010\072\011\206\020" +
    "\317\074\312\075\023\076\052\077\055\100\152\101\006" +
    "\102\303\111\314\112\147\113\045\114\306\116\064\167" +
    "\322\170\313\175\311\176\316\212\320\220\304\226\325" +
    "\240\133\001\ufe3b\000\004\227\u0130\001\002\000\002\001" +
    "\ufe58\000\004\212\355\001\ufe5c\000\052\006\123\007\012" +
    "\010\072\011\206\020\317\074\312\075\023\076\052\077" +
    "\055\100\152\101\006\102\303\111\314\112\147\113\045" +
    "\114\306\116\064\212\320\220\304\240\133\001\002\000" +
    "\004\213\u0134\001\002\000\002\001\ufe53\000\004\110\ufe9c" +
    "\001\ufe4c\000\006\011\u0137\065\u0138\001\002\000\002\001" +
    "\ufe47\000\002\001\ufe46\000\002\001\ufe7b\000\004\103\u013b" +
    "\001\002\000\002\001\ufe7c\000\004\013\u0140\001\002\000" +
    "\004\131\u013e\001\uff60\000\064\006\123\007\012\010\072" +
    "\011\206\020\317\074\312\075\023\076\052\077\055\100" +
    "\152\101\006\102\303\111\314\112\147\113\045\114\306" +
    "\116\064\167\322\170\313\175\311\176\316\212\320\220" +
    "\304\226\325\240\133\001\002\000\070\125\346\126\367" +
    "\127\337\146\341\150\336\151\360\152\340\153\350\154" +
    "\361\155\365\156\352\157\334\160\347\161\364\162\362" +
    "\163\344\164\363\165\357\166\351\167\366\170\345\171" +
    "\356\172\343\173\353\174\335\177\342\212\355\001\uff5d" +
    "\000\002\001\uff5f\000\002\001\uff61\000\006\011\206\116" +
    "\064\001\002\000\010\110\ufe9d\212\ufe9d\226\u0144\001\ufe43" +
    "\000\160\004\167\006\123\007\012\010\072\011\206\013" +
    "\070\020\150\035\120\046\211\062\173\063\034\073\176" +
    "\074\014\075\023\076\052\077\055\100\152\101\006\102" +
    "\041\111\210\112\147\113\045\114\075\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\154\u0146\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\241\u014b\001\uff56\000\004\227" +
    "\u021e\001\002\000\024\011\206\013\070\074\014\111\u01ee" +
    "\114\u01ea\116\064\212\060\220\304\231\115\001\002\000" +
    "\070\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160" +
    "\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157" +
    "\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\001\002\000\046\071\u0159\124\uff54\131\u014f" +
    "\132\u0154\133\u0150\134\u015b\135\u0153\136\u015a\137\u0156\140" +
    "\u0158\141\u0152\142\u014e\143\u0155\144\u0157\145\u0151\200\ufe2f" +
    "\201\ufe2f\227\uff54\001\ufe31\000\004\124\u0214\001\uff57\000" +
    "\006\124\uff55\227\uff55\001\ufe32\000\154\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\207\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\046\071\u0159\124\uff53\131\u014f\132\u0154\133\u0150\134" +
    "\u015b\135\u0153\136\u015a\137\u0156\140\u0158\141\u0152\142\u014e" +
    "\143\u0155\144\u0157\145\u0151\200\ufe2f\201\ufe2f\227\uff53\001" +
    "\ufe31\000\006\124\uff52\227\uff52\001\ufe32\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\156\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\154" +
    "\u01e6\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\207\226\175\231\115" +
    "\232\127\233\066\234\112\240\133\001\002\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\154\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\154\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\001\002\000\154\004\167\006" +
    "\123\007\012\010\072\011\206\013\070\020\150\035\120" +
    "\046\211\062\173\063\034\073\176\074\014\075\023\076" +
    "\052\077\055\100\152\101\006\102\041\111\210\112\147" +
    "\113\045\114\075\116\064\117\033\120\102\121\057\122" +
    "\144\123\122\130\073\167\121\170\100\175\171\176\017" +
    "\200\061\201\177\202\032\203\154\204\044\205\146\206" +
    "\105\207\155\210\101\211\042\212\060\214\110\220\207" +
    "\226\175\231\115\232\127\233\066\234\112\240\133\001" +
    "\002\000\154\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\002\000\154\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\207\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\154\004\167\006\123\007\012\010\072\011\206\013" +
    "\070\020\150\035\120\046\211\062\173\063\034\073\176" +
    "\074\014\075\023\076\052\077\055\100\152\101\006\102" +
    "\041\111\210\112\147\113\045\114\075\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\207\226\175\231\115\232\127\233\066" +
    "\234\112\240\133\001\002\000\154\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\014\011\206\013\070\106\u0193\116\064\231\115\001\002" +
    "\000\154\004\167\006\123\007\012\010\072\011\206\013" +
    "\070\020\150\035\120\046\211\062\173\063\034\073\176" +
    "\074\014\075\023\076\052\077\055\100\152\101\006\102" +
    "\041\111\210\112\147\113\045\114\075\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\207\226\175\231\115\232\127\233\066" +
    "\234\112\240\133\001\002\000\154\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169" +
    "\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162" +
    "\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166" +
    "\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufef8\000" +
    "\154\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\167\121\170\100" +
    "\175\171\176\017\200\061\201\177\202\032\203\154\204" +
    "\044\205\146\206\105\207\155\210\101\211\042\212\060" +
    "\214\110\220\207\226\175\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\154\004\167\006\123\007\012" +
    "\010\072\011\206\013\070\020\150\035\120\046\211\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\111\210\112\147\113\045\114" +
    "\075\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\154" +
    "\004\167\006\123\007\012\010\072\011\206\013\070\020" +
    "\150\035\120\046\211\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\111" +
    "\210\112\147\113\045\114\075\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\002\000\154\004\167\006\123\007\012\010" +
    "\072\011\206\013\070\020\150\035\120\046\211\062\173" +
    "\063\034\073\176\074\014\075\023\076\052\077\055\100" +
    "\152\101\006\102\041\111\210\112\147\113\045\114\075" +
    "\116\064\117\033\120\102\121\057\122\144\123\122\130" +
    "\073\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\207\226\175\231\115" +
    "\232\127\233\066\234\112\240\133\001\002\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\154\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\156\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\230\u01c4\231\115" +
    "\232\127\233\066\234\112\240\133\001\002\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\154\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\154\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\001\002\000\154\004\167\006" +
    "\123\007\012\010\072\011\206\013\070\020\150\035\120" +
    "\046\211\062\173\063\034\073\176\074\014\075\023\076" +
    "\052\077\055\100\152\101\006\102\041\111\210\112\147" +
    "\113\045\114\075\116\064\117\033\120\102\121\057\122" +
    "\144\123\122\130\073\167\121\170\100\175\171\176\017" +
    "\200\061\201\177\202\032\203\154\204\044\205\146\206" +
    "\105\207\155\210\101\211\042\212\060\214\110\220\207" +
    "\226\175\231\115\232\127\233\066\234\112\240\133\001" +
    "\002\000\154\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\002\000\154\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\207\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\154\004\167\006\123\007\012\010\072\011\206\013" +
    "\070\020\150\035\120\046\211\062\173\063\034\073\176" +
    "\074\014\075\023\076\052\077\055\100\152\101\006\102" +
    "\041\111\210\112\147\113\045\114\075\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\207\226\175\231\115\232\127\233\066" +
    "\234\112\240\133\001\002\000\154\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\154\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\167\121\170\100" +
    "\175\171\176\017\200\061\201\177\202\032\203\154\204" +
    "\044\205\146\206\105\207\155\210\101\211\042\212\060" +
    "\214\110\220\207\226\175\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\020\011\206\013\070\111\u0189" +
    "\114\u0182\116\064\220\304\231\115\001\002\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\154\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\154\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\001\002\000\154\004\167\006" +
    "\123\007\012\010\072\011\206\013\070\020\150\035\120" +
    "\046\211\062\173\063\034\073\176\074\014\075\023\076" +
    "\052\077\055\100\152\101\006\102\041\111\210\112\147" +
    "\113\045\114\075\116\064\117\033\120\102\121\057\122" +
    "\144\123\122\130\073\167\121\170\100\175\171\176\017" +
    "\200\061\201\177\202\032\203\154\204\044\205\146\206" +
    "\105\207\155\210\101\211\042\212\060\214\110\220\207" +
    "\226\175\231\115\232\127\233\066\234\112\240\133\001" +
    "\002\000\154\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\002\000\154\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\207\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\154\004\167\006\123\007\012\010\072\011\206\013" +
    "\070\020\150\035\120\046\211\062\173\063\034\073\176" +
    "\074\014\075\023\076\052\077\055\100\152\101\006\102" +
    "\041\111\210\112\147\113\045\114\075\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\207\226\175\231\115\232\127\233\066" +
    "\234\112\240\133\001\002\000\014\034\u016f\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\001\ufee1\000\064\034\u016f\127\u015f" +
    "\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\001\ufee6\000\036\034\u016f" +
    "\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167" +
    "\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162" +
    "\001\ufed3\000\026\034\u016f\165\u016e\166\u016a\167\u0177\170" +
    "\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufed0" +
    "\000\026\034\u016f\165\u016e\166\u016a\167\u0177\170\u0166\171" +
    "\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufece\000\026" +
    "\034\u016f\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\001\ufecf\000\046\034\u016f" +
    "\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163" +
    "\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d" +
    "\172\u0163\173\u016c\174\u015e\177\u0162\001\ufee4\000\054\034" +
    "\u016f\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d" +
    "\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166" +
    "\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e" +
    "\177\u0162\001\ufee9\000\002\001\ufe97\000\004\110\u01b7\001" +
    "\002\000\006\011\206\116\064\001\002\000\010\106\u0195" +
    "\110\ufe20\212\u0196\001\ufe1c\000\004\110\u01aa\001\ufe98\000" +
    "\002\001\ufecd\000\002\001\ufe95\000\006\013\070\231\u019f" +
    "\001\002\000\004\071\u018d\001\ufe96\000\004\114\u018b\001" +
    "\002\000\002\001\ufe9e\000\006\011\206\116\064\001\002" +
    "\000\002\001\ufe9d\000\014\011\206\013\070\106\u0193\116" +
    "\064\231\115\001\002\000\002\001\ufe0d\000\002\001\ufe0e" +
    "\000\002\001\ufe94\000\006\106\u01a3\212\u01a4\001\ufe93\000" +
    "\006\013\070\231\u019f\001\002\000\154\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\207\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\006\106\u0195\212\u0196\001\ufe29\000\154\004\167\006" +
    "\123\007\012\010\072\011\206\013\070\020\150\035\120" +
    "\046\211\062\173\063\034\073\176\074\014\075\023\076" +
    "\052\077\055\100\152\101\006\102\041\111\210\112\147" +
    "\113\045\114\075\116\064\117\033\120\102\121\057\122" +
    "\144\123\122\130\073\167\121\170\100\175\171\176\017" +
    "\200\061\201\177\202\032\203\154\204\044\205\146\206" +
    "\105\207\155\210\101\211\042\212\060\214\110\220\207" +
    "\226\175\231\115\232\127\233\066\234\112\240\133\001" +
    "\002\000\154\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\ufe14\000\070\034\u016f\125\u0167" +
    "\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153" +
    "\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174" +
    "\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170" +
    "\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufe13" +
    "\000\004\213\u0199\001\002\000\002\001\ufe19\000\072\034" +
    "\u016f\107\u019b\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160" +
    "\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157" +
    "\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\001\002\000\002\001\ufe18\000\072\034\u016f" +
    "\107\u019d\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151" +
    "\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d" +
    "\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166" +
    "\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e" +
    "\177\u0162\001\002\000\002\001\ufe0c\000\006\106\u0195\212" +
    "\u0196\001\ufe28\000\004\106\u01a0\001\ufe0a\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\072\034\u016f\107\u01a2\125\u0167\126\u0176\127" +
    "\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171" +
    "\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163" +
    "\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d" +
    "\172\u0163\173\u016c\174\u015e\177\u0162\001\002\000\002\001" +
    "\ufe15\000\154\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\002\000\154\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\207\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\ufe14" +
    "\000\004\213\u01a6\001\002\000\002\001\ufe10\000\072\034" +
    "\u016f\107\u01a8\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160" +
    "\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157" +
    "\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\001\002\000\002\001\ufe0f\000\006\106\u0195" +
    "\212\u0196\001\ufe1b\000\006\013\070\231\115\001\002\000" +
    "\006\106\u01b0\212\u01b1\001\ufe27\000\006\013\070\231\u019f" +
    "\001\002\000\002\001\ufe22\000\002\001\ufe23\000\006\106" +
    "\u01b0\212\u01b1\001\ufe26\000\154\004\167\006\123\007\012" +
    "\010\072\011\206\013\070\020\150\035\120\046\211\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\111\210\112\147\113\045\114" +
    "\075\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\154" +
    "\004\167\006\123\007\012\010\072\011\206\013\070\020" +
    "\150\035\120\046\211\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\111" +
    "\210\112\147\113\045\114\075\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\ufe14\000\004\213\u01b3\001\002\000\002\001" +
    "\ufe25\000\072\034\u016f\107\u01b5\125\u0167\126\u0176\127\u015f" +
    "\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\001\002\000\002\001\ufe24" +
    "\000\002\001\ufe9c\000\006\013\070\231\115\001\002\000" +
    "\002\001\ufe21\000\022\034\u016f\167\u0177\170\u0166\171\u016d" +
    "\172\u0163\173\u016c\174\u015e\177\u0162\001\ufedb\000\004\034" +
    "\u016f\001\ufedf\000\004\034\u016f\001\ufedd\000\036\034\u016f" +
    "\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167" +
    "\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162" +
    "\001\ufed2\000\022\034\u016f\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\001\ufeda\000\050\034\u016f" +
    "\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162" +
    "\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166" +
    "\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufee3\000" +
    "\036\034\u016f\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\001\ufed4\000\066\034\u016f\126\u0176\127\u015f" +
    "\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\001\ufee8\000\014\034\u016f" +
    "\171\u016d\172\u0163\173\u016c\174\u015e\001\ufee0\000\026\034" +
    "\u016f\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\177\u0162\001\ufed1\000\072\034\u016f\125" +
    "\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\230" +
    "\u01c6\001\002\000\154\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\070\034\u016f" +
    "\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152" +
    "\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168" +
    "\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167" +
    "\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162" +
    "\001\ufec7\000\154\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\001\002\000\070\034\u016f\125" +
    "\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufec8\000\004\034\u016f\001\ufede\000\014\034\u016f\171\u016d" +
    "\172\u0163\173\u016c\174\u015e\001\ufee2\000\052\034\u016f\153" +
    "\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174" +
    "\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170" +
    "\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufee5" +
    "\000\056\034\u016f\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\001\ufeea\000\062\034\u016f" +
    "\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\001\ufee7\000\004\034\u016f" +
    "\001\ufedc\000\036\034\u016f\161\u0174\162\u0173\163\u0165\164" +
    "\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\177\u0162\001\ufed5\000\062\034\u016f\146" +
    "\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175" +
    "\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164" +
    "\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\177\u0162\001\ufef5\000\004\226\u01d9\001" +
    "\ufe2d\000\010\106\u01a3\212\u01a4\226\u01d2\001\ufe2c\000\160" +
    "\004\167\006\123\007\012\010\072\011\206\013\070\020" +
    "\150\035\120\046\211\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\111" +
    "\210\112\147\113\045\114\075\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\154\u0146\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\207\226\175\231\115\232\127\233\066" +
    "\234\112\240\133\241\u014b\001\uff56\000\004\227\u01d4\001" +
    "\002\000\002\001\ufe12\000\004\212\u01d6\001\ufe2a\000\154" +
    "\004\167\006\123\007\012\010\072\011\206\013\070\020" +
    "\150\035\120\046\211\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\111" +
    "\210\112\147\113\045\114\075\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\ufe14\000\004\213\u01d8\001\002\000\002\001" +
    "\ufe11\000\160\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\154\u0146" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\241\u014b\001\uff56\000\004" +
    "\227\u01db\001\002\000\002\001\ufe12\000\004\212\u01d6\001" +
    "\ufe2b\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufef3\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufeef\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufef4\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufef0\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufefa\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufef6\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufef2\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufef7\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufef9\000\026\011\206\013\070\074\014\111\u01ee\114\u01ea" +
    "\116\064\212\060\214\u01ed\220\304\231\115\001\002\000" +
    "\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169" +
    "\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162" +
    "\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166" +
    "\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufefe\000" +
    "\004\110\u020a\001\002\000\004\212\u0207\001\002\000\006" +
    "\011\206\116\064\001\002\000\004\110\u01fa\001\002\000" +
    "\004\071\u0159\001\ufefd\000\020\011\206\013\070\111\u0189" +
    "\114\u0182\116\064\220\304\231\115\001\002\000\004\114" +
    "\u01f3\001\002\000\004\226\u01f0\001\ufe9e\000\160\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\154\u0146\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\241\u014b\001\uff56\000\004\227\u01f2\001\002\000" +
    "\002\001\ufea8\000\006\011\206\116\064\001\002\000\004" +
    "\226\u0144\001\ufe9d\000\004\226\u01f7\001\ufe8c\000\002\001" +
    "\ufefc\000\160\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\154\u0146" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\241\u014b\001\uff56\000\004" +
    "\227\u01f9\001\002\000\002\001\ufe8b\000\014\011\206\013" +
    "\070\106\u0193\116\064\231\115\001\002\000\004\226\u0200" +
    "\001\002\000\004\226\u01fd\001\ufe22\000\160\004\167\006" +
    "\123\007\012\010\072\011\206\013\070\020\150\035\120" +
    "\046\211\062\173\063\034\073\176\074\014\075\023\076" +
    "\052\077\055\100\152\101\006\102\041\111\210\112\147" +
    "\113\045\114\075\116\064\117\033\120\102\121\057\122" +
    "\144\123\122\130\073\154\u0146\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\241\u014b\001\uff56\000\004\227\u01ff\001\002\000\002" +
    "\001\ufea4\000\160\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\154" +
    "\u0146\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\207\226\175\231\115" +
    "\232\127\233\066\234\112\240\133\241\u014b\001\uff56\000" +
    "\004\227\u0202\001\002\000\002\001\ufea5\000\004\226\u0204" +
    "\001\ufe9c\000\160\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\154" +
    "\u0146\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\207\226\175\231\115" +
    "\232\127\233\066\234\112\240\133\241\u014b\001\uff56\000" +
    "\004\227\u0206\001\002\000\002\001\ufea6\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\ufe14\000\004\213\u0209\001\002\000\002\001\ufeb0\000" +
    "\014\011\206\013\070\106\u0193\116\064\231\115\001\002" +
    "\000\004\226\u0210\001\002\000\004\226\u020d\001\ufe21\000" +
    "\160\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\154\u0146\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\241\u014b\001\uff56\000\004\227\u020f" +
    "\001\002\000\002\001\ufea3\000\160\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\154\u0146\167\121\170\100\175\171\176\017" +
    "\200\061\201\177\202\032\203\154\204\044\205\146\206" +
    "\105\207\155\210\101\211\042\212\060\214\110\220\207" +
    "\226\175\231\115\232\127\233\066\234\112\240\133\241" +
    "\u014b\001\uff56\000\004\227\u0212\001\002\000\002\001\ufea2" +
    "\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161\153" +
    "\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174" +
    "\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170" +
    "\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufef1" +
    "\000\160\004\167\006\123\007\012\010\072\011\206\013" +
    "\070\020\150\035\120\046\211\062\173\063\034\073\176" +
    "\074\014\075\023\076\052\077\055\100\152\101\006\102" +
    "\041\111\210\112\147\113\045\114\075\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\154\u0215\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\241\u0218\001\002\000\024\011" +
    "\206\013\070\074\014\111\u01ee\114\u01ea\116\064\212\060" +
    "\220\304\231\115\001\002\000\046\071\u0159\124\uff4f\131" +
    "\u014f\132\u0154\133\u0150\134\u015b\135\u0153\136\u015a\137\u0156" +
    "\140\u0158\141\u0152\142\u014e\143\u0155\144\u0157\145\u0151\200" +
    "\ufe2f\201\ufe2f\227\uff4f\001\ufe31\000\006\124\uff50\227\uff50" +
    "\001\ufe32\000\154\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\231\115\232\127" +
    "\233\066\234\112\240\133\001\002\000\046\071\u0159\124" +
    "\uff4e\131\u014f\132\u0154\133\u0150\134\u015b\135\u0153\136\u015a" +
    "\137\u0156\140\u0158\141\u0152\142\u014e\143\u0155\144\u0157\145" +
    "\u0151\200\ufe2f\201\ufe2f\227\uff4e\001\ufe31\000\006\124\uff4d" +
    "\227\uff4d\001\ufe32\000\002\001\uff4c\000\004\071\u0159\001" +
    "\ufe30\000\002\001\uff51\000\002\001\ufea7\000\004\154\212" +
    "\001\uffaa\000\004\226\u0221\001\002\000\022\003\223\011" +
    "\206\074\215\111\222\114\225\116\064\227\uff66\237\221" +
    "\001\uff5b\000\004\227\u0223\001\002\000\004\056\231\001" +
    "\ufeae\000\002\001\ufeb6\000\006\003\235\106\234\001\002" +
    "\000\002\001\ufeb5\000\236\003\134\004\167\005\203\006" +
    "\123\007\012\010\072\011\040\013\070\015\107\020\150" +
    "\021\024\022\142\023\136\024\051\026\037\030\116\032" +
    "\202\035\120\037\151\043\063\044\140\045\104\046\211" +
    "\050\160\051\013\052\046\054\200\056\241\057\011\061" +
    "\111\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\106\074\111\210\112" +
    "\147\113\045\114\075\115\027\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\147\010\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\047\226\175\230\u0228\231\115\232\127" +
    "\233\066\234\112\240\133\001\002\000\002\001\uffe1\000" +
    "\002\001\uff6f\000\006\216\u022d\217\u022c\001\uff6b\000\002" +
    "\001\uffd6\000\234\003\134\004\167\005\203\006\123\007" +
    "\012\010\072\011\040\013\070\015\107\020\150\021\024" +
    "\022\142\023\136\024\051\026\037\030\116\032\202\035" +
    "\120\037\151\043\063\044\140\045\104\046\211\050\160" +
    "\051\013\052\046\054\200\056\241\057\011\061\111\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\106\074\111\210\112\147\113" +
    "\045\114\075\115\027\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\147\010\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\047\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\002\000\004\226\u022e\001\002\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\072\034\u016f\125\u0167\126\u0176\127\u015f" +
    "\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\227\u0230\001\002\000\234" +
    "\003\134\004\167\005\203\006\123\007\012\010\072\011" +
    "\040\013\070\015\107\020\150\021\024\022\142\023\136" +
    "\024\051\026\037\030\116\032\202\035\120\037\151\043" +
    "\063\044\140\045\104\046\211\050\160\051\013\052\046" +
    "\054\200\056\241\057\011\061\111\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\106\074\111\210\112\147\113\045\114\075\115" +
    "\027\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\147\010\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\047\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\002\001\uff6e\000\002\001\uff6a\000\250\003\134\004" +
    "\167\005\203\006\123\007\012\010\072\011\040\013\070" +
    "\015\107\020\150\021\024\022\142\023\136\024\051\026" +
    "\037\030\116\032\202\035\120\037\151\043\063\044\140" +
    "\045\104\046\124\050\160\051\013\052\046\054\200\056" +
    "\241\057\011\061\111\062\173\063\034\064\242\065\036" +
    "\066\166\073\176\074\014\075\023\076\052\077\055\100" +
    "\152\101\006\102\041\106\074\111\210\112\147\113\045" +
    "\114\075\115\027\116\064\117\033\120\102\121\057\122" +
    "\144\123\122\130\073\147\010\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\047\221\071\222\020\226\175\231\115\232\127\233" +
    "\066\234\112\236\137\240\133\001\uff6d\000\006\216\u0237" +
    "\217\u0236\001\uff69\000\004\215\u023f\001\002\000\004\230" +
    "\u023d\001\002\000\004\226\u0238\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\072\034\u016f\125\u0167\126\u0176\127\u015f\146" +
    "\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175" +
    "\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164" +
    "\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\177\u0162\227\u023a\001\002\000\004\230" +
    "\u023b\001\002\000\002\001\uffe1\000\250\003\134\004\167" +
    "\005\203\006\123\007\012\010\072\011\040\013\070\015" +
    "\107\020\150\021\024\022\142\023\136\024\051\026\037" +
    "\030\116\032\202\035\120\037\151\043\063\044\140\045" +
    "\104\046\124\050\160\051\013\052\046\054\200\056\241" +
    "\057\011\061\111\062\173\063\034\064\242\065\036\066" +
    "\166\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\106\074\111\210\112\147\113\045\114" +
    "\075\115\027\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\147\010\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\047\221\071\222\020\226\175\231\115\232\127\233\066" +
    "\234\112\236\137\240\133\001\uff6c\000\002\001\uffe1\000" +
    "\250\003\134\004\167\005\203\006\123\007\012\010\072" +
    "\011\040\013\070\015\107\020\150\021\024\022\142\023" +
    "\136\024\051\026\037\030\116\032\202\035\120\037\151" +
    "\043\063\044\140\045\104\046\124\050\160\051\013\052" +
    "\046\054\200\056\241\057\011\061\111\062\173\063\034" +
    "\064\242\065\036\066\166\073\176\074\014\075\023\076" +
    "\052\077\055\100\152\101\006\102\041\106\074\111\210" +
    "\112\147\113\045\114\075\115\027\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\147\010\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\047\221\071\222\020\226\175\231" +
    "\115\232\127\233\066\234\112\236\137\240\133\001\uff68" +
    "\000\004\147\u0240\001\002\000\002\001\uffd5\000\006\011" +
    "\206\116\064\001\002\000\006\124\u0247\227\u0246\001\002" +
    "\000\004\131\u0244\001\002\000\064\006\123\007\012\010" +
    "\072\011\206\020\317\074\312\075\023\076\052\077\055" +
    "\100\152\101\006\102\303\111\314\112\147\113\045\114" +
    "\306\116\064\167\322\170\313\175\311\176\316\212\320" +
    "\220\304\226\325\240\133\001\002\000\070\125\346\126" +
    "\367\127\337\146\341\150\336\151\360\152\340\153\350" +
    "\154\361\155\365\156\352\157\334\160\347\161\364\162" +
    "\362\163\344\164\363\165\357\166\351\167\366\170\345" +
    "\171\356\172\343\173\353\174\335\177\342\212\355\001" +
    "\uff7c\000\236\003\134\004\167\005\203\006\123\007\012" +
    "\010\072\011\040\013\070\015\107\020\150\021\024\022" +
    "\142\023\136\024\051\026\037\030\116\032\202\035\120" +
    "\037\151\043\063\044\140\045\104\046\211\050\160\051" +
    "\013\052\046\054\200\056\241\057\011\061\111\062\173" +
    "\063\034\073\176\074\014\075\023\076\052\077\055\100" +
    "\152\101\006\102\041\106\074\111\210\112\147\113\045" +
    "\114\075\115\027\116\064\117\033\120\102\121\057\122" +
    "\144\123\122\130\073\147\010\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\047\226\175\230\u024c\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\006\011\206\116\064\001\002" +
    "\000\004\131\u0249\001\002\000\064\006\123\007\012\010" +
    "\072\011\206\020\317\074\312\075\023\076\052\077\055" +
    "\100\152\101\006\102\303\111\314\112\147\113\045\114" +
    "\306\116\064\167\322\170\313\175\311\176\316\212\320" +
    "\220\304\226\325\240\133\001\002\000\070\125\346\126" +
    "\367\127\337\146\341\150\336\151\360\152\340\153\350" +
    "\154\361\155\365\156\352\157\334\160\347\161\364\162" +
    "\362\163\344\164\363\165\357\166\351\167\366\170\345" +
    "\171\356\172\343\173\353\174\335\177\342\212\355\001" +
    "\uff7b\000\002\001\uffbf\000\002\001\uffe1\000\002\001\uff7e" +
    "\000\252\003\134\004\167\005\203\006\123\007\012\010" +
    "\072\011\040\013\070\015\107\020\150\021\024\022\142" +
    "\023\136\024\051\026\037\030\116\032\202\033\u024f\035" +
    "\120\037\151\043\063\044\140\045\104\046\124\050\160" +
    "\051\013\052\046\054\200\056\241\057\011\061\111\062" +
    "\173\063\034\064\242\065\036\066\166\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\106" +
    "\074\111\210\112\147\113\045\114\075\115\027\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\147" +
    "\010\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\047\221\071\222\020" +
    "\226\175\231\115\232\127\233\066\234\112\236\137\240" +
    "\133\001\002\000\004\147\u0250\001\002\000\002\001\uff7d" +
    "\000\072\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\147" +
    "\u0252\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175" +
    "\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164" +
    "\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\177\u0162\001\002\000\002\001\uffbc\000" +
    "\002\001\ufeeb\000\004\071\u0159\001\ufe2f\000\026\011\206" +
    "\013\070\073\176\074\014\111\u01ee\114\u01ea\116\064\212" +
    "\060\220\304\231\115\001\ufe05\000\002\001\ufe06\000\006" +
    "\124\u025b\227\u025a\001\002\000\002\001\ufe08\000\004\071" +
    "\u0159\001\ufe07\000\002\001\uff83\000\026\011\206\013\070" +
    "\073\176\074\014\111\u01ee\114\u01ea\116\064\212\060\220" +
    "\304\231\115\001\ufe05\000\002\001\ufe09\000\004\227\u0262" +
    "\001\ufec9\000\072\034\u016f\125\u0167\126\u0176\127\u015f\146" +
    "\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175" +
    "\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164" +
    "\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\177\u0162\227\u0261\001\002\000\004\227" +
    "\u0260\001\002\000\002\001\ufecb\000\002\001\ufecc\000\002" +
    "\001\uff0d\000\014\011\206\013\070\106\u0193\116\064\231" +
    "\115\001\002\000\004\226\u026a\001\uff0c\000\010\106\u01a3" +
    "\212\u01a4\226\u0266\001\uff0b\000\160\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\154\u0146\167\121\170\100\175\171\176\017" +
    "\200\061\201\177\202\032\203\154\204\044\205\146\206" +
    "\105\207\155\210\101\211\042\212\060\214\110\220\207" +
    "\226\175\231\115\232\127\233\066\234\112\240\133\241" +
    "\u014b\001\uff56\000\004\227\u0268\001\002\000\002\001\ufe12" +
    "\000\004\212\u01d6\001\uff09\000\160\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\154\u0146\167\121\170\100\175\171\176\017" +
    "\200\061\201\177\202\032\203\154\204\044\205\146\206" +
    "\105\207\155\210\101\211\042\212\060\214\110\220\207" +
    "\226\175\231\115\232\127\233\066\234\112\240\133\241" +
    "\u014b\001\uff56\000\004\227\u026c\001\002\000\002\001\ufe12" +
    "\000\004\212\u01d6\001\uff0a\000\024\011\206\013\070\074" +
    "\014\111\u01ee\114\u01ea\116\064\212\060\220\304\231\115" +
    "\001\002\000\004\071\u0159\001\ufde4\000\006\124\u0272\227" +
    "\u0271\001\002\000\002\001\ufdeb\000\024\011\206\013\070" +
    "\074\014\111\u01ee\114\u01ea\116\064\212\060\220\304\231" +
    "\115\001\002\000\004\071\u0159\001\ufde3\000\004\034\u016f" +
    "\001\ufed7\000\156\004\167\006\123\007\012\010\072\011" +
    "\206\013\070\020\150\035\120\046\211\062\173\063\034" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\111\210\112\147\113\045\114\075\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\207\226\175\227\u0278\231\115" +
    "\232\127\233\066\234\112\240\133\001\002\000\002\001" +
    "\ufebe\000\072\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164" +
    "\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156" +
    "\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172" +
    "\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173" +
    "\u016c\174\u015e\177\u0162\227\u0279\001\002\000\002\001\ufe91" +
    "\000\002\001\ufe90\000\006\011\206\116\064\001\002\000" +
    "\002\001\ufffd\000\014\011\u027d\013\070\106\u0193\116\064" +
    "\231\115\001\002\000\004\226\ufdde\001\ufde0\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\072\034\u016f\125\u0167\126\u0176\127\u015f" +
    "\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\213\u0280\001\002\000\002" +
    "\001\ufe51\000\002\001\uffcc\000\044\071\u0159\131\u014f\132" +
    "\u0154\133\u0150\134\u015b\135\u0153\136\u015a\137\u0156\140\u0158" +
    "\141\u0152\142\u014e\143\u0155\144\u0157\145\u0151\147\u0285\200" +
    "\ufe2f\201\ufe2f\001\ufe31\000\004\147\u0284\001\ufe32\000\002" +
    "\001\uffcb\000\002\001\uffca\000\002\001\uffc9\000\004\131" +
    "\u0288\001\002\000\064\006\123\007\012\010\072\011\206" +
    "\020\317\074\312\075\023\076\052\077\055\100\152\101" +
    "\006\102\303\111\314\112\147\113\045\114\306\116\064" +
    "\167\322\170\313\175\311\176\316\212\320\220\304\226" +
    "\325\240\133\001\002\000\070\125\346\126\367\127\337" +
    "\146\341\150\336\151\360\152\340\153\350\154\361\155" +
    "\365\156\352\157\334\160\347\161\364\162\362\163\344" +
    "\164\363\165\357\166\351\167\366\170\345\171\356\172" +
    "\343\173\353\174\335\177\342\212\355\001\uff05\000\002" +
    "\001\ufec0\000\002\001\ufec4\000\154\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\072\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160" +
    "\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157" +
    "\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\227\u028e\001\002\000\006\106\u028f\230\u0291" +
    "\001\002\000\004\147\u02a3\001\uff76\000\002\001\uffd1\000" +
    "\004\147\u0293\001\uff76\000\010\040\u02a0\041\u0296\042\u0297" +
    "\001\002\000\002\001\uff76\000\010\040\u0295\041\u0296\042" +
    "\u0297\001\002\000\004\147\u029f\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\006\147\u0299\230\u029a\001\002\000\002\001" +
    "\uffe1\000\002\001\uff72\000\002\001\uff73\000\250\003\134" +
    "\004\167\005\203\006\123\007\012\010\072\011\040\013" +
    "\070\015\107\020\150\021\024\022\142\023\136\024\051" +
    "\026\037\030\116\032\202\035\120\037\151\043\063\044" +
    "\140\045\104\046\124\050\160\051\013\052\046\054\200" +
    "\056\241\057\011\061\111\062\173\063\034\064\242\065" +
    "\036\066\166\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\106\074\111\210\112\147\113" +
    "\045\114\075\115\027\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\147\010\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\047\221\071\222\020\226\175\231\115\232\127" +
    "\233\066\234\112\236\137\240\133\001\uff74\000\074\034" +
    "\u016f\125\u0167\126\u0176\127\u015f\146\u0164\147\u0299\150\u0160" +
    "\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157" +
    "\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\230\u029a\001\002\000\002\001\uffe1\000\250" +
    "\003\134\004\167\005\203\006\123\007\012\010\072\011" +
    "\040\013\070\015\107\020\150\021\024\022\142\023\136" +
    "\024\051\026\037\030\116\032\202\035\120\037\151\043" +
    "\063\044\140\045\104\046\124\050\160\051\013\052\046" +
    "\054\200\056\241\057\011\061\111\062\173\063\034\064" +
    "\242\065\036\066\166\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\106\074\111\210\112" +
    "\147\113\045\114\075\115\027\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\147\010\167\121\170" +
    "\100\175\171\176\017\200\061\201\177\202\032\203\154" +
    "\204\044\205\146\206\105\207\155\210\101\211\042\212" +
    "\060\214\110\220\047\221\071\222\020\226\175\231\115" +
    "\232\127\233\066\234\112\236\137\240\133\001\uff75\000" +
    "\002\001\uff77\000\004\147\u02a1\001\002\000\002\001\uff78" +
    "\000\010\041\u0296\042\u0297\107\u02a6\001\002\000\002\001" +
    "\uff76\000\010\041\u0296\042\u0297\107\u02a5\001\002\000\002" +
    "\001\uff79\000\002\001\uff7a\000\154\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\072\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160" +
    "\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157" +
    "\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\213\u02a9\001\002\000\002\001\ufe8a\000\002" +
    "\001\ufec2\000\070\034\u016f\125\u0167\126\u0176\127\u015f\146" +
    "\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175" +
    "\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164" +
    "\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\177\u0162\001\ufde6\000\070\034\u016f\125" +
    "\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\uff03\000\006\124\u02ae\147\u02af\001\002\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\002\001\uffc6\000\070\034\u016f\125\u0167\126" +
    "\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169" +
    "\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162" +
    "\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166" +
    "\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\uff04\000" +
    "\154\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\167\121\170\100" +
    "\175\171\176\017\200\061\201\177\202\032\203\154\204" +
    "\044\205\146\206\105\207\155\210\101\211\042\212\060" +
    "\214\110\220\207\226\175\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\072\034\u016f\125\u0167\126\u0176" +
    "\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154" +
    "\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173" +
    "\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171" +
    "\u016d\172\u0163\173\u016c\174\u015e\177\u0162\213\u02b3\001\002" +
    "\000\002\001\ufe50\000\002\001\uffce\000\072\034\u016f\125" +
    "\u0167\126\u0176\127\u015f\146\u0164\147\u02b6\150\u0160\151\u0170" +
    "\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160" +
    "\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a" +
    "\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177" +
    "\u0162\001\002\000\002\001\uffcd\000\004\024\u02b8\001\002" +
    "\000\004\226\u02b9\001\002\000\154\004\167\006\123\007" +
    "\012\010\072\011\206\013\070\020\150\035\120\046\211" +
    "\062\173\063\034\073\176\074\014\075\023\076\052\077" +
    "\055\100\152\101\006\102\041\111\210\112\147\113\045" +
    "\114\075\116\064\117\033\120\102\121\057\122\144\123" +
    "\122\130\073\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\072\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160" +
    "\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157" +
    "\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\227\u02bb\001\002\000\004\147\u02bc\001\002" +
    "\000\002\001\uffd3\000\004\011\u02bf\001\002\000\002\001" +
    "\uffed\000\004\131\u02c0\001\002\000\064\006\123\007\012" +
    "\010\072\011\206\020\317\074\312\075\023\076\052\077" +
    "\055\100\152\101\006\102\303\111\314\112\147\113\045" +
    "\114\306\116\064\167\322\170\313\175\311\176\316\212" +
    "\320\220\304\226\325\240\133\001\002\000\070\125\346" +
    "\126\367\127\337\146\341\150\336\151\360\152\340\153" +
    "\350\154\361\155\365\156\352\157\334\160\347\161\364" +
    "\162\362\163\344\164\363\165\357\166\351\167\366\170" +
    "\345\171\356\172\343\173\353\174\335\177\342\212\355" +
    "\001\uff06\000\004\067\u02c4\001\uff92\000\002\001\uffa0\000" +
    "\014\003\u02c7\011\206\111\222\114\225\116\064\001\002" +
    "\000\004\124\u02c8\001\uff91\000\002\001\uff8e\000\002\001" +
    "\uff8b\000\014\003\u02ca\011\206\111\222\114\225\116\064" +
    "\001\002\000\002\001\uff8d\000\002\001\uff8c\000\004\106" +
    "\u02cc\001\002\000\002\001\uff41\000\040\003\u02db\047\156" +
    "\056\u02de\060\u02e1\065\036\066\166\107\u02da\115\u02d9\220" +
    "\u02dd\221\u02d2\222\u02d3\223\u02d7\224\u02d1\225\u02dc\236\137" +
    "\001\uff1b\000\002\001\uff9b\000\002\001\uff39\000\004\046" +
    "\u0313\001\002\000\002\001\uff16\000\004\065\u0312\001\uff13" +
    "\000\004\065\u0311\001\uff12\000\002\001\uff42\000\020\046" +
    "\uff1a\220\u02dd\221\u0310\222\u030f\223\u02d7\224\u02d1\225\u02dc" +
    "\001\uff1d\000\002\001\uff9f\000\002\001\uff15\000\002\001" +
    "\uff19\000\002\001\uff3b\000\002\001\uff9c\000\002\001\uff3a" +
    "\000\002\001\uff17\000\002\001\uff14\000\012\011\206\111" +
    "\222\114\225\116\064\001\002\000\004\013\u02e3\001\002" +
    "\000\006\124\u02bd\147\u02e2\001\002\000\002\001\uff1c\000" +
    "\002\001\uff3f\000\004\131\u02ea\001\uff0f\000\006\124\u02e5" +
    "\147\u02e6\001\002\000\004\013\u02e7\001\002\000\002\001" +
    "\uff40\000\004\131\u02e8\001\uff11\000\064\006\123\007\012" +
    "\010\072\011\206\020\317\074\312\075\023\076\052\077" +
    "\055\100\152\101\006\102\303\111\314\112\147\113\045" +
    "\114\306\116\064\167\322\170\313\175\311\176\316\212" +
    "\320\220\304\226\325\240\133\001\002\000\070\125\346" +
    "\126\367\127\337\146\341\150\336\151\360\152\340\153" +
    "\350\154\361\155\365\156\352\157\334\160\347\161\364" +
    "\162\362\163\344\164\363\165\357\166\351\167\366\170" +
    "\345\171\356\172\343\173\353\174\335\177\342\212\355" +
    "\001\uff10\000\064\006\123\007\012\010\072\011\206\020" +
    "\317\074\312\075\023\076\052\077\055\100\152\101\006" +
    "\102\303\111\314\112\147\113\045\114\306\116\064\167" +
    "\322\170\313\175\311\176\316\212\320\220\304\226\325" +
    "\240\133\001\002\000\070\125\346\126\367\127\337\146" +
    "\341\150\336\151\360\152\340\153\350\154\361\155\365" +
    "\156\352\157\334\160\347\161\364\162\362\163\344\164" +
    "\363\165\357\166\351\167\366\170\345\171\356\172\343" +
    "\173\353\174\335\177\342\212\355\001\uff0e\000\010\106" +
    "\u02ef\124\u02ee\147\u02f1\001\002\000\002\001\uff37\000\012" +
    "\011\206\111\222\114\225\116\064\001\002\000\012\011" +
    "\u02fa\111\222\114\225\116\064\001\uff33\000\002\001\uff38" +
    "\000\002\001\uff35\000\004\036\u0306\001\002\000\004\147" +
    "\u0305\001\002\000\012\011\u02fa\111\222\114\225\116\064" +
    "\001\uff32\000\004\107\u0303\001\002\000\004\235\u02fe\001" +
    "\uff29\000\004\110\u02fc\001\002\000\004\147\u02fb\001\002" +
    "\000\002\001\uff31\000\004\036\uff2a\001\ufdde\000\002\001" +
    "\uff2f\000\004\011\u02fd\001\002\000\002\001\uff28\000\012" +
    "\011\206\111\222\114\225\116\064\001\002\000\004\124" +
    "\u0301\001\uff2d\000\002\001\uff2c\000\012\011\206\111\222" +
    "\114\225\116\064\001\002\000\002\001\uff2b\000\002\001" +
    "\uff34\000\002\001\uff30\000\002\001\uff2e\000\010\223\u0309" +
    "\224\u030a\225\u0307\001\uff22\000\002\001\uff25\000\004\011" +
    "\u030c\001\002\000\002\001\uff23\000\002\001\uff24\000\004" +
    "\147\uff26\001\uff21\000\002\001\uff27\000\002\001\uff36\000" +
    "\002\001\uff18\000\002\001\uff12\000\002\001\uff13\000\002" +
    "\001\uff98\000\002\001\uff99\000\004\154\212\001\uffaa\000" +
    "\006\011\206\116\064\001\002\000\002\001\uff3e\000\004" +
    "\226\u0317\001\002\000\022\003\223\011\206\074\215\111" +
    "\222\114\225\116\064\227\uff66\237\221\001\uff5b\000\004" +
    "\227\u0319\001\002\000\002\001\uff3d\000\006\106\u031c\147" +
    "\u031d\001\uff1e\000\002\001\uff3c\000\002\001\uffe1\000\002" +
    "\001\uff20\000\252\003\134\004\167\005\203\006\123\007" +
    "\012\010\072\011\040\013\070\015\107\020\150\021\024" +
    "\022\142\023\136\024\051\026\037\030\116\032\202\035" +
    "\120\037\151\043\063\044\140\045\104\046\124\050\160" +
    "\051\013\052\046\054\200\056\241\057\011\061\111\062" +
    "\173\063\034\064\242\065\036\066\166\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\106" +
    "\074\107\u031f\111\210\112\147\113\045\114\075\115\027" +
    "\116\064\117\033\120\102\121\057\122\144\123\122\130" +
    "\073\147\010\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\047\221\071" +
    "\222\020\226\175\231\115\232\127\233\066\234\112\236" +
    "\137\240\133\001\002\000\002\001\uff1f\000\006\071\u0336" +
    "\212\u0335\001\ufdf5\000\016\013\070\016\u0333\017\u0334\104" +
    "\u0324\105\u0323\232\u0332\001\002\000\002\001\ufdf7\000\024" +
    "\011\206\013\070\074\014\111\u01ee\114\u01ea\116\064\212" +
    "\060\220\304\231\115\001\002\000\156\004\167\006\123" +
    "\007\012\010\072\011\206\012\u0328\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\010\013\070\104\u0324\105\u0323\001\002\000" +
    "\002\001\ufdf6\000\072\034\u016f\107\u032e\125\u0167\126\u0176" +
    "\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154" +
    "\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173" +
    "\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171" +
    "\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\002\000\006" +
    "\107\u0329\212\u032a\001\002\000\002\001\ufdf0\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\002\000\072\034\u016f\125\u0167\126\u0176\127\u015f" +
    "\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\213\u032c\001\002\000\004" +
    "\107\u032d\001\002\000\002\001\ufdf1\000\002\001\ufdf2\000" +
    "\006\071\u0159\107\u0330\001\002\000\002\001\ufdef\000\002" +
    "\001\ufdfa\000\002\001\ufe40\000\002\001\ufdf8\000\002\001" +
    "\ufdf9\000\012\011\206\013\070\014\u033b\116\064\001\002" +
    "\000\006\011\206\116\064\001\002\000\002\001\ufdf3\000" +
    "\002\001\ufdec\000\004\213\u033c\001\002\000\002\001\ufdee" +
    "\000\002\001\ufded\000\002\001\ufdf4\000\010\011\206\116" +
    "\064\226\214\001\002\000\002\001\uffa8\000\004\226\u0340" +
    "\001\002\000\022\003\223\011\206\074\215\111\222\114" +
    "\225\116\064\227\uff66\237\221\001\uff5b\000\004\227\u0342" +
    "\001\002\000\002\001\uffa7\000\006\003\u0345\106\u0344\001" +
    "\002\000\002\001\uffe1\000\002\001\uffa4\000\002\001\uffa6" +
    "\000\252\003\134\004\167\005\203\006\123\007\012\010" +
    "\072\011\040\013\070\015\107\020\150\021\024\022\142" +
    "\023\136\024\051\026\037\030\116\032\202\035\120\037" +
    "\151\043\063\044\140\045\104\046\124\050\160\051\013" +
    "\052\046\054\200\056\241\057\011\061\111\062\173\063" +
    "\034\064\242\065\036\066\166\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\106\074\107" +
    "\u0348\111\210\112\147\113\045\114\075\115\027\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\147" +
    "\010\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\047\221\071\222\020" +
    "\226\175\231\115\232\127\233\066\234\112\236\137\240" +
    "\133\001\002\000\002\001\uffa5\000\070\034\u016f\125\u0167" +
    "\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153" +
    "\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174" +
    "\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170" +
    "\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufde5" +
    "\000\014\034\u016f\171\u016d\172\u0163\173\u016c\174\u015e\001" +
    "\ufed9\000\002\001\ufefb\000\154\004\167\006\123\007\012" +
    "\010\072\011\206\013\070\020\150\035\120\046\211\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\111\210\112\147\113\045\114" +
    "\075\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\044" +
    "\036\uff8a\071\u0159\131\u014f\132\u0154\133\u0150\134\u015b\135" +
    "\u0153\136\u015a\137\u0156\140\u0158\141\u0152\142\u014e\143\u0155" +
    "\144\u0157\145\u0151\200\ufe2f\201\ufe2f\001\ufe31\000\004\036" +
    "\uff89\001\ufe32\000\004\036\u0350\001\002\000\030\011\206" +
    "\013\070\073\176\074\014\111\u01ee\114\u01ea\116\064\154" +
    "\u0355\212\060\220\304\231\115\001\002\000\004\072\u0363" +
    "\001\uff87\000\002\001\uff86\000\004\227\u0361\001\002\000" +
    "\004\071\u0159\001\uff85\000\024\011\206\013\070\074\014" +
    "\111\u01ee\114\u01ea\116\064\212\060\220\304\231\115\001" +
    "\002\000\030\011\206\013\070\073\176\074\014\111\u01ee" +
    "\114\u01ea\116\064\154\u0355\212\060\220\304\231\115\001" +
    "\002\000\002\001\uff87\000\004\227\u0359\001\002\000\236" +
    "\003\134\004\167\005\203\006\123\007\012\010\072\011" +
    "\040\013\070\015\107\020\150\021\024\022\142\023\136" +
    "\024\051\026\037\030\116\032\202\035\120\037\151\043" +
    "\063\044\140\045\104\046\211\050\160\051\013\052\046" +
    "\054\200\056\241\057\011\061\111\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\106\074\111\210\112\147\113\045\114\075\115" +
    "\027\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\147\010\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\047\226" +
    "\175\230\u035a\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\002\001\uffe1\000\002\001\uff80\000\002\001" +
    "\uffc0\000\252\003\134\004\167\005\203\006\123\007\012" +
    "\010\072\011\040\013\070\015\107\020\150\021\024\022" +
    "\142\023\136\024\051\026\037\030\116\031\u035e\032\202" +
    "\035\120\037\151\043\063\044\140\045\104\046\124\050" +
    "\160\051\013\052\046\054\200\056\241\057\011\061\111" +
    "\062\173\063\034\064\242\065\036\066\166\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\106\074\111\210\112\147\113\045\114\075\115\027\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\147\010\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\047\221\071\222" +
    "\020\226\175\231\115\232\127\233\066\234\112\236\137" +
    "\240\133\001\002\000\004\147\u035f\001\002\000\002\001" +
    "\uff7f\000\004\071\u0159\001\uff84\000\236\003\134\004\167" +
    "\005\203\006\123\007\012\010\072\011\040\013\070\015" +
    "\107\020\150\021\024\022\142\023\136\024\051\026\037" +
    "\030\116\032\202\035\120\037\151\043\063\044\140\045" +
    "\104\046\211\050\160\051\013\052\046\054\200\056\241" +
    "\057\011\061\111\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\106\074" +
    "\111\210\112\147\113\045\114\075\115\027\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\147\010" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\047\226\175\230\u035a\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\002" +
    "\001\uffc1\000\002\001\uff88\000\002\001\ufeee\000\002\001" +
    "\ufeec\000\006\003\u036a\106\u0369\001\002\000\002\001\ufff4" +
    "\000\010\003\u036a\106\u0369\147\u036d\001\002\000\002\001" +
    "\ufff9\000\002\001\uffe9\000\002\001\uffeb\000\002\001\ufff3" +
    "\000\002\001\uffec\000\254\003\134\004\167\005\203\006" +
    "\123\007\012\010\072\011\040\013\070\015\107\020\150" +
    "\021\024\022\142\023\136\024\051\026\037\030\116\032" +
    "\202\035\120\037\151\043\063\044\140\045\104\046\124" +
    "\047\156\050\160\051\013\052\046\054\200\056\031\057" +
    "\011\061\111\062\173\063\034\064\065\065\036\066\166" +
    "\073\176\074\014\075\023\076\052\077\055\100\152\101" +
    "\006\102\041\106\074\107\u036f\111\113\112\147\113\045" +
    "\114\075\115\027\116\064\117\033\120\102\121\057\122" +
    "\144\123\122\130\073\147\010\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\047\221\071\222\020\226\175\231\115\232\127\233" +
    "\066\234\112\236\137\240\133\001\002\000\002\001\uffea" +
    "\000\002\001\ufffa\000\002\001\ufff1\000\016\013\070\016" +
    "\u0333\017\u0334\104\u0324\105\u0323\234\u0373\001\002\000\002" +
    "\001\ufe3f\000\024\011\206\013\070\074\014\111\u01ee\114" +
    "\u01ea\116\064\212\060\220\304\231\115\001\002\000\002" +
    "\001\uffb1\000\006\124\u0379\227\u0378\001\002\000\004\071" +
    "\u0159\001\uffaf\000\004\147\u037b\001\002\000\024\011\206" +
    "\013\070\074\014\111\u01ee\114\u01ea\116\064\212\060\220" +
    "\304\231\115\001\002\000\002\001\uffb0\000\002\001\uffc2" +
    "\000\004\226\u01f7\001\ufe8c\000\002\001\uff00\000\002\001" +
    "\ufec1\000\004\147\u0380\001\002\000\002\001\uffbb\000\010" +
    "\106\u0195\212\u0196\226\ufe28\001\ufe1b\000\070\034\u016f\125" +
    "\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufde8\000\002\001\ufebf\000\014\034\u016f\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\001\ufed8\000\010\110\ufe9c\212\ufe9c\226" +
    "\u0204\001\ufe42\000\002\001\uffe1\000\252\003\134\004\167" +
    "\005\203\006\123\007\012\010\072\011\040\013\070\015" +
    "\107\020\150\021\024\022\142\023\136\024\051\026\037" +
    "\030\116\032\202\035\120\037\151\043\063\044\140\045" +
    "\104\046\124\050\160\051\013\052\046\054\200\056\241" +
    "\057\011\061\111\062\173\063\034\064\242\065\036\066" +
    "\166\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\106\074\107\u0388\111\210\112\147\113" +
    "\045\114\075\115\027\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\147\010\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\047\221\071\222\020\226\175\231\115\232\127" +
    "\233\066\234\112\236\137\240\133\001\002\000\002\001" +
    "\uffd7\000\062\034\u016f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufeb9\000\154\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\002\000\016\011\u038d\013\070" +
    "\065\u038c\106\u0193\116\064\231\115\001\002\000\004\212" +
    "\ufe46\001\ufde1\000\006\212\ufe47\226\ufdde\001\ufde2\000\072" +
    "\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151" +
    "\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d" +
    "\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166" +
    "\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e" +
    "\177\u0162\213\u038f\001\002\000\002\001\ufe52\000\004\233" +
    "\u0393\001\002\000\014\013\070\016\u0333\017\u0334\104\u0324" +
    "\105\u0323\001\ufe8d\000\010\013\070\104\u0324\105\u0323\001" +
    "\ufe8e\000\002\001\ufeba\000\004\227\u0395\001\002\000\004" +
    "\147\u0396\001\002\000\002\001\ufff5\000\002\001\uffd0\000" +
    "\072\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\147\u0399" +
    "\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156" +
    "\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172" +
    "\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173" +
    "\u016c\174\u015e\177\u0162\001\002\000\002\001\uffcf\000\002" +
    "\001\ufeed\000\024\011\206\013\070\074\014\111\u01ee\114" +
    "\u01ea\116\064\212\060\220\304\231\115\001\002\000\072" +
    "\034\u016f\072\u03a9\125\u0167\126\u0176\127\u015f\146\u0164\150" +
    "\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b" +
    "\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165" +
    "\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c" +
    "\174\u015e\177\u0162\001\ufdff\000\004\124\u03a0\001\ufe39\000" +
    "\004\213\u039f\001\002\000\002\001\ufeb1\000\156\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\154\u03a2\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\ufe38\000\002\001\ufe03\000\024\011\206\013" +
    "\070\074\014\111\u01ee\114\u01ea\116\064\212\060\220\304" +
    "\231\115\001\002\000\072\034\u016f\072\u03a4\125\u0167\126" +
    "\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169" +
    "\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162" +
    "\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166" +
    "\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\ufe01\000" +
    "\156\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\154\u03a5\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\002\000\024\011\206\013\070" +
    "\074\014\111\u01ee\114\u01ea\116\064\212\060\220\304\231" +
    "\115\001\002\000\070\034\u016f\125\u0167\126\u0176\127\u015f" +
    "\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155" +
    "\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165" +
    "\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172" +
    "\u0163\173\u016c\174\u015e\177\u0162\001\ufe02\000\002\001\ufdfe" +
    "\000\002\001\ufdfd\000\156\004\167\006\123\007\012\010" +
    "\072\011\206\013\070\020\150\035\120\046\211\062\173" +
    "\063\034\073\176\074\014\075\023\076\052\077\055\100" +
    "\152\101\006\102\041\111\210\112\147\113\045\114\075" +
    "\116\064\117\033\120\102\121\057\122\144\123\122\130" +
    "\073\154\u03aa\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\024\011\206\013\070\074\014\111\u01ee\114\u01ea\116\064" +
    "\212\060\220\304\231\115\001\002\000\070\034\u016f\125" +
    "\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161" +
    "\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161" +
    "\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177" +
    "\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001" +
    "\ufe00\000\002\001\ufdfc\000\002\001\ufdfb\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\072\034\u016f\125\u0167\126\u0176\127\u015f\146" +
    "\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175" +
    "\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164" +
    "\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163" +
    "\173\u016c\174\u015e\177\u0162\227\u03b0\001\002\000\002\001" +
    "\ufde7\000\002\001\uffa3\000\004\067\u03b3\001\uff96\000\014" +
    "\003\u03bf\011\206\111\222\114\225\116\064\001\002\000" +
    "\004\003\u03b6\001\uff9d\000\004\070\u03b8\001\uff90\000\002" +
    "\001\uff9e\000\002\001\uffa2\000\014\003\u02c7\011\206\111" +
    "\222\114\225\116\064\001\002\000\004\124\u02c8\001\uff8f" +
    "\000\004\106\u03bb\001\002\000\002\001\uff41\000\040\003" +
    "\u02db\047\156\056\u02de\060\u02e1\065\036\066\166\107\u02da" +
    "\115\u02d9\220\u02dd\221\u02d2\222\u02d3\223\u02d7\224\u02d1\225" +
    "\u02dc\236\137\001\uff1b\000\002\001\uffa1\000\002\001\uff95" +
    "\000\002\001\uff94\000\154\004\167\006\123\007\012\010" +
    "\072\011\206\013\070\020\150\035\120\046\211\062\173" +
    "\063\034\073\176\074\014\075\023\076\052\077\055\100" +
    "\152\101\006\102\041\111\210\112\147\113\045\114\075" +
    "\116\064\117\033\120\102\121\057\122\144\123\122\130" +
    "\073\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\207\226\175\231\115" +
    "\232\127\233\066\234\112\240\133\001\ufe14\000\004\213" +
    "\u03c2\001\002\000\002\001\ufeaf\000\154\004\167\006\123" +
    "\007\012\010\072\011\206\013\070\020\150\035\120\046" +
    "\211\062\173\063\034\073\176\074\014\075\023\076\052" +
    "\077\055\100\152\101\006\102\041\111\210\112\147\113" +
    "\045\114\075\116\064\117\033\120\102\121\057\122\144" +
    "\123\122\130\073\167\121\170\100\175\171\176\017\200" +
    "\061\201\177\202\032\203\154\204\044\205\146\206\105" +
    "\207\155\210\101\211\042\212\060\214\110\220\207\226" +
    "\175\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\072\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150" +
    "\u0160\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b" +
    "\157\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165" +
    "\u016e\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c" +
    "\174\u015e\177\u0162\227\u03c5\001\002\000\236\003\134\004" +
    "\167\005\203\006\123\007\012\010\072\011\040\013\070" +
    "\015\107\020\150\021\024\022\142\023\136\024\051\026" +
    "\037\030\116\032\202\035\120\037\151\043\063\044\140" +
    "\045\104\046\211\050\160\051\013\052\046\054\200\056" +
    "\241\057\011\061\111\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\106" +
    "\074\111\210\112\147\113\045\114\075\115\027\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\147" +
    "\010\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\047\226\175\230\u03c6" +
    "\231\115\232\127\233\066\234\112\240\133\001\002\000" +
    "\002\001\uffe1\000\002\001\uffd4\000\002\001\uff71\000\252" +
    "\003\134\004\167\005\203\006\123\007\012\010\072\011" +
    "\040\013\070\015\107\020\150\021\024\022\142\023\136" +
    "\024\051\025\u03ca\026\037\030\116\032\202\035\120\037" +
    "\151\043\063\044\140\045\104\046\124\050\160\051\013" +
    "\052\046\054\200\056\241\057\011\061\111\062\173\063" +
    "\034\064\242\065\036\066\166\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\106\074\111" +
    "\210\112\147\113\045\114\075\115\027\116\064\117\033" +
    "\120\102\121\057\122\144\123\122\130\073\147\010\167" +
    "\121\170\100\175\171\176\017\200\061\201\177\202\032" +
    "\203\154\204\044\205\146\206\105\207\155\210\101\211" +
    "\042\212\060\214\110\220\047\221\071\222\020\226\175" +
    "\231\115\232\127\233\066\234\112\236\137\240\133\001" +
    "\002\000\004\147\u03cb\001\002\000\002\001\uff70\000\154" +
    "\004\167\006\123\007\012\010\072\011\206\013\070\020" +
    "\150\035\120\046\211\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\111" +
    "\210\112\147\113\045\114\075\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\ufe14\000\004\213\u03ce\001\002\000\002\001" +
    "\ufea0\000\004\131\u03d6\001\uff44\000\006\124\u03d1\147\u03d2" +
    "\001\002\000\004\013\u03d3\001\002\000\002\001\uffc7\000" +
    "\004\131\u03d4\001\uff46\000\064\006\123\007\012\010\072" +
    "\011\206\020\317\074\312\075\023\076\052\077\055\100" +
    "\152\101\006\102\303\111\314\112\147\113\045\114\306" +
    "\116\064\167\322\170\313\175\311\176\316\212\320\220" +
    "\304\226\325\240\133\001\002\000\070\125\346\126\367" +
    "\127\337\146\341\150\336\151\360\152\340\153\350\154" +
    "\361\155\365\156\352\157\334\160\347\161\364\162\362" +
    "\163\344\164\363\165\357\166\351\167\366\170\345\171" +
    "\356\172\343\173\353\174\335\177\342\212\355\001\uff45" +
    "\000\064\006\123\007\012\010\072\011\206\020\317\074" +
    "\312\075\023\076\052\077\055\100\152\101\006\102\303" +
    "\111\314\112\147\113\045\114\306\116\064\167\322\170" +
    "\313\175\311\176\316\212\320\220\304\226\325\240\133" +
    "\001\002\000\070\125\346\126\367\127\337\146\341\150" +
    "\336\151\360\152\340\153\350\154\361\155\365\156\352" +
    "\157\334\160\347\161\364\162\362\163\344\164\363\165" +
    "\357\166\351\167\366\170\345\171\356\172\343\173\353" +
    "\174\335\177\342\212\355\001\uff43\000\002\001\uffe1\000" +
    "\252\003\134\004\167\005\203\006\123\007\012\010\072" +
    "\011\040\013\070\015\107\020\150\021\024\022\142\023" +
    "\136\024\051\026\037\030\116\032\202\035\120\037\151" +
    "\043\063\044\140\045\104\046\124\050\160\051\013\052" +
    "\046\054\200\056\241\057\011\061\111\062\173\063\034" +
    "\064\242\065\036\066\166\073\176\074\014\075\023\076" +
    "\052\077\055\100\152\101\006\102\041\106\074\107\u03da" +
    "\111\210\112\147\113\045\114\075\115\027\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\147\010" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\047\221\071\222\020\226" +
    "\175\231\115\232\127\233\066\234\112\236\137\240\133" +
    "\001\002\000\004\053\u03db\001\uffb8\000\004\226\u03e6\001" +
    "\002\000\002\001\uffb7\000\004\055\u03e2\001\uffb3\000\004" +
    "\053\u03db\001\uffb9\000\002\001\uffb6\000\002\001\uffb4\000" +
    "\002\001\uffbd\000\004\106\u03e3\001\002\000\002\001\uffe1" +
    "\000\252\003\134\004\167\005\203\006\123\007\012\010" +
    "\072\011\040\013\070\015\107\020\150\021\024\022\142" +
    "\023\136\024\051\026\037\030\116\032\202\035\120\037" +
    "\151\043\063\044\140\045\104\046\124\050\160\051\013" +
    "\052\046\054\200\056\241\057\011\061\111\062\173\063" +
    "\034\064\242\065\036\066\166\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\106\074\107" +
    "\u03e5\111\210\112\147\113\045\114\075\115\027\116\064" +
    "\117\033\120\102\121\057\122\144\123\122\130\073\147" +
    "\010\167\121\170\100\175\171\176\017\200\061\201\177" +
    "\202\032\203\154\204\044\205\146\206\105\207\155\210" +
    "\101\211\042\212\060\214\110\220\047\221\071\222\020" +
    "\226\175\231\115\232\127\233\066\234\112\236\137\240" +
    "\133\001\002\000\002\001\uffb2\000\012\011\206\111\222" +
    "\114\225\116\064\001\002\000\004\013\u03e8\001\002\000" +
    "\004\227\u03e9\001\002\000\004\106\u03ea\001\002\000\002" +
    "\001\uffe1\000\252\003\134\004\167\005\203\006\123\007" +
    "\012\010\072\011\040\013\070\015\107\020\150\021\024" +
    "\022\142\023\136\024\051\026\037\030\116\032\202\035" +
    "\120\037\151\043\063\044\140\045\104\046\124\050\160" +
    "\051\013\052\046\054\200\056\241\057\011\061\111\062" +
    "\173\063\034\064\242\065\036\066\166\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\106" +
    "\074\107\u03ec\111\210\112\147\113\045\114\075\115\027" +
    "\116\064\117\033\120\102\121\057\122\144\123\122\130" +
    "\073\147\010\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\047\221\071" +
    "\222\020\226\175\231\115\232\127\233\066\234\112\236" +
    "\137\240\133\001\002\000\002\001\uffb5\000\002\001\ufec3" +
    "\000\002\001\ufebd\000\016\013\070\016\u0333\017\u0334\103" +
    "\u03f1\104\u0324\105\u0323\001\002\000\012\013\070\103\u013b" +
    "\104\u0324\105\u0323\001\002\000\002\001\ufe3e\000\002\001" +
    "\uffdb\000\154\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\uff02\000\070\034\u016f\125\u0167" +
    "\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153" +
    "\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174" +
    "\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170" +
    "\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\uff07" +
    "\000\004\147\u03f9\001\002\000\004\124\u03f7\001\uff01\000" +
    "\154\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\167\121\170\100" +
    "\175\171\176\017\200\061\201\177\202\032\203\154\204" +
    "\044\205\146\206\105\207\155\210\101\211\042\212\060" +
    "\214\110\220\207\226\175\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\070\034\u016f\125\u0167\126\u0176" +
    "\127\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154" +
    "\u0171\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173" +
    "\163\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171" +
    "\u016d\172\u0163\173\u016c\174\u015e\177\u0162\001\uff08\000\154" +
    "\004\167\006\123\007\012\010\072\011\206\013\070\020" +
    "\150\035\120\046\211\062\173\063\034\073\176\074\014" +
    "\075\023\076\052\077\055\100\152\101\006\102\041\111" +
    "\210\112\147\113\045\114\075\116\064\117\033\120\102" +
    "\121\057\122\144\123\122\130\073\167\121\170\100\175" +
    "\171\176\017\200\061\201\177\202\032\203\154\204\044" +
    "\205\146\206\105\207\155\210\101\211\042\212\060\214" +
    "\110\220\207\226\175\231\115\232\127\233\066\234\112" +
    "\240\133\001\uff02\000\004\147\u03fb\001\002\000\154\004" +
    "\167\006\123\007\012\010\072\011\206\013\070\020\150" +
    "\035\120\046\211\062\173\063\034\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\111\210" +
    "\112\147\113\045\114\075\116\064\117\033\120\102\121" +
    "\057\122\144\123\122\130\073\167\121\170\100\175\171" +
    "\176\017\200\061\201\177\202\032\203\154\204\044\205" +
    "\146\206\105\207\155\210\101\211\042\212\060\214\110" +
    "\220\207\226\175\231\115\232\127\233\066\234\112\240" +
    "\133\001\uff02\000\004\227\u03fd\001\002\000\236\003\134" +
    "\004\167\005\203\006\123\007\012\010\072\011\040\013" +
    "\070\015\107\020\150\021\024\022\142\023\136\024\051" +
    "\026\037\030\116\032\202\035\120\037\151\043\063\044" +
    "\140\045\104\046\211\050\160\051\013\052\046\054\200" +
    "\056\241\057\011\061\111\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\106\074\111\210\112\147\113\045\114\075\115\027\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\147\010\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\047\226\175\230" +
    "\u03ff\231\115\232\127\233\066\234\112\240\133\001\002" +
    "\000\002\001\uffd2\000\002\001\uffe1\000\002\001\uff82\000" +
    "\252\003\134\004\167\005\203\006\123\007\012\010\072" +
    "\011\040\013\070\015\107\020\150\021\024\022\142\023" +
    "\136\024\051\026\037\027\u0402\030\116\032\202\035\120" +
    "\037\151\043\063\044\140\045\104\046\124\050\160\051" +
    "\013\052\046\054\200\056\241\057\011\061\111\062\173" +
    "\063\034\064\242\065\036\066\166\073\176\074\014\075" +
    "\023\076\052\077\055\100\152\101\006\102\041\106\074" +
    "\111\210\112\147\113\045\114\075\115\027\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\147\010" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\047\221\071\222\020\226" +
    "\175\231\115\232\127\233\066\234\112\236\137\240\133" +
    "\001\002\000\004\147\u0403\001\002\000\002\001\uff81\000" +
    "\154\004\167\006\123\007\012\010\072\011\206\013\070" +
    "\020\150\035\120\046\211\062\173\063\034\073\176\074" +
    "\014\075\023\076\052\077\055\100\152\101\006\102\041" +
    "\111\210\112\147\113\045\114\075\116\064\117\033\120" +
    "\102\121\057\122\144\123\122\130\073\167\121\170\100" +
    "\175\171\176\017\200\061\201\177\202\032\203\154\204" +
    "\044\205\146\206\105\207\155\210\101\211\042\212\060" +
    "\214\110\220\207\226\175\231\115\232\127\233\066\234" +
    "\112\240\133\001\002\000\062\034\u016f\146\u0164\150\u0160" +
    "\151\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157" +
    "\u015d\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e" +
    "\166\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174" +
    "\u015e\177\u0162\001\ufeff\000\154\004\167\006\123\007\012" +
    "\010\072\011\206\013\070\020\150\035\120\046\211\062" +
    "\173\063\034\073\176\074\014\075\023\076\052\077\055" +
    "\100\152\101\006\102\041\111\210\112\147\113\045\114" +
    "\075\116\064\117\033\120\102\121\057\122\144\123\122" +
    "\130\073\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\002\000\072" +
    "\034\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151" +
    "\u0170\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d" +
    "\160\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166" +
    "\u016a\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e" +
    "\177\u0162\227\u0408\001\002\000\002\001\ufdea\000\070\034" +
    "\u016f\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170" +
    "\152\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160" +
    "\u0168\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a" +
    "\167\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177" +
    "\u0162\001\ufde9\000\002\001\ufec5\000\004\036\u041b\001\uffe6" +
    "\000\010\011\206\114\u040e\116\064\001\002\000\002\001" +
    "\uffe7\000\006\011\206\116\064\001\002\000\010\011\206" +
    "\114\u040e\116\064\001\002\000\006\124\u0411\147\u0412\001" +
    "\002\000\010\011\206\114\u040e\116\064\001\002\000\002" +
    "\001\ufff0\000\002\001\uffe8\000\006\124\u0411\147\u0415\001" +
    "\002\000\002\001\uffee\000\004\036\u0417\001\uffe4\000\004" +
    "\011\u0418\001\002\000\002\001\uffe3\000\006\124\u0411\147" +
    "\u041a\001\002\000\002\001\uffef\000\004\011\u041c\001\002" +
    "\000\002\001\uffe5\000\006\124\u02ae\147\u041e\001\002\000" +
    "\002\001\uffba\000\154\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\167\121\170\100\175\171\176\017\200\061\201\177\202" +
    "\032\203\154\204\044\205\146\206\105\207\155\210\101" +
    "\211\042\212\060\214\110\220\207\226\175\231\115\232" +
    "\127\233\066\234\112\240\133\001\002\000\072\034\u016f" +
    "\125\u0167\126\u0176\127\u015f\146\u0164\150\u0160\151\u0170\152" +
    "\u0161\153\u0169\154\u0171\155\u0175\156\u016b\157\u015d\160\u0168" +
    "\161\u0174\162\u0173\163\u0165\164\u0172\165\u016e\166\u016a\167" +
    "\u0177\170\u0166\171\u016d\172\u0163\173\u016c\174\u015e\177\u0162" +
    "\213\u0421\001\002\000\002\001\ufe89\000\002\001\uffc4\000" +
    "\002\001\ufed6\000\156\004\167\006\123\007\012\010\072" +
    "\011\206\013\070\020\150\035\120\046\211\062\173\063" +
    "\034\073\176\074\014\075\023\076\052\077\055\100\152" +
    "\101\006\102\041\111\210\112\147\113\045\114\075\116" +
    "\064\117\033\120\102\121\057\122\144\123\122\130\073" +
    "\154\u039b\167\121\170\100\175\171\176\017\200\061\201" +
    "\177\202\032\203\154\204\044\205\146\206\105\207\155" +
    "\210\101\211\042\212\060\214\110\220\207\226\175\231" +
    "\115\232\127\233\066\234\112\240\133\001\ufe04\000\004" +
    "\227\u0426\001\002\000\002\001\ufeb2\000\004\072\u042a\001" +
    "\ufdd9\000\050\071\u0159\072\ufddc\131\u014f\132\u0154\133\u0150" +
    "\134\u015b\135\u0153\136\u015a\137\u0156\140\u0158\141\u0152\142" +
    "\u014e\143\u0155\144\u0157\145\u0151\147\ufddc\200\ufe2f\201\ufe2f" +
    "\227\ufddc\001\ufe31\000\010\072\ufddb\147\ufddb\227\ufddb\001" +
    "\ufe32\000\154\004\167\006\123\007\012\010\072\011\206" +
    "\013\070\020\150\035\120\046\211\062\173\063\034\073" +
    "\176\074\014\075\023\076\052\077\055\100\152\101\006" +
    "\102\041\111\210\112\147\113\045\114\075\116\064\117" +
    "\033\120\102\121\057\122\144\123\122\130\073\167\121" +
    "\170\100\175\171\176\017\200\061\201\177\202\032\203" +
    "\154\204\044\205\146\206\105\207\155\210\101\211\042" +
    "\212\060\214\110\220\207\226\175\231\115\232\127\233" +
    "\066\234\112\240\133\001\002\000\002\001\ufdd8\000\006" +
    "\124\u0435\147\u0436\001\002\000\002\001\uff49\000\026\011" +
    "\206\013\070\074\014\106\u0432\111\u01ee\114\u01ea\116\064" +
    "\212\060\220\304\231\115\001\002\000\002\001\uff4a\000" +
    "\002\001\uff48\000\004\071\u0159\001\ufe31\000\154\004\167" +
    "\006\123\007\012\010\072\011\206\013\070\020\150\035" +
    "\120\046\211\062\173\063\034\073\176\074\014\075\023" +
    "\076\052\077\055\100\152\101\006\102\041\111\210\112" +
    "\147\113\045\114\075\116\064\117\033\120\102\121\057" +
    "\122\144\123\122\130\073\167\121\170\100\175\171\176" +
    "\017\200\061\201\177\202\032\203\154\204\044\205\146" +
    "\206\105\207\155\210\101\211\042\212\060\214\110\220" +
    "\207\226\175\231\115\232\127\233\066\234\112\240\133" +
    "\001\002\000\072\034\u016f\107\u0434\125\u0167\126\u0176\127" +
    "\u015f\146\u0164\150\u0160\151\u0170\152\u0161\153\u0169\154\u0171" +
    "\155\u0175\156\u016b\157\u015d\160\u0168\161\u0174\162\u0173\163" +
    "\u0165\164\u0172\165\u016e\166\u016a\167\u0177\170\u0166\171\u016d" +
    "\172\u0163\173\u016c\174\u015e\177\u0162\001\002\000\002\001" +
    "\uff47\000\006\013\u042d\231\u042e\001\002\000\002\001\uffc8" +
    "\000\002\001\uff4b\000\160\004\167\006\123\007\012\010" +
    "\072\011\206\013\070\020\150\035\120\046\211\062\173" +
    "\063\034\073\176\074\014\075\023\076\052\077\055\100" +
    "\152\101\006\102\041\111\210\112\147\113\045\114\075" +
    "\116\064\117\033\120\102\121\057\122\144\123\122\130" +
    "\073\154\u0146\167\121\170\100\175\171\176\017\200\061" +
    "\201\177\202\032\203\154\204\044\205\146\206\105\207" +
    "\155\210\101\211\042\212\060\214\110\220\207\226\175" +
    "\231\115\232\127\233\066\234\112\240\133\241\u014b\001" +
    "\uff56\000\004\227\u043a\001\002\000\002\001\ufea1\000\002" +
    "\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0439\000\006\002\003\007\004\001\001\000\002\001" +
    "\001\000\126\003\167\004\164\011\200\012\171\015\125" +
    "\057\161\060\047\063\124\066\015\072\020\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\117\130\122\066" +
    "\125\131\134\116\135\142\136\025\142\152\143\027\144" +
    "\053\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\220" +
    "\156\221\076\222\052\225\021\227\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\u042b\047\u042e\001\001\000\002\001\001\000\102\003\167" +
    "\004\164\057\u0428\060\047\063\124\066\015\072\u0146\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\u0427\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\217\u0426\221\076\222\052\225\021\227\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u0422\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\003\167\004\164\054\u041c\057\161\060" +
    "\047\063\124\066\015\072\u02ab\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\u040a\004" +
    "\164\005\u040c\006\u040f\020\252\116\144\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u0409\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u0408\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\111\u03ee\113\u0321" +
    "\157\u031f\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u03ed\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\100\003\167" +
    "\004\164\057\161\060\047\063\124\066\015\072\u03ec\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\025\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\221\076\222\052\225\021\227\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\u03cf\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u039b\073\061\074\162\075\134" +
    "\104\102\107\u039d\110\u039c\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\046\003\u01ee" +
    "\004\164\060\047\073\061\074\u01e7\075\134\104\102\116" +
    "\144\122\u01ea\136\u0253\153\u0399\154\006\155\024\157\127" +
    "\163\042\166\055\221\u01e8\222\052\001\001\000\002\001" +
    "\001\000\100\003\167\004\164\057\161\060\047\063\124" +
    "\066\015\072\u0397\073\061\074\162\075\134\104\102\115" +
    "\075\116\144\122\066\136\025\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\221\076\222\052\225\021\227\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\111" +
    "\u0390\112\u038f\113\u0321\157\u031f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u0388\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\004\232\u0385\001\001\000\010\003\u0384\004\164\116" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u0383\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u0382\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\100\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u0381\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\010\073\u0380\075\134\157\127\001\001\000\002" +
    "\001\001\000\100\003\167\004\164\057\161\060\047\063" +
    "\124\066\015\072\u037d\073\061\074\162\075\134\104\102" +
    "\115\075\116\144\122\066\136\025\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\221\076\222\052\225\021\227" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\u0189\004\164\073\u0182\074\u0180\075\134\104\u0186\116" +
    "\144\122\u0183\155\024\157\127\160\u037b\162\u017f\163\u0185" +
    "\164\u0187\001\001\000\002\001\001\000\010\111\u0371\113" +
    "\u0321\157\u031f\001\001\000\012\003\u0366\004\164\116\144" +
    "\231\u0365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u034a\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\u0349\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\100\003\167" +
    "\004\164\057\161\060\047\063\124\066\015\072\u0348\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\025\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\221\076\222\052\225\021\227\140\001\001\000\002\001" +
    "\001\000\004\053\u033c\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\111\u0320\113\u0321\157\u031f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\003" +
    "\167\004\164\012\u02b6\015\125\057\161\060\047\063\124" +
    "\066\015\072\020\073\061\074\162\075\134\104\102\115" +
    "\075\116\144\122\066\136\025\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\220\156\221\076\222\052\225\021" +
    "\227\140\001\001\000\002\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\u02b4\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\102\003\167\004\164\054\u02ac\057\161\060\047\063" +
    "\124\066\015\072\u02ab\073\061\074\162\075\134\104\102" +
    "\115\075\116\144\122\066\136\025\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\221\076\222\052\225\021\227" +
    "\140\001\001\000\002\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u02aa\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\002\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u02a9\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u028a\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\u0289\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\003\167\004\164\057\u0282\060" +
    "\047\063\124\066\015\072\u0146\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\u0281\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\u0275\001\001\000\002\001\001" +
    "\000\100\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u0273\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u025d\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\u025c\214\034\220\u025e\221\076\222\052\225\021\227" +
    "\140\001\001\000\002\001\001\000\046\003\u01ee\004\164" +
    "\060\047\073\061\074\u01e7\075\134\104\102\116\144\122" +
    "\u01ea\136\u0253\153\u0252\154\006\155\024\157\127\163\042" +
    "\166\055\221\u01e8\222\052\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\u0250\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\204\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\215\004\164\037\226\042\217\043\225\116" +
    "\144\123\223\150\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\271\004\164\116\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\231\001\001\000\002" +
    "\001\001\000\004\242\232\001\001\000\004\171\235\001" +
    "\001\000\004\013\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\124\003\167\004\164\012\245\014\237\015" +
    "\125\057\161\060\047\063\124\066\015\072\020\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\117\130\122" +
    "\066\134\242\135\244\136\025\142\152\143\027\144\053" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\220\156" +
    "\221\076\222\052\225\021\227\140\001\001\000\002\001" +
    "\001\000\004\020\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\261\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\273\004\164\116\144" +
    "\001\001\000\002\001\001\000\016\003\215\004\164\043" +
    "\275\116\144\123\223\150\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\323\004\164\063\306\064\320\065\326\116\144" +
    "\122\304\165\314\223\322\224\325\226\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\u0134\004\164\116\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\323\004\164\063\306\064\u0130" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\002\001\001\000\030\003\323\004\164" +
    "\063\306\064\u012c\065\326\116\144\122\304\165\314\223" +
    "\322\224\325\226\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\323\004\164\063\306\064\u0129\065" +
    "\326\116\144\122\304\165\314\223\322\224\325\226\307" +
    "\001\001\000\002\001\001\000\034\003\323\004\164\063" +
    "\306\064\u011c\065\326\067\u011d\071\u011b\116\144\122\304" +
    "\165\314\223\322\224\325\226\307\001\001\000\002\001" +
    "\001\000\030\003\323\004\164\063\306\064\u011a\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\323" +
    "\004\164\063\306\064\332\065\326\116\144\122\304\165" +
    "\314\223\322\224\325\226\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\323\004\164\063\306\065" +
    "\330\116\144\122\304\165\314\223\322\224\325\226\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0116\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0115\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0114\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0113\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0112\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u010e\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u010c\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u010b\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u010a\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0109\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0108\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0107\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0106\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0105\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0104\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\030\003\323\004\164\063\306\064\u0103\065\326" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\002\001\001\000\026\003\323\004\164\063\306" +
    "\065\u0101\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\u0100" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\377" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\376" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\375" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\374" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\373" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\372" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\371" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\370" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\030\003\323\004\164\063\306\064\367" +
    "\065\326\116\144\122\304\165\314\223\322\224\325\226" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\323\004\164\063\306\064\u0111\065\326\116" +
    "\144\122\304\165\314\223\322\224\325\226\307\001\001" +
    "\000\002\001\001\000\030\003\323\004\164\063\306\064" +
    "\u0110\065\326\116\144\122\304\165\314\223\322\224\325" +
    "\226\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\323\004\164\063" +
    "\306\065\u0118\116\144\122\304\165\314\223\322\224\325" +
    "\226\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\070\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\323\004" +
    "\164\063\306\064\u0120\065\326\116\144\122\304\165\314" +
    "\223\322\224\325\226\307\001\001\000\002\001\001\000" +
    "\030\003\323\004\164\063\306\064\u0123\065\326\116\144" +
    "\122\304\165\314\223\322\224\325\226\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\323\004\164" +
    "\063\306\064\u0125\065\326\116\144\122\304\165\314\223" +
    "\322\224\325\226\307\001\001\000\002\001\001\000\026" +
    "\003\323\004\164\063\306\065\u0127\116\144\122\304\165" +
    "\314\223\322\224\325\226\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\u012b\004" +
    "\164\116\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\323\004\164\063\306\064\u011c\065\326\067" +
    "\u012e\071\u011b\116\144\122\304\165\314\223\322\224\325" +
    "\226\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\323\004\164\063\306\065\u0132" +
    "\116\144\122\304\165\314\223\322\224\325\226\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\323\004\164\063" +
    "\306\064\u013e\065\326\116\144\122\304\165\314\223\322" +
    "\224\325\226\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\u0142\004\164\116\144" +
    "\001\001\000\002\001\001\000\104\003\167\004\164\044" +
    "\u0144\045\u0148\057\u0149\060\047\063\124\066\015\072\u0146" +
    "\073\061\074\162\075\134\104\102\115\075\116\144\122" +
    "\066\136\u0147\151\163\153\113\154\006\155\024\157\127" +
    "\161\105\163\042\165\160\166\055\210\173\211\014\214" +
    "\034\221\076\222\052\225\021\227\140\001\001\000\002" +
    "\001\001\000\046\003\u01ee\004\164\060\047\073\061\074" +
    "\u01e7\075\134\104\102\116\144\121\u021c\122\u01ea\136\u021b" +
    "\154\006\155\024\157\127\163\042\166\055\221\u01e8\222" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\003\167\004\164\057" +
    "\u014c\060\047\063\124\066\015\072\u0146\073\061\074\162" +
    "\075\134\104\102\115\075\116\144\122\066\136\u014b\151" +
    "\163\153\113\154\006\155\024\157\127\161\105\163\042" +
    "\165\160\166\055\210\173\211\014\214\034\221\076\222" +
    "\052\225\021\227\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\003\167\004\164\057\161\060\047\063" +
    "\124\066\015\072\u0212\073\061\074\162\075\134\104\102" +
    "\115\075\116\144\122\066\136\025\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\221\076\222\052\225\021\227" +
    "\140\001\001\000\100\003\167\004\164\057\161\060\047" +
    "\063\124\066\015\072\u01e6\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u01e4\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\100\003\167\004\164\057\161" +
    "\060\047\063\124\066\015\072\u01e3\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\025\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\100\003\167\004\164\057" +
    "\161\060\047\063\124\066\015\072\u01e2\073\061\074\162" +
    "\075\134\104\102\115\075\116\144\122\066\136\025\151" +
    "\163\153\113\154\006\155\024\157\127\161\105\163\042" +
    "\165\160\166\055\210\173\211\014\214\034\221\076\222" +
    "\052\225\021\227\140\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u01e1\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\u01e0\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\100\003\167" +
    "\004\164\057\161\060\047\063\124\066\015\072\u01df\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\025\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\221\076\222\052\225\021\227\140\001\001\000\100\003" +
    "\167\004\164\057\161\060\047\063\124\066\015\072\u01de" +
    "\073\061\074\162\075\134\104\102\115\075\116\144\122" +
    "\066\136\025\151\163\153\113\154\006\155\024\157\127" +
    "\161\105\163\042\165\160\166\055\210\173\211\014\214" +
    "\034\221\076\222\052\225\021\227\140\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u01dd\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u01dc\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\022\073\u0193\075\134\077\u01d0\103\u018e\104\u0191\116" +
    "\u018d\154\u01cf\157\127\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u01ce\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\u015b\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\100\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u01cd\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\100\003\167\004\164\057\161\060\047\063\124" +
    "\066\015\072\u01cc\073\061\074\162\075\134\104\102\115" +
    "\075\116\144\122\066\136\025\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\221\076\222\052\225\021\227\140" +
    "\001\001\000\100\003\167\004\164\057\161\060\047\063" +
    "\124\066\015\072\u01cb\073\061\074\162\075\134\104\102" +
    "\115\075\116\144\122\066\136\025\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\221\076\222\052\225\021\227" +
    "\140\001\001\000\100\003\167\004\164\057\161\060\047" +
    "\063\124\066\015\072\u01ca\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u01c9\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\100\003\167\004\164\057\161" +
    "\060\047\063\124\066\015\072\u01c8\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\025\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\100\003\167\004\164\057" +
    "\161\060\047\063\124\066\015\072\u01c7\073\061\074\162" +
    "\075\134\104\102\115\075\116\144\122\066\136\025\151" +
    "\163\153\113\154\006\155\024\157\127\161\105\163\042" +
    "\165\160\166\055\210\173\211\014\214\034\221\076\222" +
    "\052\225\021\227\140\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u01c2\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\u01c1\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\100\003\167" +
    "\004\164\057\161\060\047\063\124\066\015\072\u01c0\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\025\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\221\076\222\052\225\021\227\140\001\001\000\100\003" +
    "\167\004\164\057\161\060\047\063\124\066\015\072\u01bf" +
    "\073\061\074\162\075\134\104\102\115\075\116\144\122" +
    "\066\136\025\151\163\153\113\154\006\155\024\157\127" +
    "\161\105\163\042\165\160\166\055\210\173\211\014\214" +
    "\034\221\076\222\052\225\021\227\140\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u01be\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u01bd\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\100\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u01bc\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\100\003\167\004\164\057\161\060\047\063\124" +
    "\066\015\072\u01bb\073\061\074\162\075\134\104\102\115" +
    "\075\116\144\122\066\136\025\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\221\076\222\052\225\021\227\140" +
    "\001\001\000\100\003\167\004\164\057\161\060\047\063" +
    "\124\066\015\072\u01ba\073\061\074\162\075\134\104\102" +
    "\115\075\116\144\122\066\136\025\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\221\076\222\052\225\021\227" +
    "\140\001\001\000\100\003\167\004\164\057\161\060\047" +
    "\063\124\066\015\072\u01b9\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u01b8\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\036\003\u0189\004\164\073\u0182" +
    "\074\u0180\075\134\104\u0186\116\144\122\u0183\155\024\157" +
    "\127\160\u0184\162\u017f\163\u0185\164\u0187\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u017e\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u017d\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\100\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u017c\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\100\003\167\004\164\057\161\060\047\063\124" +
    "\066\015\072\u017b\073\061\074\162\075\134\104\102\115" +
    "\075\116\144\122\066\136\025\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\221\076\222\052\225\021\227\140" +
    "\001\001\000\100\003\167\004\164\057\161\060\047\063" +
    "\124\066\015\072\u017a\073\061\074\162\075\134\104\102" +
    "\115\075\116\144\122\066\136\025\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\221\076\222\052\225\021\227" +
    "\140\001\001\000\100\003\167\004\164\057\161\060\047" +
    "\063\124\066\015\072\u0179\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u0178\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\100\003\167\004\164\057\161" +
    "\060\047\063\124\066\015\072\u0177\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\025\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\u01b5\004\164" +
    "\116\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\073\u01a8\075\134" +
    "\157\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\u018b\004\164\116\144\001\001" +
    "\000\002\001\001\000\022\073\u0193\075\134\077\u0190\103" +
    "\u018e\104\u0191\116\u018d\154\u018f\157\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\073\u019d\075\134\157\127\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u019b\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\002\001\001\000\100\003\167\004\164\057\161\060\047" +
    "\063\124\066\015\072\u0199\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\102\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u0196\073\061\074\162\075\134" +
    "\076\u0197\104\102\115\075\116\144\122\066\136\025\151" +
    "\163\153\113\154\006\155\024\157\127\161\105\163\042" +
    "\165\160\166\055\210\173\211\014\214\034\221\076\222" +
    "\052\225\021\227\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u01a0\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u01a6\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\102\003\167\004\164\057\161\060\047\063\124" +
    "\066\015\072\u0196\073\061\074\162\075\134\076\u01a4\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\075\u01ad\100\u01aa\101\u01ac\104\u01ab\157\127\001\001\000" +
    "\002\001\001\000\010\075\u01ad\100\u01ae\157\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u01b3\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\102\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u0196\073\061\074\162\075\134\076\u01b1\104\102" +
    "\115\075\116\144\122\066\136\025\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\221\076\222\052\225\021\227" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\075" +
    "\u01ad\100\u01aa\101\u01b7\104\u01ab\157\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u01c4\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\002\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u01c6\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\003\167\004\164\044\u01d2" +
    "\045\u0148\057\u0149\060\047\063\124\066\015\072\u0146\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\u0147\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\221\076\222\052\225\021\227\140\001\001\000\002\001" +
    "\001\000\004\102\u01d4\001\001\000\002\001\001\000\102" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u0196\073\061\074\162\075\134\076\u01d6\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\104\003\167" +
    "\004\164\044\u01d9\045\u0148\057\u0149\060\047\063\124\066" +
    "\015\072\u0146\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\u0147\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\002\001\001\000\004\102\u01db\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\u01ee\004\164\060\047\073\061\074\u01e7\075\134" +
    "\104\102\116\144\122\u01ea\136\u01eb\154\006\155\024\157" +
    "\127\163\042\166\055\221\u01e8\222\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\u0202\004\164\116\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\u0189\004\164\073\u0182\074\u0180\075" +
    "\134\104\u0186\116\144\122\u0183\155\024\157\127\160\u01f4" +
    "\162\u017f\163\u0185\164\u0187\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\003\167\004\164\044\u01f0\045\u0148" +
    "\057\u0149\060\047\063\124\066\015\072\u0146\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\u0147" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\u01f3\004\164\116\144\001\001" +
    "\000\002\001\001\000\004\062\u01f5\001\001\000\002\001" +
    "\001\000\104\003\167\004\164\044\u01f7\045\u0148\057\u0149" +
    "\060\047\063\124\066\015\072\u0146\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\u0147\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\075\u01ad\100\u01aa\101\u01fb\103\u01fa\104\u01ab" +
    "\116\u018d\157\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\003\167\004\164\044\u01fd\045\u0148\057\u0149" +
    "\060\047\063\124\066\015\072\u0146\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\u0147\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\003\167\004\164\044\u0200\045\u0148\057\u0149" +
    "\060\047\063\124\066\015\072\u0146\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\u0147\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\003\167\004\164\044\u0204" +
    "\045\u0148\057\u0149\060\047\063\124\066\015\072\u0146\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\u0147\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\221\076\222\052\225\021\227\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\102\003\167\004\164\057\161" +
    "\060\047\063\124\066\015\072\u0196\073\061\074\162\075" +
    "\134\076\u0207\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\075\u01ad\100\u01aa\101\u020b\103\u020a" +
    "\104\u01ab\116\u018d\157\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\003\167\004\164\044\u020d\045\u0148" +
    "\057\u0149\060\047\063\124\066\015\072\u0146\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\u0147" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\003\167\004\164\044\u0210\045\u0148" +
    "\057\u0149\060\047\063\124\066\015\072\u0146\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\u0147" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\003\167\004\164" +
    "\057\u0216\060\047\063\124\066\015\072\u0146\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\u0215" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\046\003\u01ee\004" +
    "\164\060\047\073\061\074\u01e7\075\134\104\102\116\144" +
    "\121\u021a\122\u01ea\136\u021b\154\006\155\024\157\127\163" +
    "\042\166\055\221\u01e8\222\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\003\167\004\164\057\u0219\060" +
    "\047\063\124\066\015\072\u0146\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\u0218\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\u021f\001\001\000\002\001\001" +
    "\000\022\003\215\004\164\037\u0221\042\217\043\225\116" +
    "\144\123\223\150\216\001\001\000\002\001\001\000\004" +
    "\040\u0223\001\001\000\004\243\u0224\001\001\000\004\171" +
    "\u0225\001\001\000\002\001\001\000\106\003\167\004\164" +
    "\012\u0228\015\125\057\161\060\047\063\124\066\015\072" +
    "\020\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\220\156\221\076\222\052\225\021\227\140\001" +
    "\001\000\004\013\u0232\001\001\000\004\033\u0229\001\001" +
    "\000\004\035\u022a\001\001\000\002\001\001\000\106\003" +
    "\167\004\164\012\u0231\015\125\057\161\060\047\063\124" +
    "\066\015\072\020\073\061\074\162\075\134\104\102\115" +
    "\075\116\144\122\066\136\025\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\220\156\221\076\222\052\225\021" +
    "\227\140\001\001\000\002\001\001\000\100\003\167\004" +
    "\164\057\161\060\047\063\124\066\015\072\u022e\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\106\003\167\004\164\012\u0230\015\125\057\161\060" +
    "\047\063\124\066\015\072\020\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\220\156\221\076\222" +
    "\052\225\021\227\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\126\003\167\004\164\012\245\014\237\015" +
    "\125\034\u0233\057\161\060\047\063\124\066\015\072\020" +
    "\073\061\074\162\075\134\104\102\115\075\116\144\117" +
    "\130\122\066\134\242\135\244\136\025\142\152\143\027" +
    "\144\053\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\220\156\221\076\222\052\225\021\227\140\001\001\000" +
    "\004\036\u0234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u0238\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u023b\001\001\000\124\003\167\004\164\012" +
    "\245\014\237\015\125\057\161\060\047\063\124\066\015" +
    "\072\020\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\117\130\122\066\134\242\135\244\136\025\142\152" +
    "\143\027\144\053\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\220\156\221\076\222\052\225\021\227\140\001" +
    "\001\000\004\013\u023d\001\001\000\124\003\167\004\164" +
    "\012\245\014\237\015\125\057\161\060\047\063\124\066" +
    "\015\072\020\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\117\130\122\066\134\242\135\244\136\025\142" +
    "\152\143\027\144\053\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\220\156\221\076\222\052\225\021\227\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\u0241\116\u0242\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\323\004\164\063\306\064\u0244\065\326\116" +
    "\144\122\304\165\314\223\322\224\325\226\307\001\001" +
    "\000\002\001\001\000\110\003\167\004\164\012\u024c\015" +
    "\125\025\u024a\057\161\060\047\063\124\066\015\072\020" +
    "\073\061\074\162\075\134\104\102\115\075\116\144\122" +
    "\066\136\025\151\163\153\113\154\006\155\024\157\127" +
    "\161\105\163\042\165\160\166\055\210\173\211\014\214" +
    "\034\220\156\221\076\222\052\225\021\227\140\001\001" +
    "\000\004\116\u0247\001\001\000\002\001\001\000\030\003" +
    "\323\004\164\063\306\064\u0249\065\326\116\144\122\304" +
    "\165\314\223\322\224\325\226\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u024d\001\001\000\002" +
    "\001\001\000\124\003\167\004\164\012\245\014\237\015" +
    "\125\057\161\060\047\063\124\066\015\072\020\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\117\130\122" +
    "\066\134\242\135\244\136\025\142\152\143\027\144\053" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\220\156" +
    "\221\076\222\052\225\021\227\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\u01ee\004" +
    "\164\060\047\073\061\074\u01e7\075\134\104\102\105\u0256" +
    "\106\u0257\116\144\122\u01ea\136\u0258\154\006\155\024\157" +
    "\127\163\042\166\055\214\u0255\221\u01e8\222\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\003\u01ee\004\164" +
    "\060\047\073\061\074\u01e7\075\134\104\102\106\u025b\116" +
    "\144\122\u01ea\136\u0258\154\006\155\024\157\127\163\042" +
    "\166\055\214\u0255\221\u01e8\222\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\073\u0193\075\134\077\u0264\103\u018e\104\u0191\116\u018d" +
    "\154\u0263\157\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\003\167\004\164\044\u0266\045\u0148\057\u0149" +
    "\060\047\063\124\066\015\072\u0146\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\u0147\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\002\001\001\000\004\102" +
    "\u0268\001\001\000\002\001\001\000\104\003\167\004\164" +
    "\044\u026a\045\u0148\057\u0149\060\047\063\124\066\015\072" +
    "\u0146\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\u0147\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\002\001\001\000\004\102\u026c\001\001\000\002\001\001" +
    "\000\046\003\u01ee\004\164\060\047\073\061\074\u01e7\075" +
    "\134\104\102\116\144\122\u01ea\136\u026e\154\006\155\024" +
    "\156\u026f\157\127\163\042\166\055\221\u01e8\222\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\u01ee\004\164\060\047\073\061\074\u01e7\075" +
    "\134\104\102\116\144\122\u01ea\136\u0272\154\006\155\024" +
    "\157\127\163\042\166\055\221\u01e8\222\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u0276\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\116\u027a\001\001\000\002\001\001\000\020\075\u01ad\100" +
    "\u01aa\101\u020b\103\u020a\104\u01ab\116\u018d\157\127\001\001" +
    "\000\002\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u027e\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\323\004\164\063\306\064\u0288\065" +
    "\326\116\144\122\304\165\314\223\322\224\325\226\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\003\167\004\164\057\161\060\047\063\124" +
    "\066\015\072\u028c\073\061\074\162\075\134\104\102\115" +
    "\075\116\144\122\066\136\025\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\221\076\222\052\225\021\227\140" +
    "\001\001\000\002\001\001\000\004\027\u028f\001\001\000" +
    "\004\030\u02a1\001\001\000\002\001\001\000\004\030\u0291" +
    "\001\001\000\002\001\001\000\004\030\u0293\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u029b\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\004\031\u0297\001" +
    "\001\000\004\013\u029a\001\001\000\002\001\001\000\002" +
    "\001\001\000\124\003\167\004\164\012\245\014\237\015" +
    "\125\057\161\060\047\063\124\066\015\072\020\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\117\130\122" +
    "\066\134\242\135\244\136\025\142\152\143\027\144\053" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\220\156" +
    "\221\076\222\052\225\021\227\140\001\001\000\004\031" +
    "\u029c\001\001\000\004\013\u029d\001\001\000\124\003\167" +
    "\004\164\012\245\014\237\015\125\057\161\060\047\063" +
    "\124\066\015\072\020\073\061\074\162\075\134\104\102" +
    "\115\075\116\144\117\130\122\066\134\242\135\244\136" +
    "\025\142\152\143\027\144\053\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\220\156\221\076\222\052\225\021" +
    "\227\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u02a3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\003\167\004\164\057\161\060\047\063\124\066\015" +
    "\072\u02a7\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u02af\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\100\003\167\004\164" +
    "\057\161\060\047\063\124\066\015\072\u02b1\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\221\076" +
    "\222\052\225\021\227\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\100\003" +
    "\167\004\164\057\161\060\047\063\124\066\015\072\u02b9" +
    "\073\061\074\162\075\134\104\102\115\075\116\144\122" +
    "\066\136\025\151\163\153\113\154\006\155\024\157\127" +
    "\161\105\163\042\165\160\166\055\210\173\211\014\214" +
    "\034\221\076\222\052\225\021\227\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\323" +
    "\004\164\063\306\064\u02c0\065\326\116\144\122\304\165" +
    "\314\223\322\224\325\226\307\001\001\000\002\001\001" +
    "\000\004\120\u02c2\001\001\000\004\237\u02ca\001\001\000" +
    "\014\003\215\004\164\116\144\123\u02c5\147\u02c4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\215\004\164\116\144\123\u02c8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u02cc\001\001\000\032\052\u02d3\117\130\125\u02df\126\u02cf" +
    "\132\u02d4\133\u02d7\135\u02cd\143\027\144\053\152\u02de\167" +
    "\u02d5\173\u02ce\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\133\u030d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\215\004\164\116" +
    "\144\123\u02ec\174\u02eb\001\001\000\004\124\u02e3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\323\004\164\063" +
    "\306\064\u02e8\065\326\116\144\122\304\165\314\223\322" +
    "\224\325\226\307\001\001\000\002\001\001\000\030\003" +
    "\323\004\164\063\306\064\u02ea\065\326\116\144\122\304" +
    "\165\314\223\322\224\325\226\307\001\001\000\002\001" +
    "\001\000\004\175\u02ef\001\001\000\002\001\001\000\012" +
    "\003\215\004\164\116\144\123\u030c\001\001\000\030\003" +
    "\215\004\164\116\144\123\u02f6\176\u02f4\177\u02f3\200\u02f8" +
    "\201\u02f7\203\u02f1\204\u02f5\205\u02f2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\215\004\164\116\144\123\u02f6\200\u0303\201" +
    "\u02f7\203\u02f1\204\u02f5\205\u02f2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\215\004\164\116" +
    "\144\123\u02ff\202\u02fe\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\215\004\164\116\144\123\u0301\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\206\u0307\207\u030a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u0313\001" +
    "\001\000\004\116\u0314\001\001\000\004\240\u0315\001\001" +
    "\000\002\001\001\000\022\003\215\004\164\037\u0317\042" +
    "\217\043\225\116\144\123\223\150\216\001\001\000\002" +
    "\001\001\000\004\241\u0319\001\001\000\004\127\u031a\001" +
    "\001\000\002\001\001\000\004\013\u031d\001\001\000\002" +
    "\001\001\000\124\003\167\004\164\012\245\014\237\015" +
    "\125\057\161\060\047\063\124\066\015\072\020\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\117\130\122" +
    "\066\134\242\135\244\136\025\142\152\143\027\144\053" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\220\156" +
    "\221\076\222\052\225\021\227\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\113\u0330\157\u031f\001\001" +
    "\000\002\001\001\000\044\003\u01ee\004\164\060\047\073" +
    "\061\074\u01e7\075\134\104\102\116\144\122\u01ea\136\u032e" +
    "\154\006\155\024\157\127\163\042\166\055\221\u01e8\222" +
    "\052\001\001\000\100\003\167\004\164\057\161\060\047" +
    "\063\124\066\015\072\u0326\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\006\113\u0325\157\u031f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\100\003\167\004\164\057\161\060\047\063" +
    "\124\066\015\072\u032a\073\061\074\162\075\134\104\102" +
    "\115\075\116\144\122\066\136\025\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\221\076\222\052\225\021\227" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\114\u0338\116\u0339\157\u0337\001" +
    "\001\000\004\116\u0336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\u033d\001\001\000\004" +
    "\233\u033e\001\001\000\002\001\001\000\022\003\215\004" +
    "\164\037\u0340\042\217\043\225\116\144\123\223\150\216" +
    "\001\001\000\002\001\001\000\004\234\u0342\001\001\000" +
    "\004\170\u0345\001\001\000\004\013\u0346\001\001\000\002" +
    "\001\001\000\002\001\001\000\124\003\167\004\164\012" +
    "\245\014\237\015\125\057\161\060\047\063\124\066\015" +
    "\072\020\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\117\130\122\066\134\242\135\244\136\025\142\152" +
    "\143\027\144\053\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\220\156\221\076\222\052\225\021\227\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\102\003\167\004\164\057\u034d\060" +
    "\047\063\124\066\015\072\u0146\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\u034c\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\215\u034e\221\076\222" +
    "\052\225\021\227\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\u01ee\004\164\021" +
    "\u0355\022\u0350\060\047\073\061\074\u01e7\075\134\104\102" +
    "\116\144\122\u01ea\136\u0353\154\006\155\024\157\127\163" +
    "\042\166\055\214\u0351\216\u0352\221\u01e8\222\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\003\u01ee\004\164\060\047\073\061" +
    "\074\u01e7\075\134\104\102\116\144\122\u01ea\136\u035f\154" +
    "\006\155\024\157\127\163\042\166\055\221\u01e8\222\052" +
    "\001\001\000\052\003\u01ee\004\164\022\u0356\060\047\073" +
    "\061\074\u01e7\075\134\104\102\116\144\122\u01ea\136\u0353" +
    "\154\006\155\024\157\127\163\042\166\055\214\u0351\216" +
    "\u0357\221\u01e8\222\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\003\167\004\164\012\u035a\015\125\024" +
    "\u035b\057\161\060\047\063\124\066\015\072\020\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\220" +
    "\156\221\076\222\052\225\021\227\140\001\001\000\004" +
    "\013\u035c\001\001\000\002\001\001\000\002\001\001\000" +
    "\124\003\167\004\164\012\245\014\237\015\125\057\161" +
    "\060\047\063\124\066\015\072\020\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\117\130\122\066\134\242" +
    "\135\244\136\025\142\152\143\027\144\053\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\220\156\221\076\222" +
    "\052\225\021\227\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\110\003\167\004\164\012" +
    "\u035a\015\125\024\u0361\057\161\060\047\063\124\066\015" +
    "\072\020\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\220\156\221\076\222\052\225\021\227\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\131\u0370\001\001\000\004" +
    "\230\u0367\001\001\000\006\130\u036b\131\u036a\001\001\000" +
    "\004\010\u036d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\126\003\167\004" +
    "\164\011\u036f\012\171\015\125\057\161\060\047\063\124" +
    "\066\015\072\020\073\061\074\162\075\134\104\102\115" +
    "\075\116\144\117\130\122\066\125\131\134\116\135\142" +
    "\136\025\142\152\143\027\144\053\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\220\156\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\113\u0330\157\u031f\001\001\000" +
    "\002\001\001\000\050\003\u01ee\004\164\016\u0375\017\u0374" +
    "\060\047\073\061\074\u01e7\075\134\104\102\116\144\122" +
    "\u01ea\136\u0376\154\006\155\024\157\127\163\042\166\055" +
    "\221\u01e8\222\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\u01ee" +
    "\004\164\017\u0379\060\047\073\061\074\u01e7\075\134\104" +
    "\102\116\144\122\u01ea\136\u0376\154\006\155\024\157\127" +
    "\163\042\166\055\221\u01e8\222\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\u037c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0386\001" +
    "\001\000\124\003\167\004\164\012\245\014\237\015\125" +
    "\057\161\060\047\063\124\066\015\072\020\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\117\130\122\066" +
    "\134\242\135\244\136\025\142\152\143\027\144\053\151" +
    "\163\153\113\154\006\155\024\157\127\161\105\163\042" +
    "\165\160\166\055\210\173\211\014\214\034\220\156\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u038d\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\020\075\u01ad\100\u01aa\101\u01fb" +
    "\103\u01fa\104\u01ab\116\u018d\157\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\113\u0330\157\u031f\001\001\000" +
    "\006\113\u0325\157\u031f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\u01ee\004\164\060\047\073\061\074\u01e7\075" +
    "\134\104\102\116\144\121\u03ac\122\u01ea\136\u021b\154\006" +
    "\155\024\157\127\163\042\166\055\221\u01e8\222\052\001" +
    "\001\000\002\001\001\000\004\070\u03a0\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\003\167\004\164\057" +
    "\161\060\047\063\124\066\015\072\u03a2\073\061\074\162" +
    "\075\134\104\102\115\075\116\144\122\066\136\025\151" +
    "\163\153\113\154\006\155\024\157\127\161\105\163\042" +
    "\165\160\166\055\210\173\211\014\214\034\221\076\222" +
    "\052\225\021\227\140\001\001\000\002\001\001\000\046" +
    "\003\u01ee\004\164\060\047\073\061\074\u01e7\075\134\104" +
    "\102\116\144\121\u03a7\122\u01ea\136\u021b\154\006\155\024" +
    "\157\127\163\042\166\055\221\u01e8\222\052\001\001\000" +
    "\002\001\001\000\100\003\167\004\164\057\161\060\047" +
    "\063\124\066\015\072\u03a5\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\046\003\u01ee\004\164\060\047\073" +
    "\061\074\u01e7\075\134\104\102\116\144\121\u03a6\122\u01ea" +
    "\136\u021b\154\006\155\024\157\127\163\042\166\055\221" +
    "\u01e8\222\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\100\003\167\004\164\057\161\060" +
    "\047\063\124\066\015\072\u03aa\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\122\066\136\025\151\163\153" +
    "\113\154\006\155\024\157\127\161\105\163\042\165\160" +
    "\166\055\210\173\211\014\214\034\221\076\222\052\225" +
    "\021\227\140\001\001\000\046\003\u01ee\004\164\060\047" +
    "\073\061\074\u01e7\075\134\104\102\116\144\121\u03ab\122" +
    "\u01ea\136\u021b\154\006\155\024\157\127\163\042\166\055" +
    "\221\u01e8\222\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\100\003\167\004\164\057\161" +
    "\060\047\063\124\066\015\072\u03ae\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\025\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\235\u03b1\001\001\000\004\145\u03b3\001\001" +
    "\000\012\003\215\004\164\116\144\123\u03bd\001\001\000" +
    "\004\172\u03b4\001\001\000\004\146\u03b6\001\001\000\002" +
    "\001\001\000\004\236\u03b9\001\001\000\014\003\215\004" +
    "\164\116\144\123\u02c5\147\u03b8\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\u03bb\001\001\000\032\052" +
    "\u02d3\117\130\125\u02df\126\u02cf\132\u02d4\133\u02d7\135\u02cd" +
    "\143\027\144\053\152\u02de\167\u03bc\173\u02ce\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\102" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u0196\073\061\074\162\075\134\076\u03c0\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\003\167" +
    "\004\164\057\161\060\047\063\124\066\015\072\u03c3\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\025\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\221\076\222\052\225\021\227\140\001\001\000\002\001" +
    "\001\000\110\003\167\004\164\012\u03c7\015\125\032\u03c6" +
    "\057\161\060\047\063\124\066\015\072\020\073\061\074" +
    "\162\075\134\104\102\115\075\116\144\122\066\136\025" +
    "\151\163\153\113\154\006\155\024\157\127\161\105\163" +
    "\042\165\160\166\055\210\173\211\014\214\034\220\156" +
    "\221\076\222\052\225\021\227\140\001\001\000\004\013" +
    "\u03c8\001\001\000\002\001\001\000\002\001\001\000\124" +
    "\003\167\004\164\012\245\014\237\015\125\057\161\060" +
    "\047\063\124\066\015\072\020\073\061\074\162\075\134" +
    "\104\102\115\075\116\144\117\130\122\066\134\242\135" +
    "\244\136\025\142\152\143\027\144\053\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\220\156\221\076\222\052" +
    "\225\021\227\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\102\003\167\004\164\057\161\060\047\063\124" +
    "\066\015\072\u0196\073\061\074\162\075\134\076\u03cc\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\323\004\164\063" +
    "\306\064\u03d4\065\326\116\144\122\304\165\314\223\322" +
    "\224\325\226\307\001\001\000\002\001\001\000\030\003" +
    "\323\004\164\063\306\064\u03d6\065\326\116\144\122\304" +
    "\165\314\223\322\224\325\226\307\001\001\000\002\001" +
    "\001\000\004\013\u03d8\001\001\000\124\003\167\004\164" +
    "\012\245\014\237\015\125\057\161\060\047\063\124\066" +
    "\015\072\020\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\117\130\122\066\134\242\135\244\136\025\142" +
    "\152\143\027\144\053\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\220\156\221\076\222\052\225\021\227\140" +
    "\001\001\000\010\137\u03dc\140\u03dd\141\u03db\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\212\u03e0\213\u03df" +
    "\001\001\000\004\141\u03de\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u03e3\001\001\000\124\003\167\004\164\012\245\014" +
    "\237\015\125\057\161\060\047\063\124\066\015\072\020" +
    "\073\061\074\162\075\134\104\102\115\075\116\144\117" +
    "\130\122\066\134\242\135\244\136\025\142\152\143\027" +
    "\144\053\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\220\156\221\076\222\052\225\021\227\140\001\001\000" +
    "\002\001\001\000\012\003\215\004\164\116\144\123\u03e6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u03ea\001\001\000\124\003\167\004\164" +
    "\012\245\014\237\015\125\057\161\060\047\063\124\066" +
    "\015\072\020\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\117\130\122\066\134\242\135\244\136\025\142" +
    "\152\143\027\144\053\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\220\156\221\076\222\052\225\021\227\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\113\u0330\157\u031f\001\001\000\006\113\u0325" +
    "\157\u031f\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\003\167\004\164\055\u03f4\056\u03f5\057\161\060\047" +
    "\063\124\066\015\072\u03f3\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\003\167\004\164\057\161\060\047" +
    "\063\124\066\015\072\u03f7\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\122\066\136\025\151\163\153\113" +
    "\154\006\155\024\157\127\161\105\163\042\165\160\166" +
    "\055\210\173\211\014\214\034\221\076\222\052\225\021" +
    "\227\140\001\001\000\002\001\001\000\104\003\167\004" +
    "\164\055\u03f9\056\u03f5\057\161\060\047\063\124\066\015" +
    "\072\u03f3\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\025\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\002\001\001\000\104\003\167\004\164\055\u03fb\056" +
    "\u03f5\057\161\060\047\063\124\066\015\072\u03f3\073\061" +
    "\074\162\075\134\104\102\115\075\116\144\122\066\136" +
    "\025\151\163\153\113\154\006\155\024\157\127\161\105" +
    "\163\042\165\160\166\055\210\173\211\014\214\034\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\110\003\167\004\164\012\u03ff\015\125\023\u03fd\057" +
    "\161\060\047\063\124\066\015\072\020\073\061\074\162" +
    "\075\134\104\102\115\075\116\144\122\066\136\025\151" +
    "\163\153\113\154\006\155\024\157\127\161\105\163\042" +
    "\165\160\166\055\210\173\211\014\214\034\220\156\221" +
    "\076\222\052\225\021\227\140\001\001\000\002\001\001" +
    "\000\004\013\u0400\001\001\000\002\001\001\000\124\003" +
    "\167\004\164\012\245\014\237\015\125\057\161\060\047" +
    "\063\124\066\015\072\020\073\061\074\162\075\134\104" +
    "\102\115\075\116\144\117\130\122\066\134\242\135\244" +
    "\136\025\142\152\143\027\144\053\151\163\153\113\154" +
    "\006\155\024\157\127\161\105\163\042\165\160\166\055" +
    "\210\173\211\014\214\034\220\156\221\076\222\052\225" +
    "\021\227\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\003\167\004\164\057\161\060\047\063\124\066" +
    "\015\072\u0404\073\061\074\162\075\134\104\102\115\075" +
    "\116\144\122\066\136\025\151\163\153\113\154\006\155" +
    "\024\157\127\161\105\163\042\165\160\166\055\210\173" +
    "\211\014\214\034\221\076\222\052\225\021\227\140\001" +
    "\001\000\002\001\001\000\100\003\167\004\164\057\161" +
    "\060\047\063\124\066\015\072\u0406\073\061\074\162\075" +
    "\134\104\102\115\075\116\144\122\066\136\025\151\163" +
    "\153\113\154\006\155\024\157\127\161\105\163\042\165" +
    "\160\166\055\210\173\211\014\214\034\221\076\222\052" +
    "\225\021\227\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u040a\004\164\005\u040c\006\u0418\116\144\001" +
    "\001\000\002\001\001\000\010\003\u0415\004\164\116\144" +
    "\001\001\000\014\003\u040a\004\164\005\u040c\006\u0413\116" +
    "\144\001\001\000\002\001\001\000\012\003\u040a\004\164" +
    "\005\u0412\116\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\003\167\004\164\057" +
    "\161\060\047\063\124\066\015\072\u041f\073\061\074\162" +
    "\075\134\104\102\115\075\116\144\122\066\136\025\151" +
    "\163\153\113\154\006\155\024\157\127\161\105\163\042" +
    "\165\160\166\055\210\173\211\014\214\034\221\076\222" +
    "\052\225\021\227\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\104\003" +
    "\167\004\164\057\161\060\047\063\124\066\015\072\u039b" +
    "\073\061\074\162\075\134\104\102\107\u0424\110\u039c\115" +
    "\075\116\144\122\066\136\025\151\163\153\113\154\006" +
    "\155\024\157\127\161\105\163\042\165\160\166\055\210" +
    "\173\211\014\214\034\221\076\222\052\225\021\227\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\003\167" +
    "\004\164\057\u0428\060\047\063\124\066\015\072\u0146\073" +
    "\061\074\162\075\134\104\102\115\075\116\144\122\066" +
    "\136\u0427\151\163\153\113\154\006\155\024\157\127\161" +
    "\105\163\042\165\160\166\055\210\173\211\014\214\034" +
    "\217\u042a\221\076\222\052\225\021\227\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\u01ee\004\164\060\047\073\061\074\u01e7\075\134\104" +
    "\102\116\144\122\u01ea\136\u0430\151\u042f\154\006\155\024" +
    "\157\127\163\042\166\055\221\u01e8\222\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\003\167\004\164\057\161\060\047\063\124\066\015\072" +
    "\u0432\073\061\074\162\075\134\104\102\115\075\116\144" +
    "\122\066\136\025\151\163\153\113\154\006\155\024\157" +
    "\127\161\105\163\042\165\160\166\055\210\173\211\014" +
    "\214\034\221\076\222\052\225\021\227\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0436\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\003\167\004" +
    "\164\044\u0438\045\u0148\057\u0149\060\047\063\124\066\015" +
    "\072\u0146\073\061\074\162\075\134\104\102\115\075\116" +
    "\144\122\066\136\u0147\151\163\153\113\154\006\155\024" +
    "\157\127\161\105\163\042\165\160\166\055\210\173\211" +
    "\014\214\034\221\076\222\052\225\021\227\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;

		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}

	public Expression createDispatch(Expression dispatcher, Expression property) {

		if (property.getKind() == ASTNodeKinds.METHOD_INVOCATION) {
			PHPCallExpression callExpression = (PHPCallExpression) property;
			dispatcher = new PHPCallExpression(dispatcher.sourceStart(), callExpression.sourceEnd(), dispatcher, callExpression.getCallName(), callExpression.getArgs());
		} else {
			dispatcher = new FieldAccess(dispatcher.sourceStart(), property.sourceEnd(), dispatcher, property);
		}

		return dispatcher;
	}

	protected Expression createDispatch(Expression dispatcher, ObjectDimList dimList) {
		return resolveDimList(this.createDispatch(dispatcher, dimList.variable), dimList.list);
	}

	protected Expression resolveDimList(Expression variable, DimList list) {
		if (list == null) {
			return variable;
		}
		for (DimList.Element el : list) {
			if (variable.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
				variable = new ArrayVariableReference(variable.start(), el.right, ((SimpleReference) variable).getName(), el.index, el.type);
			} else {
				variable = new ReflectionArrayVariableReference(variable.start(), el.right, variable, el.index, el.type);
			}
		}
		return variable;
	}

	protected Expression detectScalar(Expression expr) {
		if (expr instanceof FullyQualifiedReference) {
			FullyQualifiedReference name = (FullyQualifiedReference) expr;
			if (name.getNamespace() == null) {
				return new Scalar(name.start(), name.end(), name.getName(), Scalar.TYPE_STRING);
			}
		}
		return expr;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CompilerAstParser$actions {
  private final CompilerAstParser parser;

  /** Constructor */
  CUP$CompilerAstParser$actions(CompilerAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000000(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();

	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment) c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
		if (c instanceof Comment) {
			program.getCommentList().add((Comment) c);
		}
	}

	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerAstParser$parser.done_parsing();
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // namespace_name ::= namespace_name_list 
            {
              FullyQualifiedReference RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ?
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, listright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // namespace_name_list ::= string_st 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // namespace_name_list ::= namespace_name_list T_NS_SEPARATOR string_st 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (statement != null) {
		parser.addStatement(statement);
		if (parser.pendingStatement != null) {
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while (!parser.declarations.isEmpty()) {
		parser.addStatement(parser.declarations.pop());
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // namespace_statement_list ::= namespace_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	if (!(parser.declarations.peek() instanceof NamespaceDeclaration)) {
		statementList.add(parser.declarations.pop());
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // namespace_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, nameright, nameleft, nameright, name.getFullyQualifiedName(), null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$0",150, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // top_statement ::= T_NAMESPACE namespace_name NT$0 named_namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$1 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, startright, startright, startright, NamespaceDeclaration.GLOBAL, null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$1",151, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // top_statement ::= T_NAMESPACE NT$1 namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // top_statement ::= T_USE T_FUNCTION use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList, UseStatement.T_FUNCTION));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // top_statement ::= T_USE T_CONST use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList, UseStatement.T_CONST));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // top_statement ::= constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock) decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.declarations.push(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // named_namespace_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.setEnd(endright);
	namespaceDeclaration.setBracketed(false);

	parser.currentNamespace = namespaceDeclaration;

	parser.metUnbracketedNSDecl = true;
	if (parser.metBracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // named_namespace_body ::= namespace_body 
            {
              Statement RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // namespace_body ::= T_CURLY_OPEN namespace_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.getBody().setStart(startleft);
	namespaceDeclaration.getBody().setEnd(endright);
	namespaceDeclaration.getBody().getStatements().clear();
	namespaceDeclaration.getBody().acceptStatements(statementList);
	namespaceDeclaration.setEnd(endright);

	parser.metBracketedNSDecl = true;
	if (parser.metUnbracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // namespace_body ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (NamespaceDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT =null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // use_declarations ::= use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // use_declaration ::= namespace_name 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoLabel(labelleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$2 ::= 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$2",152, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= T_CURLY_OPEN NT$2 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = (Block) parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);

	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);

	RESULT = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);
	RESULT = whileStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);
	RESULT = doStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unticked_statement ::= yield_expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int yieldleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int yieldright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		YieldExpression yield = (YieldExpression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	boolean found = false;
	ListIterator<Statement> it = parser.declarations.listIterator(parser.declarations.size());
	while (!found && it.hasPrevious()) {
		Statement prev = it.previous();
		found = (prev instanceof PHPMethodDeclaration) || (prev instanceof LambdaFunctionDeclaration);
	}
	if (parser.declarations.isEmpty() || !found) {
		parser.reportError(new ASTError(yieldleft, yieldright), "syntax error, the yield expression can only be used inside a function");
		parser.pendingStatement = yield;
	}

	RESULT = new ExpressionStatement(yieldleft, endright, yield);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GlobalStatement(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticStatement(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(startleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(exprleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = new ExpressionStatement(startleft, endright, functionInvocation);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	RESULT = new ExpressionStatement(startleft, endright, functionInvocation);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, expr, var, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_key foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, expr, key, var, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new DeclareStatement(startleft, statementright, lists[0], lists[1], statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE catches_list finally_clause 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int finallyClauseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int finallyClauseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FinallyClause finallyClause = (FinallyClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TryStatement s = new TryStatement(startleft, finallyClause != null ? finallyClauseright : catchesListright, new Block(tryBlockStartleft, tryBlockEndright, tryList), catchesList, finallyClause);
	if (finallyClause == null && catchesList.size() == 0) {
		parser.reportError(new ASTError(tryBlockEndleft, tryBlockEndright), "syntax error, catch or finally clause expected");
		parser.pendingStatement = s;
	}

	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoStatement(startleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // catches_list ::= non_empty_catches_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // catches_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // non_empty_catches_list ::= catch_clause 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",94, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // non_empty_catches_list ::= non_empty_catches_list catch_clause 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",94, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // catch_clause ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	RESULT = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catch_clause",95, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // finally_clause ::= non_empty_finally_clause 
            {
              FinallyClause RESULT =null;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FinallyClause clause = (FinallyClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = clause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",136, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // finally_clause ::= 
            {
              FinallyClause RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",136, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // non_empty_finally_clause ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FinallyClause RESULT =null;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object finally_word = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, finallyList);
	FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, finallyBlock);
	RESULT = finallyClause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_finally_clause",137, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$3 ::= 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), start);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$3",153, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$4 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$4",154, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$3 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$4 function_body 
            {
              PHPMethodDeclaration RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (PHPMethodDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$5 ::= 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration;
	if (modifier.modifier == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) {
		classDeclaration = new TraitDeclaration(modifierleft, classNameright,
			classNameleft, classNameright, modifier.modifier, className, null, null,
			new Block(classNameright, classNameright, null), modifier.doc);
	}else{
		classDeclaration = new ClassDeclaration(modifierleft, classNameright,
			classNameleft, classNameright, modifier.modifier, className, null, null,
			new Block(classNameright, classNameright, null), modifier.doc);
	}
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$5",155, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$6 ::= 
            {
              Statement RESULT =(Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.peek();
	if (superClass != null) {
		if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) {
			parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd()), String.format("A trait (%s) cannot extend a class. Traits can only be composed from other traits with the 'use' keyword", classDeclaration.getName()));
		} else {
			classDeclaration.setSuperClass(superClass);
		}
	}
	if (interfaces != null) {
		if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait && interfaces.size() > 0) {
		SimpleReference node = (SimpleReference) interfaces.get(0);
			parser.reportError(new ASTError(node.sourceStart(), node.sourceEnd()), String.format("Cannot use '%s' as interface on '%s' since it is a Trait", node.getName(), classDeclaration.getName()));
		} else {
			classDeclaration.setInterfaceList(interfaces);
		}
	}
	classDeclaration.setEnd(interfacesright);
	classDeclaration.getBody().setStart(interfacesright);
	classDeclaration.getBody().setEnd(interfacesright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$6",156, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unticked_class_declaration_statement ::= class_entry_type T_STRING NT$5 extends_from errorOrNot implements_list NT$6 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}
	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$7 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft, interfacesright, classNameleft, classNameright, className, interfaces, new Block(interfacesright, interfacesright, null), start);
	interfaceDeclaration.setRecovered(true);
	parser.declarations.push(interfaceDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$7",157, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list NT$7 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration) parser.declarations.pop();
	interfaceDeclaration.setRecovered(false);
	interfaceDeclaration.setEnd(blockEndright);
	interfaceDeclaration.getBody().setStart(blockStartleft);
	interfaceDeclaration.getBody().setEnd(blockEndright);
	RESULT = interfaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // errorOrNot ::= error 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // errorOrNot ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // class_entry_type ::= T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // class_entry_type ::= T_FINAL T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // class_entry_type ::= T_TRAIT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(org.eclipse.php.core.compiler.IPHPModifiers.AccTrait, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // interface_list ::= error 
            {
              List RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // foreach_expr ::= variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_expr",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // foreach_expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_expr",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // foreach_key ::= foreach_variable T_DOUBLE_ARROW 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_key",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // foreach_value ::= foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_value",140, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // foreach_value ::= list_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ListVariable var = (ListVariable)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_value",140, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReferenceExpression (startleft, varright, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // list_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              ListVariable RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ListVariable(startleft, endright, varList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("list_variable",138, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // declare_list ::= string_st T_EQUAL static_operation 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(key);
	listValues.add(expr);

	RESULT = new List[] { listKeys, listValues };

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_operation 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	lists[0].add(key);
	lists[1].add(expr);
	RESULT = lists;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_list",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (parameter != null) {
		list.add(parameter);
	}

	if (list.size() >= 2) {
		FormalParameter previousFormalParameter = (FormalParameter) list.get(list.size() - 2);
		if (previousFormalParameter.isVariadic()) {
			parser.reportError(new ASTError(previousFormalParameter.start(), previousFormalParameter.end()), "Only the last parameter can be variadic");
		}
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // parameter ::= optional_class_type T_ELLIPSIS T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v, null, false, true);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // parameter ::= optional_class_type T_REFERENCE T_ELLIPSIS T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v, null, false, true);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_operation 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, exprright, classType, v, expr);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_operation 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, exprright, classType, v, expr);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // parameter ::= error 
            {
              FormalParameter RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // optional_class_type ::= fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(arrayleft, arrayright, "array", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // optional_class_type ::= T_CALLABLE 
            {
              TypeReference RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object callable = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(callableleft, callableright, "callable", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // non_empty_function_call_parameter_list ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(var);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // non_empty_function_call_parameter_list ::= T_ELLIPSIS variable 
            {
              PHPCallArgumentsList RESULT =null;
		int ellleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(new PrefixExpression(ellleft, varright, var, PrefixExpression.OP_UNPACK));
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // non_empty_function_call_parameter_list ::= T_ELLIPSIS expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int ellleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(new PrefixExpression(ellleft, varright, var, PrefixExpression.OP_UNPACK));
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	if (paramsList.getChilds().size() > 1) {
		ASTNode previousNode = paramsList.getChilds().get((paramsList.getChilds().size() - 2));
		if (!(var instanceof PrefixExpression) && previousNode instanceof PrefixExpression) {
			PrefixExpression pExpression = (PrefixExpression) previousNode;
			if (pExpression.getOperatorType() == PrefixExpression.OP_UNPACK) {
				parser.reportError(new ASTError(var.start(), var.end()), "Cannot use positional argument after argument unpacking");
			}
		}
	}
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	if (paramsList.getChilds().size() > 1) {
		ASTNode previousNode = paramsList.getChilds().get((paramsList.getChilds().size() - 2));
		if (!(var instanceof PrefixExpression) && previousNode instanceof PrefixExpression) {
			PrefixExpression pExpression = (PrefixExpression) previousNode;
			if (pExpression.getOperatorType() == PrefixExpression.OP_UNPACK) {
				parser.reportError(new ASTError(var.start(), var.end()), "Cannot use positional argument after argument unpacking");
			}
		}
	}
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_ELLIPSIS variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ellleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(new PrefixExpression(ellleft, varright, var, PrefixExpression.OP_UNPACK));
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_ELLIPSIS expr_without_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ellleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(new PrefixExpression(ellleft, varright, var, PrefixExpression.OP_UNPACK));
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var_ref = new ReferenceExpression(startleft, varright, var);
	paramsList.addNode(var_ref);
	if (paramsList.getChilds().size() > 1) {
		ASTNode previousNode = paramsList.getChilds().get((paramsList.getChilds().size() - 2));
		if (!(var instanceof PrefixExpression) && previousNode instanceof PrefixExpression) {
			PrefixExpression pExpression = (PrefixExpression) previousNode;
			if (pExpression.getOperatorType() == PrefixExpression.OP_UNPACK) {
				parser.reportError(new ASTError(var_ref.start(), var_ref.end()), "Cannot use positional argument after argument unpacking");
			}
		}
	}
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var_list",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // global_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // global_var ::= T_DOLLAR r_variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("global_var",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_operation 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // static_var_list ::= T_VARIABLE T_EQUAL static_operation 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	Assignment assignment = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (!(parser.declarations.peek() instanceof TypeDeclaration)) {
		parser.declarations.pop();
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // class_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference) decl[0];
		Expression initializer = (Expression) decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // class_statement ::= constant_declaration T_SEMICOLON 
            {
              Object RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		PHPDocBlock docBlock = null;
		if (decl.length == 3) {
			docBlock = (PHPDocBlock) decl[2];
		}
		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ConstantDeclaration(constant, initializer, decListleft, end, docBlock));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // NT$8 ::= 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$8",158, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$9",159, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st NT$8 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$9 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	if (body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	TypeDeclaration type = (TypeDeclaration) parser.declarations.peek();
	methodDeclaration.setDeclaringTypeName(type.getName());
	if (body instanceof EmptyStatement) { /* method without body part */
		if (type instanceof ClassDeclaration) {
			ClassDeclaration classDeclaration = (ClassDeclaration) type;
			if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) { /* handle traits */
				if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
				}
			} else { /* handle classes */
				if ((classDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
					if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
					}
				} else {
					if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
					} else {
						String message = Messages.getString("AbstractMethodInAbstractClass", methodDeclaration.getName(), classDeclaration.getName());
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodInAbstractClass), message);

						message = Messages.getString("AbstractMethodsInConcreteClass", classDeclaration.getName());
						parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodsInConcreteClass), message);
					}
				}
			}
		}
	} else if (body == null) { /* method with body part */
		if (type instanceof ClassDeclaration) { /* handle classes and traits */
			if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
				parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
			}
		} else if (type instanceof InterfaceDeclaration) {
			parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
		}
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // class_statement ::= error 
            {
              Object RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // class_statement ::= trait_use_statement 
            {
              Object RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft, adaptationsright, list, adaptations);
	parser.addDeclarationStatement(traitUseStatement);
	parser.declarations.push(traitUseStatement);
	RESULT = traitUseStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_use_statement",121, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TypeReference> traitList = new LinkedList<TypeReference>();
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",122, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",122, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // trait_adaptation_list ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",125, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT =null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",125, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft, endright, precedence);
	RESULT = traitPrecedenceStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft, endright, alias);
	RESULT = traitAliasStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT =null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft, trListright, methodReference, trList);
	RESULT = traitPrecedence;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_precedence",127, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TypeReference> trList = new LinkedList<TypeReference>();
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",128, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",128, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",129, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",129, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, className, functionName);
	RESULT = methodReference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference_fully_qualified",130, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // trait_alias ::= trait_method_reference T_AS trait_modifiers T_STRING 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference, modifierValue,
		new SimpleReference(functionNameleft, functionNameright, functionName));
	RESULT = alias;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",131, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // trait_alias ::= trait_method_reference T_AS non_empty_trait_modifiers 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference, modifierValue, null);
	RESULT = alias;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",131, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // non_empty_trait_modifiers ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // non_empty_trait_modifiers ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // non_empty_trait_modifiers ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // trait_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // trait_modifiers ::= non_empty_trait_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = modifier;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	// return an EmptyStatement object to make distinction between an abstract method and a method with an empty body
	RESULT = new EmptyStatement(endleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // method_body ::= 
            {
              Statement RESULT =null;
		
	parser.reportError();
	RESULT = new ASTError(0, 0);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // variable_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendPropertyModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // variable_modifiers ::= T_VAR 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock var = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // method_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // method_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendMethodModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // member_modifier ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // member_modifier ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // member_modifier ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // member_modifier ::= T_STATIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // member_modifier ::= T_ABSTRACT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // member_modifier ::= T_FINAL 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_operation 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_operation 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // chain_instance_call ::= T_OPEN_PARENTHESE new_expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);

	if (memberProperty.getClass().equals(SimpleReference.class)) {
		RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty, paramsList);
	} else {
		RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty, paramsList);
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // chain_instance_call ::= chain_instance_call T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	if (memberProperty.list != null) {
		Expression dispatch = parser.createDispatch(ch, memberProperty);
		if (dispatch.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, null, (SimpleReference) dispatch, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, null, dispatch, paramsList);
		}
	} else {
		if (memberProperty.variable.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty.variable, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty.variable, paramsList);
		}
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("chain_instance_call",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // constant_declaration ::= constant_declaration T_COMMA T_STRING T_EQUAL static_operation 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // constant_declaration ::= T_CONST T_STRING T_EQUAL static_operation 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		PHPDocBlock value = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ConstantReference constId = new ConstantReference(constNameleft, constNameright, constName);
	list.add(new ASTNode[] {constId, expr, value});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_declaration",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",135, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // expr_without_variable ::= list_variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		ListVariable vars = (ListVariable)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varsleft, exprright, vars, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	Assignment assignment = new Assignment(varleft, ctorright, var, Assignment.OP_REF_EQUAL, classInstanceCreation);
	RESULT = assignment;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CloneExpression(startleft, exprright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // expr_without_variable ::= variable T_POW_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_POW_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_AND_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_OR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MUL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // expr_without_variable ::= expr T_POW expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_POW, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_DIV, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MOD, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_PLUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_MINUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_NOT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_TILDA);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000001(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr, className);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // expr_without_variable ::= T_OPEN_PARENTHESE yield_expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int yieldleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int yieldright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		YieldExpression yield = (YieldExpression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	boolean found = false;
	ListIterator<Statement> it = parser.declarations.listIterator(parser.declarations.size());
	while (!found && it.hasPrevious()) {
		Statement prev = it.previous();
		found = (prev instanceof PHPMethodDeclaration) || (prev instanceof LambdaFunctionDeclaration);
	}
	if (parser.declarations.isEmpty() || !found) {
		parser.reportError(new ASTError(yieldleft, yieldright), "syntax error, the yield expression can only be used inside a function");
		parser.pendingStatement = yield;
	}
	RESULT = yield;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // expr_without_variable ::= chain_instance_call 
            {
              Expression RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression call = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = call;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // expr_without_variable ::= new_expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ifTrue, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, null, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_INT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_REAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_OBJECT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_BOOL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_UNSET);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // expr_without_variable ::= array_creation 
            {
              Expression RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ArrayCreation creation = (ArrayCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = creation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // NT$10 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	LambdaFunctionDeclaration functionDeclaration = new LambdaFunctionDeclaration(sleft, varsListright, paramList, varsList,
		new Block(varsListright, varsListright, null), isReference.booleanValue());
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$10",160, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars NT$10 lambda_function_body 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		LambdaFunctionDeclaration body = (LambdaFunctionDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // NT$11 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;


	LambdaFunctionDeclaration functionDeclaration = new LambdaFunctionDeclaration(sleft, varsListright, paramList, varsList,
		new Block(varsListright, varsListright, null), isReference.booleanValue(), true);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$11",161, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars NT$11 lambda_function_body 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		LambdaFunctionDeclaration body = (LambdaFunctionDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // lambda_function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              LambdaFunctionDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	LambdaFunctionDeclaration functionDeclaration = (LambdaFunctionDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lambda_function_body",119, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // lambda_function_body ::= error 
            {
              LambdaFunctionDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (LambdaFunctionDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lambda_function_body",119, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // array_creation ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              ArrayCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_creation",143, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // array_creation ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              ArrayCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_creation",143, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // array_creation_dereference ::= array_creation T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ArrayCreation creation = (ArrayCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(creationleft, endright, creation, ex, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_creation_dereference",144, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // array_creation_dereference ::= array_creation_dereference T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ReflectionArrayVariableReference creation = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(creationleft, endright, creation, ex, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_creation_dereference",144, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // lexical_vars ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // lexical_var_list ::= lexical_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // lexical_var_list ::= lexical_var_list T_COMMA T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // lexical_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new VariableReference(varleft, varright, var));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // lexical_var_list ::= T_REFERENCE T_VARIABLE 
            {
              List RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new ReferenceExpression (refleft, varright, new VariableReference(varleft, varright, var)));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // function_call ::= namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // function_call ::= T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int namespaceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int namespaceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object namespace = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	if (functionName.getNamespace() != null) {
		functionName.getNamespace().setLocal(true);
	}
	RESULT = new PHPCallExpression(namespaceleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // function_call ::= T_NS_SEPARATOR namespace_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	NamespaceReference namespace = functionName.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		functionName.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	functionName.setStart(sleft);
	RESULT = new PHPCallExpression(sleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name;
	if (functionName instanceof SimpleReference) {
		name = (SimpleReference) functionName;
	}else{
		name = new SimpleReference(functionNameleft, functionNameleft, "");
	}
	RESULT = new StaticMethodInvocation(classNameleft, endright, className, functionName, name, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList(finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariableReference(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, finalVar);
	}
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, finalVar, parameters);
	RESULT = functionInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList reflectionName = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	Expression finalVar = reflectionName.variable;
	finalVar = parser.resolveDimList(finalVar, reflectionName.list);
	for (int i = 0; i<reflectionName.refCount; i++) {
		finalVar = new ReflectionVariableReference(reflectionNameleft + reflectionName.refCount - i - 1, reflectionNameright, finalVar);
	}
	RESULT = new ReflectionStaticMethodInvocation(classNameleft, endright, className, finalVar, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	SimpleReference name;
	if (functionName instanceof SimpleReference) {
		name = (SimpleReference) functionName;
	}else{
		name = new SimpleReference(functionNameleft, functionNameleft, "");
	}
	RESULT = new StaticMethodInvocation(classNameleft, endright, className, functionName, name, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // function_call ::= function_call T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		RESULT = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		RESULT = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // class_name ::= T_STATIC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock s = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FullyQualifiedReference(sleft, sright, "static", null);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // class_name ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // class_name ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // fully_qualified_class_name ::= namespace_name 
            {
              TypeReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // class_name_reference ::= class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // class_name_reference ::= dynamic_class_name_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // dynamic_class_name_reference ::= dynamic_class_name_variable_property 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // dynamic_class_name_variable_property ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // dynamic_class_name_variable_property ::= dynamic_class_name_variable_property T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // backticks_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // backticks_expr ::= encaps_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // string_dereference ::= T_CONSTANT_ENCAPSED_STRING T_OPEN_RECT expr T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(scalarleft, endright, new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING), index, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_dereference",147, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // string_dereference ::= string_dereference T_OPEN_RECT expr T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ReflectionArrayVariableReference scalar = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(scalarleft, endright, scalar, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_dereference",147, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // common_scalar ::= T_LNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // common_scalar ::= T_DNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // common_scalar ::= T_BNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_BIN);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // common_scalar ::= T_LINE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // common_scalar ::= T_FILE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // common_scalar ::= T_DIR 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // common_scalar ::= T_CLASS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // common_scalar ::= T_TRAIT_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__TRAIT__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // common_scalar ::= T_METHOD_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // common_scalar ::= T_FUNC_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // common_scalar ::= T_NS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // common_scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // common_scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(labelleft, eright, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("common_scalar",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // static_operation ::= static_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // static_operation ::= static_operation T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(expr1left, endright, expr1, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // static_operation ::= static_operation T_IS_IDENTICAL static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // static_operation ::= static_operation T_IS_NOT_IDENTICAL static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // static_operation ::= static_operation T_IS_EQUAL static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // static_operation ::= static_operation T_IS_NOT_EQUAL static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // static_operation ::= static_operation T_RGREATER static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // static_operation ::= static_operation T_IS_SMALLER_OR_EQUAL static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // static_operation ::= static_operation T_LGREATER static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // static_operation ::= static_operation T_IS_GREATER_OR_EQUAL static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // static_operation ::= static_operation T_BOOLEAN_OR static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // static_operation ::= static_operation T_BOOLEAN_AND static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // static_operation ::= static_operation T_LOGICAL_OR static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // static_operation ::= static_operation T_LOGICAL_AND static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // static_operation ::= static_operation T_LOGICAL_XOR static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // static_operation ::= static_operation T_OR static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // static_operation ::= static_operation T_REFERENCE static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // static_operation ::= static_operation T_KOVA static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // static_operation ::= static_operation T_NEKUDA static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // static_operation ::= static_operation T_PLUS static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // static_operation ::= static_operation T_MINUS static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // static_operation ::= static_operation T_TIMES static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MUL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // static_operation ::= static_operation T_DIV static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_DIV, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // static_operation ::= static_operation T_PRECENT static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MOD, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // static_operation ::= static_operation T_SL static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // static_operation ::= static_operation T_SR static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // static_operation ::= static_operation T_POW static_operation 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_POW, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // static_operation ::= T_PLUS static_operation 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_PLUS);
	RESULT = op;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // static_operation ::= T_MINUS static_operation 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, expr, UnaryOperation.OP_MINUS);
	RESULT = op;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // static_operation ::= T_TILDA static_operation 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_TILDA);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // static_operation ::= T_NOT static_operation 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_NOT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // static_operation ::= static_operation T_QUESTION_MARK static_operation T_NEKUDOTAIM static_operation 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ifTrue, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // static_operation ::= static_operation T_QUESTION_MARK T_NEKUDOTAIM static_operation 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, null, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // static_operation ::= T_OPEN_PARENTHESE static_operation T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_operation",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // static_array_creation ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              ArrayCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_creation",145, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // static_array_creation ::= T_OPEN_RECT static_array_pair_list T_CLOSE_RECT 
            {
              ArrayCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_creation",145, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // static_array_creation_dereference ::= static_array_creation T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ArrayCreation creation = (ArrayCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(creationleft, endright, creation, ex, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_creation_dereference",146, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // static_array_creation_dereference ::= static_array_creation_dereference T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int creationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int creationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ReflectionArrayVariableReference creation = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(creationleft, endright, creation, ex, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_creation_dereference",146, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // static_string_dereference ::= T_CONSTANT_ENCAPSED_STRING T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(scalarleft, endright, new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING), index, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_string_dereference",148, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // static_string_dereference ::= static_string_dereference T_OPEN_RECT static_scalar T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ReflectionArrayVariableReference scalar = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(scalarleft, endright, scalar, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_string_dereference",148, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // constant_dereference ::= class_name T_OPEN_RECT expr T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression constant = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(constantleft, endright, detectScalar(constant), index, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_dereference",149, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // constant_dereference ::= static_class_constant T_OPEN_RECT expr T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		StaticConstantAccess constant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(constantleft, endright, constant, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_dereference",149, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // constant_dereference ::= constant_dereference T_OPEN_RECT expr T_CLOSE_RECT 
            {
              ReflectionArrayVariableReference RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ReflectionArrayVariableReference constant = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(constantleft, endright, constant, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant_dereference",149, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // static_scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // static_scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // static_scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // static_scalar ::= static_array_creation 
            {
              Expression RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ArrayCreation arr = (ArrayCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = arr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // static_scalar ::= static_array_creation_dereference 
            {
              Expression RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ReflectionArrayVariableReference arr = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = arr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // static_scalar ::= static_string_dereference 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ReflectionArrayVariableReference ref = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_scalar",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, vname);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // static_class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CLASS 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock varName = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference vname = new ConstantReference(varNameleft, varNameright, "class");
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, vname);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_class_constant",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // scalar ::= namespace_name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		RESULT = new Scalar(nameleft, nameright, name.getName(), Scalar.TYPE_STRING);
	} else {
		RESULT = name;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // scalar ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() != null) {
		name.getNamespace().setLocal(true);
	}
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // scalar ::= T_NS_SEPARATOR namespace_name 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(startleft, endright, list, Quote.QT_QUOTE);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(startleft, endright, list, Quote.QT_SINGLE);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // scalar ::= string_dereference 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ReflectionArrayVariableReference ref = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // scalar ::= constant_dereference 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ReflectionArrayVariableReference ref = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_operation T_DOUBLE_ARROW static_operation 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, exprright, key, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_operation 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // non_empty_static_array_pair_list ::= static_operation T_DOUBLE_ARROW static_operation 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, exprright, key, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // non_empty_static_array_pair_list ::= static_operation 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // r_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("r_variable",103, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // w_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("w_variable",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // rw_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("rw_variable",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // variable ::= base_variable_with_function_calls 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // variable ::= variable T_OBJECT_OPERATOR object_dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.createDispatch(ch, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // variable ::= variable T_OBJECT_OPERATOR variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);

	if (memberProperty.getClass().equals(SimpleReference.class)) {
		RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty, paramsList);
	} else {
		RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty, paramsList);
	}

	RESULT = parser.resolveDimList(RESULT, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // variable ::= variable T_OBJECT_OPERATOR object_dim_list T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE dim_list 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		ObjectDimList memberProperty = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	if (memberProperty.list != null) {
		Expression dispatch = parser.createDispatch(ch, memberProperty);
		if (dispatch.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, null, (SimpleReference) dispatch, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, null, dispatch, paramsList);
		}
	} else {
		if (memberProperty.variable.getClass().equals(SimpleReference.class)) {
			RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty.variable, paramsList);
		} else {
			RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty.variable, paramsList);
		}
	}
	RESULT = parser.resolveDimList(RESULT, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // variable_without_objects ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // field_access_dim_list_indirect_reference ::= field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // field_access_dim_list_indirect_reference ::= simple_indirect_reference field_access_dim_list 
            {
              ObjectDimList RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.refCount = ref_count;
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list_indirect_reference",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // field_access_dim_list ::= field_access_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_ARRAY, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // field_access_dim_list ::= field_access_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // field_access_dim_list ::= compound_variable 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ObjectDimList(var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("field_access_dim_list",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression finalVar = var.variable;
	int end = var.variable.end();
	if (var.refCount > 0) {
		finalVar = parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariableReference(varleft + var.refCount - i - 1, varright, finalVar);
		}
		var.list = null;
		end = varright;
	}
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, end, className, finalVar);
	RESULT = parser.resolveDimList(staticFieldAccess, var.list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM field_access_dim_list_indirect_reference 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression finalVar = var.variable;
	int end = var.variable.end();
	if (var.refCount > 0) {
		finalVar = parser.resolveDimList(finalVar, var.list);
		for (int i = 0; i<var.refCount; i++) {
			finalVar = new ReflectionVariableReference(varleft + var.refCount - i - 1, varright, finalVar);
		}
		var.list = null;
		end = varright;
	}
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, end, className, finalVar);
	RESULT = parser.resolveDimList(staticFieldAccess, var.list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // variable_class_name ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_class_name",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // base_variable_with_function_calls ::= base_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // base_variable_with_function_calls ::= function_call 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // base_variable_with_function_calls ::= array_creation_dereference 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ReflectionArrayVariableReference var = (ReflectionArrayVariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // base_variable ::= reference_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // base_variable ::= simple_indirect_reference reference_variable 
            {
              Expression RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should
	// accomulate the dolars into reflection variables
	Expression finalVar = var;
	for (int i = 0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariableReference(ref_countright - i - 1, varright, finalVar);
	}
	RESULT = finalVar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // base_variable ::= static_member 
            {
              Expression RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression staticFieldAccess = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("base_variable",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var;
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression var;
	if (varName.getKind() == ExpressionConstants.E_IDENTIFIER) { // VariableReference - $a
		var = new ArrayVariableReference(varNameleft, endright, ((SimpleReference) varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		var = new ReflectionArrayVariableReference(varNameleft, endright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // reference_variable ::= compound_variable 
            {
              Expression RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression comp_var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reference_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // compound_variable ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("compound_variable",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // dim_offset ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_offset",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // dim_list ::= 
            {
              DimList RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_list",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // dim_list ::= dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              DimList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		DimList list = (DimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (list == null) {
		list = new DimList();
	}
	list.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dim_list",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		ObjectDimList var = (ObjectDimList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	var.add(index, ArrayVariableReference.VARIABLE_HASHTABLE, endright);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // object_dim_list ::= variable_name 
            {
              ObjectDimList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = new ObjectDimList(var); 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("object_dim_list",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // variable_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_name",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = Integer.valueOf(1);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = Integer.valueOf(1 + ref.intValue());

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // assignment_list_element ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // assignment_list_element ::= list_variable 
            {
              Expression RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ListVariable vars = (ListVariable)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = vars;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // assignment_list_element ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // encaps_list ::= encaps_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // encaps_var ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		VariableReference varName = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference var = new ArrayVariableReference(varNameleft, endright, varName.getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference property = new VariableReference(stringleft, stringright, string);
	Expression dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, expr);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new ArrayVariableReference(varNameleft, cright, varName, index, ArrayVariableReference.VARIABLE_ARRAY));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new Scalar(varNameleft, varNameright, varName, Scalar.TYPE_STRING));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft, numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		VariableReference var = (VariableReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // class_constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM T_CLASS 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPDocBlock varName = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, "class");
	RESULT = new StaticConstantAccess(classNameleft, varNameright, className, name);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // class_constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ConstantReference name = new ConstantReference(varNameleft, varNameright, varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, className, name);
	RESULT = constant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_constant",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // tracked_variable ::= T_VARIABLE 
            {
              VariableReference RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("tracked_variable",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // yield_arg ::= variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_arg",141, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // yield_arg ::= expr_without_variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_arg",141, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // yield_expr ::= T_YIELD 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",142, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // yield_expr ::= T_YIELD yield_arg 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",142, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // yield_expr ::= T_YIELD yield_arg T_DOUBLE_ARROW yield_arg 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, key, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",142, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CompilerAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CompilerAstParser$do_action_part00000000(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CompilerAstParser$do_action_part00000001(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
