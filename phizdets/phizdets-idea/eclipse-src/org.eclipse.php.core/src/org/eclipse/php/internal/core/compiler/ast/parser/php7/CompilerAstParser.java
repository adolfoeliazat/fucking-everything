
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser.php7;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php7.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CompilerAstParser extends AbstractASTParser {

 public final Class getSymbolContainer() {
    return CompilerParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CompilerAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CompilerAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0220\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\005\000\002\021\004\000" +
    "\002\021\002\000\002\123\003\000\002\123\005\000\002" +
    "\123\004\000\002\020\004\000\002\020\002\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\006" +
    "\000\002\220\002\000\002\022\006\000\002\221\002\000" +
    "\002\022\005\000\002\022\005\000\002\022\006\000\002" +
    "\022\005\000\002\022\006\000\002\022\005\000\002\134" +
    "\003\000\002\134\003\000\002\135\005\000\002\135\003" +
    "\000\002\017\003\000\002\017\003\000\002\013\006\000" +
    "\002\012\006\000\002\014\005\000\002\014\003\000\002" +
    "\015\003\000\002\015\004\000\002\016\005\000\002\016" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\004" +
    "\000\002\010\006\000\002\011\004\000\002\024\004\000" +
    "\002\024\002\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\006\000\002\023\003\000\002\023" +
    "\004\000\002\023\003\000\002\023\003\000\002\222\002" +
    "\000\002\026\006\000\002\026\011\000\002\026\014\000" +
    "\002\026\007\000\002\026\011\000\002\026\013\000\002" +
    "\026\007\000\002\026\004\000\002\026\005\000\002\026" +
    "\004\000\002\026\005\000\002\026\004\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\004\000\002" +
    "\026\005\000\002\026\007\000\002\026\011\000\002\026" +
    "\012\000\002\026\007\000\002\026\003\000\002\026\010" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\147\003\000\002\147\002\000\002\150\003\000\002" +
    "\150\004\000\002\151\012\000\002\212\003\000\002\212" +
    "\002\000\002\213\006\000\002\027\003\000\002\027\005" +
    "\000\002\030\003\000\002\031\003\000\002\031\005\000" +
    "\002\140\003\000\002\141\003\000\002\066\002\000\002" +
    "\066\003\000\002\223\002\000\002\224\002\000\002\225" +
    "\002\000\002\152\015\000\002\170\005\000\002\170\003" +
    "\000\002\226\002\000\002\227\002\000\002\153\014\000" +
    "\002\230\002\000\002\153\011\000\002\172\003\000\002" +
    "\172\002\000\002\167\003\000\002\167\003\000\002\154" +
    "\003\000\002\154\004\000\002\154\004\000\002\154\003" +
    "\000\002\155\002\000\002\155\004\000\002\155\004\000" +
    "\002\120\003\000\002\121\002\000\002\121\004\000\002" +
    "\156\002\000\002\156\004\000\002\157\003\000\002\157" +
    "\005\000\002\157\005\000\002\157\003\000\002\215\003" +
    "\000\002\215\003\000\002\032\004\000\002\216\003\000" +
    "\002\216\003\000\002\033\003\000\002\033\004\000\002" +
    "\214\006\000\002\034\003\000\002\034\006\000\002\035" +
    "\003\000\002\035\006\000\002\036\003\000\002\036\006" +
    "\000\002\037\005\000\002\037\007\000\002\040\005\000" +
    "\002\040\006\000\002\040\006\000\002\040\007\000\002" +
    "\041\002\000\002\041\007\000\002\041\006\000\002\042" +
    "\003\000\002\042\003\000\002\043\003\000\002\043\006" +
    "\000\002\044\002\000\002\044\010\000\002\045\002\000" +
    "\002\045\011\000\002\046\002\000\002\046\004\000\002" +
    "\047\002\000\002\047\005\000\002\050\003\000\002\050" +
    "\002\000\002\054\003\000\002\054\005\000\002\054\004" +
    "\000\002\055\004\000\002\055\005\000\002\055\005\000" +
    "\002\055\006\000\002\055\006\000\002\055\007\000\002" +
    "\055\003\000\002\160\002\000\002\160\003\000\002\160" +
    "\003\000\002\160\003\000\002\056\003\000\002\056\002" +
    "\000\002\057\003\000\002\057\005\000\002\072\003\000" +
    "\002\072\004\000\002\124\003\000\002\124\003\000\002" +
    "\124\003\000\002\125\002\000\002\125\004\000\002\060" +
    "\005\000\002\060\003\000\002\061\003\000\002\061\004" +
    "\000\002\061\006\000\002\062\003\000\002\062\005\000" +
    "\002\063\003\000\002\063\005\000\002\064\004\000\002" +
    "\064\002\000\002\065\005\000\002\065\005\000\002\231" +
    "\002\000\002\232\002\000\002\233\002\000\002\065\016" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\173\005\000\002\174\003\000\002\174\005\000\002" +
    "\175\003\000\002\175\005\000\002\176\002\000\002\176" +
    "\003\000\002\177\003\000\002\177\004\000\002\200\004" +
    "\000\002\200\004\000\002\201\005\000\002\202\003\000" +
    "\002\202\005\000\002\203\003\000\002\203\003\000\002" +
    "\204\005\000\002\205\006\000\002\205\005\000\002\207" +
    "\003\000\002\207\003\000\002\207\003\000\002\206\002" +
    "\000\002\206\003\000\002\133\003\000\002\133\005\000" +
    "\002\133\002\000\002\161\003\000\002\161\003\000\002" +
    "\132\002\000\002\132\003\000\002\136\003\000\002\136" +
    "\004\000\002\137\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\137\003\000" +
    "\002\127\005\000\002\127\007\000\002\127\003\000\002" +
    "\127\005\000\002\071\005\000\002\071\003\000\002\130" +
    "\005\000\002\130\003\000\002\131\005\000\002\067\005" +
    "\000\002\067\003\000\002\070\002\000\002\070\003\000" +
    "\002\234\002\000\002\211\011\000\002\210\005\000\002" +
    "\210\006\000\002\073\005\000\002\073\005\000\002\073" +
    "\006\000\002\073\004\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\004\000\002\073\004\000\002\073\004" +
    "\000\002\073\004\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\005\000\002\073\005\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\004\000\002" +
    "\073\004\000\002\073\004\000\002\073\004\000\002\073" +
    "\005\000\002\073\005\000\002\073\005\000\002\073\005" +
    "\000\002\073\005\000\002\073\005\000\002\073\005\000" +
    "\002\073\005\000\002\073\005\000\002\073\005\000\002" +
    "\073\005\000\002\073\003\000\002\073\003\000\002\073" +
    "\007\000\002\073\006\000\002\073\005\000\002\073\003" +
    "\000\002\073\004\000\002\073\004\000\002\073\004\000" +
    "\002\073\004\000\002\073\004\000\002\073\004\000\002" +
    "\073\004\000\002\073\004\000\002\073\004\000\002\073" +
    "\003\000\002\073\005\000\002\073\004\000\002\235\002" +
    "\000\002\073\013\000\002\236\002\000\002\073\014\000" +
    "\002\171\005\000\002\171\003\000\002\051\002\000\002" +
    "\051\006\000\002\052\005\000\002\052\003\000\002\053" +
    "\003\000\002\053\004\000\002\074\006\000\002\074\010" +
    "\000\002\074\010\000\002\074\006\000\002\122\003\000" +
    "\002\122\003\000\002\126\003\000\002\126\005\000\002" +
    "\126\004\000\002\166\003\000\002\166\003\000\002\075" +
    "\002\000\002\075\004\000\002\075\005\000\002\113\002" +
    "\000\002\113\003\000\002\113\003\000\002\076\002\000" +
    "\002\076\005\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\005\000" +
    "\002\077\004\000\002\077\005\000\002\077\005\000\002" +
    "\077\005\000\002\077\003\000\002\077\003\000\002\100" +
    "\002\000\002\100\003\000\002\101\003\000\002\101\003" +
    "\000\002\142\003\000\002\142\003\000\002\142\005\000" +
    "\002\144\003\000\002\144\005\000\002\144\003\000\002" +
    "\145\003\000\002\145\005\000\002\145\003\000\002\146" +
    "\006\000\002\146\005\000\002\146\003\000\002\143\003" +
    "\000\002\143\006\000\002\143\006\000\002\143\006\000" +
    "\002\143\010\000\002\143\003\000\002\162\003\000\002" +
    "\162\005\000\002\162\005\000\002\163\005\000\002\163" +
    "\005\000\002\164\003\000\002\164\006\000\002\164\006" +
    "\000\002\164\005\000\002\164\005\000\002\164\005\000" +
    "\002\102\003\000\002\103\002\000\002\103\003\000\002" +
    "\104\003\000\002\104\005\000\002\104\003\000\002\105" +
    "\003\000\002\105\005\000\002\105\003\000\002\106\005" +
    "\000\002\106\003\000\002\107\003\000\002\107\003\000" +
    "\002\107\002\000\002\110\002\000\002\110\004\000\002" +
    "\111\007\000\002\111\005\000\002\111\005\000\002\111" +
    "\003\000\002\111\010\000\002\111\006\000\002\111\006" +
    "\000\002\111\004\000\002\112\004\000\002\112\004\000" +
    "\002\112\004\000\002\112\003\000\002\112\004\000\002" +
    "\114\005\000\002\114\003\000\002\114\006\000\002\114" +
    "\005\000\002\114\005\000\002\114\005\000\002\114\010" +
    "\000\002\115\003\000\002\115\003\000\002\115\003\000" +
    "\002\116\006\000\002\116\006\000\002\116\004\000\002" +
    "\116\004\000\002\116\006\000\002\116\004\000\002\116" +
    "\004\000\002\165\003\000\002\165\005\000\002\117\003" +
    "\000\002\117\003\000\002\217\003\000\002\217\004\000" +
    "\002\217\006\000\002\217\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03bc\000\002\001\uffb2\000\004\002\u03be\001\002\000" +
    "\254\003\125\004\157\005\171\006\116\007\010\010\066" +
    "\011\036\013\064\015\101\020\140\021\022\022\131\023" +
    "\126\024\047\026\035\030\110\032\170\035\112\037\142" +
    "\043\057\044\130\045\075\046\117\047\147\050\151\051" +
    "\012\052\044\053\042\055\166\057\027\060\011\062\103" +
    "\063\162\064\033\065\061\066\034\067\155\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\107\071\112\105\113\137\114\043\115\073\116\025\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\150\007\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\045\222\065\223" +
    "\017\227\164\232\107\233\122\234\062\235\104\237\127" +
    "\241\124\001\001\000\002\001\ufe46\000\002\001\uff6e\000" +
    "\002\001\ufe49\000\006\013\064\232\107\001\002\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\ufde5\000\002\001\ufe7b\000" +
    "\004\227\u03b3\001\002\000\002\001\ufe6c\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\004\066\u026b\001\002\000" +
    "\076\034\323\126\313\127\332\130\302\147\306\150\u03b1" +
    "\151\303\152\324\153\304\154\315\155\325\156\331\157" +
    "\317\160\277\161\314\162\330\163\327\164\310\165\326" +
    "\166\322\167\316\170\333\171\311\172\321\173\307\174" +
    "\320\175\301\200\305\243\312\244\300\001\002\000\002" +
    "\001\ufe44\000\160\004\157\006\116\007\010\010\066\011" +
    "\174\013\064\020\140\035\112\046\177\051\012\052\044" +
    "\063\162\064\033\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\112\176\113\137\114\043" +
    "\115\073\117\060\120\031\121\077\122\053\123\134\124" +
    "\115\131\070\170\114\171\074\176\160\177\016\201\055" +
    "\202\165\203\030\204\144\205\041\206\136\207\100\210" +
    "\146\211\076\212\040\213\054\215\102\221\175\227\164" +
    "\232\107\233\122\234\062\235\104\241\124\001\002\000" +
    "\002\001\ufe33\000\002\001\uff5b\000\002\001\uff88\000\050" +
    "\072\ufe31\107\ufe31\111\ufe31\132\u01cd\133\u01d2\134\u01ce\135" +
    "\u01db\136\u01d1\137\u01da\140\u01d4\141\u01d7\142\u01d0\143\u01cc" +
    "\144\u01d3\145\u01d5\146\u01cf\201\u01d6\202\u01d9\213\ufe31\001" +
    "\ufe36\000\020\011\174\020\250\046\u038d\047\u0391\115\u0392" +
    "\117\060\227\246\001\002\000\160\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\001\002\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\004\132\u0386\001\002\000\004\227\u0383\001\002\000" +
    "\002\001\uff49\000\004\227\u0372\001\002\000\004\231\u0371" +
    "\001\ufde7\000\014\013\u0286\017\u036e\104\u036d\105\u0288\106" +
    "\u0287\001\002\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\004\107" +
    "\u0355\001\002\000\002\001\ufe45\000\160\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\006\013\u034c\046\u011c\001\ufe59\000" +
    "\002\001\ufe23\000\004\227\u0343\001\002\000\002\001\ufe42" +
    "\000\004\011\u033a\001\002\000\002\001\ufe41\000\004\227" +
    "\u0337\001\002\000\162\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\155\u0324\170\114\171\074\176\160\177" +
    "\016\201\055\202\165\203\030\204\144\205\041\206\136" +
    "\207\100\210\146\211\076\212\040\213\054\215\102\221" +
    "\175\227\164\232\107\233\122\234\062\235\104\241\124" +
    "\001\ufe09\000\030\011\174\013\064\020\140\075\014\112" +
    "\176\115\073\117\060\213\054\221\350\227\u0154\232\107" +
    "\001\002\000\014\072\ufe2f\107\ufe2f\111\ufe2f\213\ufe2f\227" +
    "\ufe2c\001\ufe3a\000\162\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\150\u0320\170\114\171\074\176\160\177" +
    "\016\201\055\202\165\203\030\204\144\205\041\206\136" +
    "\207\100\210\146\211\076\212\040\213\054\215\102\221" +
    "\175\227\164\232\107\233\122\234\062\235\104\241\124" +
    "\001\002\000\002\001\ufde6\000\004\227\u031d\001\002\000" +
    "\012\013\u0286\017\u031b\105\u0288\106\u0287\001\ufe4f\000\004" +
    "\111\u0312\001\002\000\002\001\ufef9\000\004\066\u0274\001" +
    "\002\000\002\001\ufe48\000\004\213\u0157\001\ufe39\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\002\001\uff87\000" +
    "\002\001\ufe76\000\006\011\174\117\060\001\002\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\004\011\u030a\001" +
    "\002\000\160\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\175\227\164\232" +
    "\107\233\122\234\062\235\104\241\124\001\002\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\160\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\002\001\uff75\000\022\011\174" +
    "\013\064\066\u02f3\112\176\115\073\117\060\221\350\232" +
    "\107\001\002\000\004\227\u02ea\001\002\000\012\013\u0286" +
    "\017\u0289\105\u0288\106\u0287\001\002\000\010\011\174\115" +
    "\u011a\117\060\001\uffab\000\010\072\u02d3\107\u02d1\213\u02d2" +
    "\001\ufe17\000\010\013\064\107\u02ce\232\107\001\002\000" +
    "\004\227\u02b5\001\002\000\006\111\ufe58\227\u02b2\001\ufe22" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\002\001" +
    "\uffb0\000\160\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\175\227\164\232" +
    "\107\233\122\234\062\235\104\241\124\001\002\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\002\001\ufe4a\000" +
    "\004\155\200\001\uff5a\000\004\227\ufe2e\001\ufe34\000\002" +
    "\001\uff8b\000\012\013\u0286\017\u0289\105\u0288\106\u0287\001" +
    "\002\000\004\011\u021d\001\002\000\002\001\ufe43\000\002" +
    "\001\uff89\000\236\003\125\004\157\005\171\006\116\007" +
    "\010\010\066\011\036\013\064\015\101\020\140\021\022" +
    "\022\131\023\126\024\047\026\035\030\110\032\170\035" +
    "\112\037\142\043\057\044\130\045\075\046\177\050\151" +
    "\051\012\052\044\053\042\055\166\057\235\060\011\062" +
    "\103\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\107\071\112\176\113" +
    "\137\114\043\115\073\116\025\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\150\007\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\045\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\002\001\uff46\000\162\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\150\u0214" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\175\227\164\232\107\233" +
    "\122\234\062\235\104\241\124\001\002\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\002\001\ufe28\000\002\001" +
    "\uffaf\000\160\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\175\227\164\232" +
    "\107\233\122\234\062\235\104\241\124\001\002\000\002" +
    "\001\uffba\000\160\004\157\006\116\007\010\010\066\011" +
    "\174\013\064\020\140\035\112\046\177\051\012\052\044" +
    "\063\162\064\033\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\112\176\113\137\114\043" +
    "\115\073\117\060\120\031\121\077\122\053\123\134\124" +
    "\115\131\070\170\114\171\074\176\160\177\016\201\055" +
    "\202\165\203\030\204\144\205\041\206\136\207\100\210" +
    "\146\211\076\212\040\213\054\215\102\221\175\227\164" +
    "\232\107\233\122\234\062\235\104\241\124\001\002\000" +
    "\002\001\ufe40\000\002\001\ufe29\000\004\227\u020a\001\002" +
    "\000\004\227\u01ef\001\002\000\002\001\ufe47\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\002\001\uff5c\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\006\011\174\117" +
    "\060\001\002\000\002\001\ufe7a\000\162\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\150\u01c7\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\002\001\ufe35\000\004\111" +
    "\u0172\001\002\000\004\115\u0170\001\uffbb\000\002\001\uff42" +
    "\000\002\001\uffb6\000\004\227\u016b\001\ufe52\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\002\001\uffb1\000\004" +
    "\227\u0164\001\002\000\004\227\u015c\001\002\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\030\011\174\013\064" +
    "\020\140\075\014\112\176\115\073\117\060\213\054\221" +
    "\350\227\u0154\232\107\001\002\000\160\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\002\001\uffb3\000\004\227\u013f\001" +
    "\002\000\004\227\172\001\002\000\160\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\076\034\323\126\313\127\332\130" +
    "\302\147\306\151\303\152\324\153\304\154\315\155\325" +
    "\156\331\157\317\160\277\161\314\162\330\163\327\164" +
    "\310\165\326\166\322\167\316\170\333\171\311\172\321" +
    "\173\307\174\320\175\301\200\305\230\u0125\243\312\244" +
    "\300\001\002\000\002\001\ufde7\000\004\046\u011c\001\ufe59" +
    "\000\004\115\u011a\001\002\000\004\155\200\001\uff5a\000" +
    "\002\001\uff59\000\004\227\202\001\002\000\022\003\211" +
    "\011\174\075\203\112\210\115\214\117\060\230\uff15\240" +
    "\207\001\uff0a\000\002\001\uff08\000\002\001\ufe57\000\010" +
    "\013\274\155\272\242\273\001\002\000\004\125\270\001" +
    "\uff16\000\002\001\uff07\000\004\115\266\001\002\000\002" +
    "\001\uff0b\000\002\001\uff09\000\002\001\uff14\000\006\011" +
    "\174\117\060\001\002\000\004\230\216\001\002\000\004" +
    "\057\217\001\ufe63\000\004\227\254\001\002\000\004\231" +
    "\222\001\ufefd\000\002\001\ufe69\000\016\011\174\075\224" +
    "\112\176\115\073\117\060\240\225\001\002\000\002\001" +
    "\ufefe\000\002\001\uff00\000\002\001\ufeff\000\002\001\ufefc" +
    "\000\006\003\230\107\231\001\002\000\002\001\ufe64\000" +
    "\002\001\uff90\000\002\001\ufe68\000\254\003\125\004\157" +
    "\005\171\006\116\007\010\010\066\011\036\013\064\015" +
    "\101\020\140\021\022\022\131\023\126\024\047\026\035" +
    "\030\110\032\170\035\112\037\142\043\057\044\130\045" +
    "\075\046\117\050\151\051\012\052\044\053\042\055\166" +
    "\057\235\060\011\062\103\063\162\064\033\065\236\066" +
    "\034\067\155\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\107\071\110\240\112\176\113" +
    "\137\114\043\115\073\116\025\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\150\007\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\045\222\065\223\017\227\164\232\107" +
    "\233\122\234\062\235\104\237\127\241\124\001\002\000" +
    "\002\001\uff91\000\006\020\250\227\246\001\002\000\004" +
    "\227\243\001\002\000\002\001\uff8e\000\002\001\ufe65\000" +
    "\002\001\uff8d\000\002\001\uff8f\000\004\230\244\001\002" +
    "\000\004\150\245\001\002\000\002\001\uff8c\000\004\020" +
    "\252\001\002\000\004\150\251\001\002\000\002\001\uff5e" +
    "\000\002\001\uff73\000\004\230\253\001\002\000\002\001" +
    "\uff5d\000\006\013\260\155\255\001\002\000\004\013\264" +
    "\001\002\000\002\001\ufe60\000\006\125\262\230\261\001" +
    "\002\000\002\001\ufe5f\000\002\001\ufe62\000\006\013\260" +
    "\155\255\001\002\000\002\001\ufe61\000\002\001\ufe5e\000" +
    "\002\001\ufe55\000\006\011\174\117\060\001\002\000\002" +
    "\001\ufe56\000\024\003\211\011\174\075\203\112\210\115" +
    "\214\117\060\125\uff12\230\uff12\240\207\001\uff0a\000\002" +
    "\001\uff13\000\006\013\u0116\242\u0115\001\002\000\004\013" +
    "\u0114\001\002\000\004\132\275\001\uff11\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\074\034\323\126\313\127" +
    "\332\130\302\147\306\151\303\152\324\153\304\154\315" +
    "\155\325\156\331\157\317\160\277\161\314\162\330\163" +
    "\327\164\310\165\326\166\322\167\316\170\333\171\311" +
    "\172\321\173\307\174\320\175\301\200\305\243\312\244" +
    "\300\001\uff0d\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\160\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\160\004\157\006\116\007\010\010" +
    "\066\011\174\013\064\020\140\035\112\046\177\051\012" +
    "\052\044\063\162\064\033\074\163\075\014\076\021\077" +
    "\050\100\052\101\143\102\006\103\037\112\176\113\137" +
    "\114\043\115\073\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\170\114\171\074\176\160\177\016" +
    "\201\055\202\165\203\030\204\144\205\041\206\136\207" +
    "\100\210\146\211\076\212\040\213\054\215\102\221\175" +
    "\227\164\232\107\233\122\234\062\235\104\241\124\001" +
    "\002\000\160\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\175\227\164\232" +
    "\107\233\122\234\062\235\104\241\124\001\002\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\162\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\231\u0109\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\160\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\160\004\157\006\116\007\010\010" +
    "\066\011\174\013\064\020\140\035\112\046\177\051\012" +
    "\052\044\063\162\064\033\074\163\075\014\076\021\077" +
    "\050\100\052\101\143\102\006\103\037\112\176\113\137" +
    "\114\043\115\073\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\170\114\171\074\176\160\177\016" +
    "\201\055\202\165\203\030\204\144\205\041\206\136\207" +
    "\100\210\146\211\076\212\040\213\054\215\102\221\175" +
    "\227\164\232\107\233\122\234\062\235\104\241\124\001" +
    "\002\000\160\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\175\227\164\232" +
    "\107\233\122\234\062\235\104\241\124\001\002\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\160\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\160\004\157\006\116\007\010" +
    "\010\066\011\174\013\064\020\140\035\112\046\177\051" +
    "\012\052\044\063\162\064\033\074\163\075\014\076\021" +
    "\077\050\100\052\101\143\102\006\103\037\112\176\113" +
    "\137\114\043\115\073\117\060\120\031\121\077\122\053" +
    "\123\134\124\115\131\070\170\114\171\074\176\160\177" +
    "\016\201\055\202\165\203\030\204\144\205\041\206\136" +
    "\207\100\210\146\211\076\212\040\213\054\215\102\221" +
    "\175\227\164\232\107\233\122\234\062\235\104\241\124" +
    "\001\002\000\160\004\157\006\116\007\010\010\066\011" +
    "\174\013\064\020\140\035\112\046\177\051\012\052\044" +
    "\063\162\064\033\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\112\176\113\137\114\043" +
    "\115\073\117\060\120\031\121\077\122\053\123\134\124" +
    "\115\131\070\170\114\171\074\176\160\177\016\201\055" +
    "\202\165\203\030\204\144\205\041\206\136\207\100\210" +
    "\146\211\076\212\040\213\054\215\102\221\175\227\164" +
    "\232\107\233\122\234\062\235\104\241\124\001\002\000" +
    "\160\004\157\006\116\007\010\010\066\011\174\013\064" +
    "\020\140\035\112\046\177\051\012\052\044\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\112\176\113\137\114\043\115\073\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\175\227\164\232\107\233" +
    "\122\234\062\235\104\241\124\001\002\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\160\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\001\002\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\020\011" +
    "\174\013\064\112\176\115\073\117\060\221\350\232\107" +
    "\001\002\000\160\004\157\006\116\007\010\010\066\011" +
    "\174\013\064\020\140\035\112\046\177\051\012\052\044" +
    "\063\162\064\033\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\112\176\113\137\114\043" +
    "\115\073\117\060\120\031\121\077\122\053\123\134\124" +
    "\115\131\070\170\114\171\074\176\160\177\016\201\055" +
    "\202\165\203\030\204\144\205\041\206\136\207\100\210" +
    "\146\211\076\212\040\213\054\215\102\221\175\227\164" +
    "\232\107\233\122\234\062\235\104\241\124\001\002\000" +
    "\160\004\157\006\116\007\010\010\066\011\174\013\064" +
    "\020\140\035\112\046\177\051\012\052\044\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\112\176\113\137\114\043\115\073\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\175\227\164\232\107\233" +
    "\122\234\062\235\104\241\124\001\002\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\160\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\001\002\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\160\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\014\034\323\172\321\173\307\174" +
    "\320\175\301\001\ufe92\000\070\034\323\130\302\147\306" +
    "\151\303\152\324\153\304\154\315\155\325\156\331\157" +
    "\317\160\277\161\314\162\330\163\327\164\310\165\326" +
    "\166\322\167\316\170\333\171\311\172\321\173\307\174" +
    "\320\175\301\200\305\243\312\244\300\001\ufe97\000\040" +
    "\034\323\162\330\163\327\164\310\165\326\166\322\167" +
    "\316\170\333\171\311\172\321\173\307\174\320\175\301" +
    "\200\305\243\312\001\ufe84\000\030\034\323\166\322\167" +
    "\316\170\333\171\311\172\321\173\307\174\320\175\301" +
    "\200\305\243\312\001\ufe81\000\030\034\323\166\322\167" +
    "\316\170\333\171\311\172\321\173\307\174\320\175\301" +
    "\200\305\243\312\001\ufe7f\000\030\034\323\166\322\167" +
    "\316\170\333\171\311\172\321\173\307\174\320\175\301" +
    "\200\305\243\312\001\ufe80\000\050\034\323\156\331\157" +
    "\317\160\277\161\314\162\330\163\327\164\310\165\326" +
    "\166\322\167\316\170\333\171\311\172\321\173\307\174" +
    "\320\175\301\200\305\243\312\001\ufe95\000\056\034\323" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\243\312\001\ufe9a\000\002\001\ufe7d\000\002\001\ufe58" +
    "\000\012\072\357\107\354\111\356\213\355\001\ufe53\000" +
    "\004\111\352\001\ufe54\000\002\001\ufe59\000\002\001\ufe1d" +
    "\000\006\013\064\232\107\001\002\000\002\001\ufe19\000" +
    "\160\004\157\006\116\007\010\010\066\011\174\013\064" +
    "\020\140\035\112\046\177\051\012\052\044\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\112\176\113\137\114\043\115\073\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\175\227\164\232\107\233" +
    "\122\234\062\235\104\241\124\001\002\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\ufe16\000\006\013\064\232\107\001" +
    "\002\000\014\011\174\013\064\107\362\117\060\232\107" +
    "\001\002\000\002\001\ufe0f\000\002\001\ufe1a\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\002\001\ufe11\000\076" +
    "\034\323\110\365\126\313\127\332\130\302\147\306\151" +
    "\303\152\324\153\304\154\315\155\325\156\331\157\317" +
    "\160\277\161\314\162\330\163\327\164\310\165\326\166" +
    "\322\167\316\170\333\171\311\172\321\173\307\174\320" +
    "\175\301\200\305\243\312\244\300\001\002\000\002\001" +
    "\ufe10\000\002\001\ufe18\000\004\214\371\001\002\000\074" +
    "\034\323\126\313\127\332\130\302\147\306\151\303\152" +
    "\324\153\304\154\315\155\325\156\331\157\317\160\277" +
    "\161\314\162\330\163\327\164\310\165\326\166\322\167" +
    "\316\170\333\171\311\172\321\173\307\174\320\175\301" +
    "\200\305\243\312\244\300\001\ufe15\000\002\001\ufe1c\000" +
    "\076\034\323\110\373\126\313\127\332\130\302\147\306" +
    "\151\303\152\324\153\304\154\315\155\325\156\331\157" +
    "\317\160\277\161\314\162\330\163\327\164\310\165\326" +
    "\166\322\167\316\170\333\171\311\172\321\173\307\174" +
    "\320\175\301\200\305\243\312\244\300\001\002\000\002" +
    "\001\ufe1b\000\022\034\323\170\333\171\311\172\321\173" +
    "\307\174\320\175\301\200\305\001\ufe8c\000\004\034\323" +
    "\001\ufe90\000\004\034\323\001\ufe8e\000\040\034\323\162" +
    "\330\163\327\164\310\165\326\166\322\167\316\170\333" +
    "\171\311\172\321\173\307\174\320\175\301\200\305\243" +
    "\312\001\ufe83\000\022\034\323\170\333\171\311\172\321" +
    "\173\307\174\320\175\301\200\305\001\ufe8b\000\052\034" +
    "\323\155\325\156\331\157\317\160\277\161\314\162\330" +
    "\163\327\164\310\165\326\166\322\167\316\170\333\171" +
    "\311\172\321\173\307\174\320\175\301\200\305\243\312" +
    "\001\ufe94\000\040\034\323\162\330\163\327\164\310\165" +
    "\326\166\322\167\316\170\333\171\311\172\321\173\307" +
    "\174\320\175\301\200\305\243\312\001\ufe85\000\072\034" +
    "\323\127\332\130\302\147\306\151\303\152\324\153\304" +
    "\154\315\155\325\156\331\157\317\160\277\161\314\162" +
    "\330\163\327\164\310\165\326\166\322\167\316\170\333" +
    "\171\311\172\321\173\307\174\320\175\301\200\305\243" +
    "\312\244\300\001\ufe99\000\026\034\323\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\001\ufe7e\000\014\034\323\172\321\173\307\174\320" +
    "\175\301\001\ufe91\000\030\034\323\166\322\167\316\170" +
    "\333\171\311\172\321\173\307\174\320\175\301\200\305" +
    "\243\312\001\ufe82\000\004\034\323\001\ufe8f\000\076\034" +
    "\323\126\313\127\332\130\302\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\231\u010b\243\312\244\300\001\002\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\074\034\323\126\313\127" +
    "\332\130\302\147\306\151\303\152\324\153\304\154\315" +
    "\155\325\156\331\157\317\160\277\161\314\162\330\163" +
    "\327\164\310\165\326\166\322\167\316\170\333\171\311" +
    "\172\321\173\307\174\320\175\301\200\305\243\312\244" +
    "\300\001\ufe78\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\074\034\323\126\313\127\332\130\302\147\306\151" +
    "\303\152\324\153\304\154\315\155\325\156\331\157\317" +
    "\160\277\161\314\162\330\163\327\164\310\165\326\166" +
    "\322\167\316\170\333\171\311\172\321\173\307\174\320" +
    "\175\301\200\305\243\312\244\300\001\ufe79\000\014\034" +
    "\323\172\321\173\307\174\320\175\301\001\ufe93\000\054" +
    "\034\323\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\243\312\001\ufe96\000\060\034\323\152\324\153\304" +
    "\154\315\155\325\156\331\157\317\160\277\161\314\162" +
    "\330\163\327\164\310\165\326\166\322\167\316\170\333" +
    "\171\311\172\321\173\307\174\320\175\301\200\305\243" +
    "\312\001\ufe9b\000\066\034\323\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\243\312\244\300\001\ufe98\000\004\034\323\001\ufe8d" +
    "\000\064\034\323\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\243\312\244\300" +
    "\001\ufe77\000\040\034\323\162\330\163\327\164\310\165" +
    "\326\166\322\167\316\170\333\171\311\172\321\173\307" +
    "\174\320\175\301\200\305\243\312\001\ufe86\000\002\001" +
    "\uff10\000\004\013\u0119\001\002\000\004\132\u0117\001\uff0f" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\074\034" +
    "\323\126\313\127\332\130\302\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\243\312\244\300\001\uff0c\000\002\001\uff0e\000\006" +
    "\011\174\117\060\001\002\000\002\001\uffb5\000\004\155" +
    "\200\001\uff5a\000\004\227\u011e\001\002\000\022\003\211" +
    "\011\174\075\203\112\210\115\214\117\060\230\uff15\240" +
    "\207\001\uff0a\000\004\230\u0120\001\002\000\004\057\217" +
    "\001\ufe63\000\004\231\222\001\ufefd\000\002\001\ufe67\000" +
    "\006\003\230\107\231\001\002\000\002\001\ufe66\000\240" +
    "\003\125\004\157\005\171\006\116\007\010\010\066\011" +
    "\036\013\064\015\101\020\140\021\022\022\131\023\126" +
    "\024\047\026\035\030\110\032\170\035\112\037\142\043" +
    "\057\044\130\045\075\046\177\050\151\051\012\052\044" +
    "\053\042\055\166\057\235\060\011\062\103\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\107\071\112\176\113\137\114\043\115" +
    "\073\116\025\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\150\007\170\114\171\074\176\160\177" +
    "\016\201\055\202\165\203\030\204\144\205\041\206\136" +
    "\207\100\210\146\211\076\212\040\213\054\215\102\221" +
    "\045\227\164\231\u0126\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\002\001\uff90\000\002\001\uff1e\000" +
    "\006\217\u012b\220\u012a\001\uff1a\000\002\001\uff85\000\236" +
    "\003\125\004\157\005\171\006\116\007\010\010\066\011" +
    "\036\013\064\015\101\020\140\021\022\022\131\023\126" +
    "\024\047\026\035\030\110\032\170\035\112\037\142\043" +
    "\057\044\130\045\075\046\177\050\151\051\012\052\044" +
    "\053\042\055\166\057\235\060\011\062\103\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\107\071\112\176\113\137\114\043\115" +
    "\073\116\025\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\150\007\170\114\171\074\176\160\177" +
    "\016\201\055\202\165\203\030\204\144\205\041\206\136" +
    "\207\100\210\146\211\076\212\040\213\054\215\102\221" +
    "\045\227\164\232\107\233\122\234\062\235\104\241\124" +
    "\001\002\000\004\227\u012c\001\002\000\160\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\076\034\323\126\313\127\332" +
    "\130\302\147\306\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\230\u012e\243\312" +
    "\244\300\001\002\000\236\003\125\004\157\005\171\006" +
    "\116\007\010\010\066\011\036\013\064\015\101\020\140" +
    "\021\022\022\131\023\126\024\047\026\035\030\110\032" +
    "\170\035\112\037\142\043\057\044\130\045\075\046\177" +
    "\050\151\051\012\052\044\053\042\055\166\057\235\060" +
    "\011\062\103\063\162\064\033\074\163\075\014\076\021" +
    "\077\050\100\052\101\143\102\006\103\037\107\071\112" +
    "\176\113\137\114\043\115\073\116\025\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\150\007\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\045\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\002\001\uff1d\000" +
    "\002\001\uff19\000\252\003\125\004\157\005\171\006\116" +
    "\007\010\010\066\011\036\013\064\015\101\020\140\021" +
    "\022\022\131\023\126\024\047\026\035\030\110\032\170" +
    "\035\112\037\142\043\057\044\130\045\075\046\117\050" +
    "\151\051\012\052\044\053\042\055\166\057\235\060\011" +
    "\062\103\063\162\064\033\065\236\066\034\067\155\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\107\071\112\176\113\137\114\043\115\073\116" +
    "\025\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\150\007\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\045\222" +
    "\065\223\017\227\164\232\107\233\122\234\062\235\104" +
    "\237\127\241\124\001\uff1c\000\006\217\u0135\220\u0134\001" +
    "\uff18\000\004\216\u013d\001\002\000\004\231\u013b\001\002" +
    "\000\004\227\u0136\001\002\000\160\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\001\002\000\076\034\323\126\313\127\332\130\302" +
    "\147\306\151\303\152\324\153\304\154\315\155\325\156" +
    "\331\157\317\160\277\161\314\162\330\163\327\164\310" +
    "\165\326\166\322\167\316\170\333\171\311\172\321\173" +
    "\307\174\320\175\301\200\305\230\u0138\243\312\244\300" +
    "\001\002\000\004\231\u0139\001\002\000\002\001\uff90\000" +
    "\252\003\125\004\157\005\171\006\116\007\010\010\066" +
    "\011\036\013\064\015\101\020\140\021\022\022\131\023" +
    "\126\024\047\026\035\030\110\032\170\035\112\037\142" +
    "\043\057\044\130\045\075\046\117\050\151\051\012\052" +
    "\044\053\042\055\166\057\235\060\011\062\103\063\162" +
    "\064\033\065\236\066\034\067\155\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\107\071" +
    "\112\176\113\137\114\043\115\073\116\025\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\150\007" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\045\222\065\223\017\227" +
    "\164\232\107\233\122\234\062\235\104\237\127\241\124" +
    "\001\uff1b\000\002\001\uff90\000\252\003\125\004\157\005" +
    "\171\006\116\007\010\010\066\011\036\013\064\015\101" +
    "\020\140\021\022\022\131\023\126\024\047\026\035\030" +
    "\110\032\170\035\112\037\142\043\057\044\130\045\075" +
    "\046\117\050\151\051\012\052\044\053\042\055\166\057" +
    "\235\060\011\062\103\063\162\064\033\065\236\066\034" +
    "\067\155\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\107\071\112\176\113\137\114\043" +
    "\115\073\116\025\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\150\007\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\045\222\065\223\017\227\164\232\107\233\122\234" +
    "\062\235\104\237\127\241\124\001\uff17\000\004\150\u013e" +
    "\001\002\000\002\001\uff84\000\006\011\174\117\060\001" +
    "\002\000\006\125\u0145\230\u0144\001\002\000\004\132\u0142" +
    "\001\002\000\160\004\157\006\116\007\010\010\066\011" +
    "\174\013\064\020\140\035\112\046\177\051\012\052\044" +
    "\063\162\064\033\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\112\176\113\137\114\043" +
    "\115\073\117\060\120\031\121\077\122\053\123\134\124" +
    "\115\131\070\170\114\171\074\176\160\177\016\201\055" +
    "\202\165\203\030\204\144\205\041\206\136\207\100\210" +
    "\146\211\076\212\040\213\054\215\102\221\175\227\164" +
    "\232\107\233\122\234\062\235\104\241\124\001\002\000" +
    "\074\034\323\126\313\127\332\130\302\147\306\151\303" +
    "\152\324\153\304\154\315\155\325\156\331\157\317\160" +
    "\277\161\314\162\330\163\327\164\310\165\326\166\322" +
    "\167\316\170\333\171\311\172\321\173\307\174\320\175" +
    "\301\200\305\243\312\244\300\001\uff2b\000\240\003\125" +
    "\004\157\005\171\006\116\007\010\010\066\011\036\013" +
    "\064\015\101\020\140\021\022\022\131\023\126\024\047" +
    "\026\035\030\110\032\170\035\112\037\142\043\057\044" +
    "\130\045\075\046\177\050\151\051\012\052\044\053\042" +
    "\055\166\057\235\060\011\062\103\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\107\071\112\176\113\137\114\043\115\073\116" +
    "\025\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\150\007\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\045\227" +
    "\164\231\u014a\232\107\233\122\234\062\235\104\241\124" +
    "\001\002\000\006\011\174\117\060\001\002\000\004\132" +
    "\u0147\001\002\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\074\034\323\126\313\127\332\130\302\147\306\151" +
    "\303\152\324\153\304\154\315\155\325\156\331\157\317" +
    "\160\277\161\314\162\330\163\327\164\310\165\326\166" +
    "\322\167\316\170\333\171\311\172\321\173\307\174\320" +
    "\175\301\200\305\243\312\244\300\001\uff2a\000\002\001" +
    "\uff6f\000\002\001\uff90\000\002\001\uff2d\000\254\003\125" +
    "\004\157\005\171\006\116\007\010\010\066\011\036\013" +
    "\064\015\101\020\140\021\022\022\131\023\126\024\047" +
    "\026\035\030\110\032\170\033\u014d\035\112\037\142\043" +
    "\057\044\130\045\075\046\117\050\151\051\012\052\044" +
    "\053\042\055\166\057\235\060\011\062\103\063\162\064" +
    "\033\065\236\066\034\067\155\074\163\075\014\076\021" +
    "\077\050\100\052\101\143\102\006\103\037\107\071\112" +
    "\176\113\137\114\043\115\073\116\025\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\150\007\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\045\222\065\223\017\227\164" +
    "\232\107\233\122\234\062\235\104\237\127\241\124\001" +
    "\002\000\004\150\u014e\001\002\000\002\001\uff2c\000\076" +
    "\034\323\126\313\127\332\130\302\147\306\150\u0150\151" +
    "\303\152\324\153\304\154\315\155\325\156\331\157\317" +
    "\160\277\161\314\162\330\163\327\164\310\165\326\166" +
    "\322\167\316\170\333\171\311\172\321\173\307\174\320" +
    "\175\301\200\305\243\312\244\300\001\002\000\002\001" +
    "\uff6c\000\004\213\u0157\001\002\000\004\227\ufe2c\001\ufe2f" +
    "\000\012\072\ufe31\107\ufe31\111\ufe31\213\ufe31\001\ufe9c\000" +
    "\160\004\157\006\116\007\010\010\066\011\174\013\064" +
    "\020\140\035\112\046\177\051\012\052\044\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\112\176\113\137\114\043\115\073\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\175\227\164\232\107\233" +
    "\122\234\062\235\104\241\124\001\002\000\076\034\323" +
    "\126\313\127\332\130\302\147\306\151\303\152\324\153" +
    "\304\154\315\155\325\156\331\157\317\160\277\161\314" +
    "\162\330\163\327\164\310\165\326\166\322\167\316\170" +
    "\333\171\311\172\321\173\307\174\320\175\301\200\305" +
    "\230\u0156\243\312\244\300\001\002\000\004\227\ufe2d\001" +
    "\ufe30\000\160\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\175\227\164\232" +
    "\107\233\122\234\062\235\104\241\124\001\ufe16\000\004" +
    "\214\u0159\001\002\000\002\001\ufe26\000\076\034\323\126" +
    "\313\127\332\130\302\147\306\151\303\152\324\153\304" +
    "\154\315\155\325\156\331\157\317\160\277\161\314\162" +
    "\330\163\327\164\310\165\326\166\322\167\316\170\333" +
    "\171\311\172\321\173\307\174\320\175\301\200\305\230" +
    "\u015b\243\312\244\300\001\002\000\014\072\ufe30\107\ufe30" +
    "\111\ufe30\213\ufe30\227\ufe2d\001\ufe7c\000\032\011\174\013" +
    "\064\020\140\074\163\075\014\112\176\115\073\117\060" +
    "\213\054\221\350\227\u0154\232\107\001\ufe0a\000\002\001" +
    "\ufe0b\000\006\125\u0162\230\u0161\001\002\000\002\001\ufe0d" +
    "\000\006\125\ufe0c\230\ufe0c\001\ufe31\000\002\001\uff32\000" +
    "\032\011\174\013\064\020\140\074\163\075\014\112\176" +
    "\115\073\117\060\213\054\221\350\227\u0154\232\107\001" +
    "\ufe0a\000\002\001\ufe0e\000\030\011\174\013\064\020\140" +
    "\075\014\112\176\115\073\117\060\213\054\221\350\227" +
    "\u0154\232\107\001\002\000\006\125\ufde9\230\ufde9\001\ufe31" +
    "\000\006\125\u0168\230\u0167\001\002\000\002\001\ufdf0\000" +
    "\030\011\174\013\064\020\140\075\014\112\176\115\073" +
    "\117\060\213\054\221\350\227\u0154\232\107\001\002\000" +
    "\006\125\ufde8\230\ufde8\001\ufe31\000\004\034\323\001\ufe88" +
    "\000\162\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\230\u016e" +
    "\232\107\233\122\234\062\235\104\241\124\001\002\000" +
    "\002\001\ufe6e\000\076\034\323\126\313\127\332\130\302" +
    "\147\306\151\303\152\324\153\304\154\315\155\325\156" +
    "\331\157\317\160\277\161\314\162\330\163\327\164\310" +
    "\165\326\166\322\167\316\170\333\171\311\172\321\173" +
    "\307\174\320\175\301\200\305\230\u016f\243\312\244\300" +
    "\001\002\000\002\001\ufe51\000\002\001\ufe50\000\006\011" +
    "\174\117\060\001\002\000\002\001\uffb9\000\216\004\u01b1" +
    "\005\u01ba\011\174\013\064\022\u01a7\023\u01a5\024\u0183\025" +
    "\u0187\026\u017e\027\u019a\030\u0197\031\u0184\032\u01b9\033\u01a0" +
    "\034\u0186\035\u0199\036\u017f\037\u01ab\040\u0196\041\u0173\042" +
    "\u0189\043\u0188\044\u01a6\045\u0191\046\u019c\047\u01ac\050\u01ae" +
    "\051\u0175\053\u0180\054\u01b6\055\u01b8\056\u018a\057\u017a\060" +
    "\u0174\061\u01b7\062\u0193\063\u01b4\064\u017c\066\u017d\067\u01b0" +
    "\070\u0179\071\u0198\074\u01b5\075\u0176\107\u018d\112\u0194\117" +
    "\060\120\u017b\121\u0190\122\u0185\123\u01a9\124\u019b\126\u01b2" +
    "\127\u01b3\130\u01af\131\u018c\215\u0192\216\u018e\217\u018f\220" +
    "\u01a3\221\u0182\222\u018b\223\u0177\224\u019f\225\u019e\226\u01ad" +
    "\232\107\236\u019d\237\u01a4\240\u0178\001\002\000\002\001" +
    "\uffcf\000\002\001\uffde\000\002\001\uffd3\000\002\001\uffcc" +
    "\000\002\001\uffc1\000\002\001\uffcb\000\002\001\uffca\000" +
    "\002\001\uffe0\000\002\001\uffff\000\002\001\uffda\000\002" +
    "\001\uffc5\000\002\001\uffeb\000\002\001\uffe5\000\002\001" +
    "\uffe4\000\002\001\uffbc\000\002\001\uffc3\000\002\001\uffed" +
    "\000\002\001\uffe8\000\002\001\ufffd\000\002\001\ufff7\000" +
    "\002\001\uffec\000\002\001\uffcd\000\002\001\uffce\000\002" +
    "\001\uffe2\000\002\001\uffc2\000\002\001\uffd4\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\002\001\ufff0\000\002" +
    "\001\ufff2\000\002\001\ufffe\000\002\001\uffd8\000\002\001" +
    "\ufff6\000\002\001\uffdc\000\002\001\uffc8\000\004\227\ufe14" +
    "\001\ufe20\000\002\001\uffd0\000\002\001\uffe9\000\002\001" +
    "\uffc9\000\002\001\ufff5\000\002\001\uffea\000\002\001\ufffb" +
    "\000\002\001\uffd7\000\002\001\uffdf\000\002\001\uffbf\000" +
    "\002\001\uffc0\000\002\001\uffe6\000\002\001\uffc4\000\004" +
    "\227\u01bb\001\002\000\002\001\ufff1\000\002\001\uffc7\000" +
    "\002\001\uffee\000\002\001\uffd9\000\002\001\uffef\000\004" +
    "\227\ufe12\001\ufe1e\000\002\001\ufffc\000\002\001\uffbd\000" +
    "\002\001\uffd1\000\002\001\uffd6\000\002\001\uffbe\000\002" +
    "\001\uffd5\000\002\001\ufff8\000\002\001\uffc6\000\002\001" +
    "\ufff4\000\002\001\ufffa\000\002\001\ufff9\000\002\001\uffdb" +
    "\000\002\001\uffd2\000\002\001\uffe3\000\002\001\uffdd\000" +
    "\002\001\uffe1\000\002\001\uffe7\000\002\001\ufff3\000\162" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\242\u01c0\001\uff05\000\004\230" +
    "\u01c4\001\002\000\074\034\323\126\313\127\332\130\302" +
    "\147\306\151\303\152\324\153\304\154\315\155\325\156" +
    "\331\157\317\160\277\161\314\162\330\163\327\164\310" +
    "\165\326\166\322\167\316\170\333\171\311\172\321\173" +
    "\307\174\320\175\301\200\305\243\312\244\300\001\uff02" +
    "\000\002\001\uff04\000\004\125\u01c2\001\uff06\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\074\034\323\126\313" +
    "\127\332\130\302\147\306\151\303\152\324\153\304\154" +
    "\315\155\325\156\331\157\317\160\277\161\314\162\330" +
    "\163\327\164\310\165\326\166\322\167\316\170\333\171" +
    "\311\172\321\173\307\174\320\175\301\200\305\243\312" +
    "\244\300\001\uff01\000\162\004\157\006\116\007\010\010" +
    "\066\011\174\013\064\020\140\035\112\046\177\051\012" +
    "\052\044\063\162\064\033\074\163\075\014\076\021\077" +
    "\050\100\052\101\143\102\006\103\037\112\176\113\137" +
    "\114\043\115\073\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\170\114\171\074\176\160\177\016" +
    "\201\055\202\165\203\030\204\144\205\041\206\136\207" +
    "\100\210\146\211\076\212\040\213\054\215\102\221\175" +
    "\227\164\232\107\233\122\234\062\235\104\241\124\242" +
    "\u01c0\001\002\000\002\001\uff03\000\002\001\ufe5b\000\076" +
    "\034\323\110\u01c6\126\313\127\332\130\302\147\306\151" +
    "\303\152\324\153\304\154\315\155\325\156\331\157\317" +
    "\160\277\161\314\162\330\163\327\164\310\165\326\166" +
    "\322\167\316\170\333\171\311\172\321\173\307\174\320" +
    "\175\301\200\305\243\312\244\300\001\002\000\002\001" +
    "\ufe13\000\002\001\uff7b\000\074\034\323\126\313\127\332" +
    "\130\302\147\306\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\243\312\244\300" +
    "\001\002\000\052\072\ufe31\107\ufe31\111\ufe31\132\u01cd\133" +
    "\u01d2\134\u01ce\135\u01db\136\u01d1\137\u01da\140\u01d4\141\u01d7" +
    "\142\u01d0\143\u01cc\144\u01d3\145\u01d5\146\u01cf\150\u01d8\201" +
    "\u01d6\202\u01d9\213\ufe31\001\ufe36\000\004\150\u01cb\001\ufe35" +
    "\000\002\001\uff7a\000\160\004\157\006\116\007\010\010" +
    "\066\011\174\013\064\020\140\035\112\046\177\051\012" +
    "\052\044\063\162\064\033\074\163\075\014\076\021\077" +
    "\050\100\052\101\143\102\006\103\037\112\176\113\137" +
    "\114\043\115\073\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\170\114\171\074\176\160\177\016" +
    "\201\055\202\165\203\030\204\144\205\041\206\136\207" +
    "\100\210\146\211\076\212\040\213\054\215\102\221\175" +
    "\227\164\232\107\233\122\234\062\235\104\241\124\001" +
    "\002\000\162\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\155\u01e7\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\160\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\160\004\157\006\116\007\010\010" +
    "\066\011\174\013\064\020\140\035\112\046\177\051\012" +
    "\052\044\063\162\064\033\074\163\075\014\076\021\077" +
    "\050\100\052\101\143\102\006\103\037\112\176\113\137" +
    "\114\043\115\073\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\170\114\171\074\176\160\177\016" +
    "\201\055\202\165\203\030\204\144\205\041\206\136\207" +
    "\100\210\146\211\076\212\040\213\054\215\102\221\175" +
    "\227\164\232\107\233\122\234\062\235\104\241\124\001" +
    "\002\000\160\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\175\227\164\232" +
    "\107\233\122\234\062\235\104\241\124\001\002\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\160\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\160\004\157\006\116\007\010" +
    "\010\066\011\174\013\064\020\140\035\112\046\177\051" +
    "\012\052\044\063\162\064\033\074\163\075\014\076\021" +
    "\077\050\100\052\101\143\102\006\103\037\112\176\113" +
    "\137\114\043\115\073\117\060\120\031\121\077\122\053" +
    "\123\134\124\115\131\070\170\114\171\074\176\160\177" +
    "\016\201\055\202\165\203\030\204\144\205\041\206\136" +
    "\207\100\210\146\211\076\212\040\213\054\215\102\221" +
    "\175\227\164\232\107\233\122\234\062\235\104\241\124" +
    "\001\002\000\002\001\ufe9f\000\160\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\001\002\000\002\001\uff79\000\002\001\ufe9d\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\160\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\066\034\323\147\306\151\303" +
    "\152\324\153\304\154\315\155\325\156\331\157\317\160" +
    "\277\161\314\162\330\163\327\164\310\165\326\166\322" +
    "\167\316\170\333\171\311\172\321\173\307\174\320\175" +
    "\301\200\305\243\312\244\300\001\ufea9\000\066\034\323" +
    "\147\306\151\303\152\324\153\304\154\315\155\325\156" +
    "\331\157\317\160\277\161\314\162\330\163\327\164\310" +
    "\165\326\166\322\167\316\170\333\171\311\172\321\173" +
    "\307\174\320\175\301\200\305\243\312\244\300\001\ufea6" +
    "\000\066\034\323\147\306\151\303\152\324\153\304\154" +
    "\315\155\325\156\331\157\317\160\277\161\314\162\330" +
    "\163\327\164\310\165\326\166\322\167\316\170\333\171" +
    "\311\172\321\173\307\174\320\175\301\200\305\243\312" +
    "\244\300\001\ufea4\000\066\034\323\147\306\151\303\152" +
    "\324\153\304\154\315\155\325\156\331\157\317\160\277" +
    "\161\314\162\330\163\327\164\310\165\326\166\322\167" +
    "\316\170\333\171\311\172\321\173\307\174\320\175\301" +
    "\200\305\243\312\244\300\001\ufea0\000\066\034\323\147" +
    "\306\151\303\152\324\153\304\154\315\155\325\156\331" +
    "\157\317\160\277\161\314\162\330\163\327\164\310\165" +
    "\326\166\322\167\316\170\333\171\311\172\321\173\307" +
    "\174\320\175\301\200\305\243\312\244\300\001\ufea5\000" +
    "\066\034\323\147\306\151\303\152\324\153\304\154\315" +
    "\155\325\156\331\157\317\160\277\161\314\162\330\163" +
    "\327\164\310\165\326\166\322\167\316\170\333\171\311" +
    "\172\321\173\307\174\320\175\301\200\305\243\312\244" +
    "\300\001\ufea1\000\066\034\323\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\243\312\244\300\001\ufeab\000\066\034\323\147\306" +
    "\151\303\152\324\153\304\154\315\155\325\156\331\157" +
    "\317\160\277\161\314\162\330\163\327\164\310\165\326" +
    "\166\322\167\316\170\333\171\311\172\321\173\307\174" +
    "\320\175\301\200\305\243\312\244\300\001\ufea7\000\066" +
    "\034\323\147\306\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\243\312\244\300" +
    "\001\ufea3\000\066\034\323\147\306\151\303\152\324\153" +
    "\304\154\315\155\325\156\331\157\317\160\277\161\314" +
    "\162\330\163\327\164\310\165\326\166\322\167\316\170" +
    "\333\171\311\172\321\173\307\174\320\175\301\200\305" +
    "\243\312\244\300\001\ufea8\000\066\034\323\147\306\151" +
    "\303\152\324\153\304\154\315\155\325\156\331\157\317" +
    "\160\277\161\314\162\330\163\327\164\310\165\326\166" +
    "\322\167\316\170\333\171\311\172\321\173\307\174\320" +
    "\175\301\200\305\243\312\244\300\001\ufeaa\000\030\011" +
    "\174\013\064\020\140\075\014\112\176\115\073\117\060" +
    "\213\054\221\350\227\u0154\232\107\001\002\000\066\034" +
    "\323\147\306\151\303\152\324\153\304\154\315\155\325" +
    "\156\331\157\317\160\277\161\314\162\330\163\327\164" +
    "\310\165\326\166\322\167\316\170\333\171\311\172\321" +
    "\173\307\174\320\175\301\200\305\243\312\244\300\001" +
    "\ufeae\000\012\072\ufe31\107\ufe31\111\ufe31\213\ufe31\001\ufead" +
    "\000\066\034\323\147\306\151\303\152\324\153\304\154" +
    "\315\155\325\156\331\157\317\160\277\161\314\162\330" +
    "\163\327\164\310\165\326\166\322\167\316\170\333\171" +
    "\311\172\321\173\307\174\320\175\301\200\305\243\312" +
    "\244\300\001\ufea2\000\006\125\u0145\150\u01ec\001\002\000" +
    "\002\001\uffa5\000\002\001\ufe70\000\002\001\ufe74\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\076\034\323\126" +
    "\313\127\332\130\302\147\306\151\303\152\324\153\304" +
    "\154\315\155\325\156\331\157\317\160\277\161\314\162" +
    "\330\163\327\164\310\165\326\166\322\167\316\170\333" +
    "\171\311\172\321\173\307\174\320\175\301\200\305\230" +
    "\u01f1\243\312\244\300\001\002\000\006\107\u01f3\231\u01f4" +
    "\001\002\000\002\001\uff80\000\004\150\u0206\001\uff25\000" +
    "\004\150\u01f6\001\uff25\000\010\040\u0203\041\u01f9\042\u01fa" +
    "\001\002\000\002\001\uff25\000\010\040\u01f8\041\u01f9\042" +
    "\u01fa\001\002\000\004\150\u0202\001\002\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\006\150\u01fd\231\u01fc\001" +
    "\002\000\002\001\uff90\000\002\001\uff22\000\002\001\uff21" +
    "\000\252\003\125\004\157\005\171\006\116\007\010\010" +
    "\066\011\036\013\064\015\101\020\140\021\022\022\131" +
    "\023\126\024\047\026\035\030\110\032\170\035\112\037" +
    "\142\043\057\044\130\045\075\046\117\050\151\051\012" +
    "\052\044\053\042\055\166\057\235\060\011\062\103\063" +
    "\162\064\033\065\236\066\034\067\155\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\107" +
    "\071\112\176\113\137\114\043\115\073\116\025\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\150" +
    "\007\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\045\222\065\223\017" +
    "\227\164\232\107\233\122\234\062\235\104\237\127\241" +
    "\124\001\uff23\000\100\034\323\126\313\127\332\130\302" +
    "\147\306\150\u01fd\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\231\u01fc\243\312" +
    "\244\300\001\002\000\002\001\uff90\000\252\003\125\004" +
    "\157\005\171\006\116\007\010\010\066\011\036\013\064" +
    "\015\101\020\140\021\022\022\131\023\126\024\047\026" +
    "\035\030\110\032\170\035\112\037\142\043\057\044\130" +
    "\045\075\046\117\050\151\051\012\052\044\053\042\055" +
    "\166\057\235\060\011\062\103\063\162\064\033\065\236" +
    "\066\034\067\155\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\107\071\112\176\113\137" +
    "\114\043\115\073\116\025\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\150\007\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\045\222\065\223\017\227\164\232\107\233" +
    "\122\234\062\235\104\237\127\241\124\001\uff24\000\002" +
    "\001\uff26\000\004\150\u0204\001\002\000\002\001\uff27\000" +
    "\010\041\u01f9\042\u01fa\110\u0209\001\002\000\002\001\uff25" +
    "\000\010\041\u01f9\042\u01fa\110\u0208\001\002\000\002\001" +
    "\uff28\000\002\001\uff29\000\162\004\157\006\116\007\010" +
    "\010\066\011\174\013\064\020\140\035\112\046\177\051" +
    "\012\052\044\063\162\064\033\074\163\075\014\076\021" +
    "\077\050\100\052\101\143\102\006\103\037\112\176\113" +
    "\137\114\043\115\073\117\060\120\031\121\077\122\053" +
    "\123\134\124\115\131\070\170\114\171\074\176\160\177" +
    "\016\201\055\202\165\203\030\204\144\205\041\206\136" +
    "\207\100\210\146\211\076\212\040\213\054\215\102\221" +
    "\175\227\164\232\107\233\122\234\062\235\104\241\124" +
    "\242\u01c0\001\uff05\000\004\230\u020c\001\002\000\002\001" +
    "\ufe5a\000\002\001\ufe72\000\074\034\323\126\313\127\332" +
    "\130\302\147\306\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\243\312\244\300" +
    "\001\ufdeb\000\074\034\323\126\313\127\332\130\302\147" +
    "\306\151\303\152\324\153\304\154\315\155\325\156\331" +
    "\157\317\160\277\161\314\162\330\163\327\164\310\165" +
    "\326\166\322\167\316\170\333\171\311\172\321\173\307" +
    "\174\320\175\301\200\305\243\312\244\300\001\ufeb6\000" +
    "\006\125\u0211\150\u0212\001\002\000\160\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\001\002\000\002\001\uff76\000\074\034\323\126" +
    "\313\127\332\130\302\147\306\151\303\152\324\153\304" +
    "\154\315\155\325\156\331\157\317\160\277\161\314\162" +
    "\330\163\327\164\310\165\326\166\322\167\316\170\333" +
    "\171\311\172\321\173\307\174\320\175\301\200\305\243" +
    "\312\244\300\001\ufeb7\000\002\001\uff7d\000\076\034\323" +
    "\126\313\127\332\130\302\147\306\150\u0216\151\303\152" +
    "\324\153\304\154\315\155\325\156\331\157\317\160\277" +
    "\161\314\162\330\163\327\164\310\165\326\166\322\167" +
    "\316\170\333\171\311\172\321\173\307\174\320\175\301" +
    "\200\305\243\312\244\300\001\002\000\002\001\uff7c\000" +
    "\004\024\u0218\001\002\000\004\227\u0219\001\002\000\160" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\002\000\076\034\323\126" +
    "\313\127\332\130\302\147\306\151\303\152\324\153\304" +
    "\154\315\155\325\156\331\157\317\160\277\161\314\162" +
    "\330\163\327\164\310\165\326\166\322\167\316\170\333" +
    "\171\311\172\321\173\307\174\320\175\301\200\305\230" +
    "\u021b\243\312\244\300\001\002\000\004\150\u021c\001\002" +
    "\000\002\001\uff82\000\004\070\u021f\001\uff41\000\002\001" +
    "\uff4f\000\014\003\u0222\011\174\112\210\115\214\117\060" +
    "\001\002\000\004\125\u0223\001\uff40\000\002\001\uff3d\000" +
    "\002\001\uff3a\000\014\003\u0225\011\174\112\210\115\214" +
    "\117\060\001\002\000\002\001\uff3c\000\002\001\uff3b\000" +
    "\004\107\u0227\001\002\000\002\001\ufef1\000\040\003\u0237" +
    "\047\u022e\057\u0239\061\u023c\066\034\067\155\110\u0236\116" +
    "\u0235\221\u023a\222\u022d\223\u022f\224\u0233\225\u022c\226\u0238" +
    "\237\127\001\ufeca\000\002\001\uff4a\000\002\001\ufee8\000" +
    "\004\046\u0275\001\002\000\002\001\ufec5\000\004\066\u0274" +
    "\001\ufec2\000\210\004\u01b1\005\u01ba\011\174\022\u01a7\023" +
    "\u01a5\024\u0183\025\u0187\026\u017e\027\u019a\030\u0197\031\u0184" +
    "\032\u01b9\033\u01a0\034\u0186\035\u0199\036\u017f\037\u01ab\040" +
    "\u0196\041\u0173\042\u0189\043\u0188\044\u01a6\045\u0191\046\u019c" +
    "\047\u01ac\050\u01ae\051\u0175\053\u0180\054\u01b6\055\u01b8\056" +
    "\u018a\057\u017a\060\u0174\061\u01b7\062\u0193\063\u01b4\064\u017c" +
    "\066\u017d\067\u01b0\070\u0179\071\u0198\074\u01b5\075\u0176\112" +
    "\u0194\117\060\120\u017b\121\u0190\122\u0185\123\u01a9\124\u019b" +
    "\126\u01b2\127\u01b3\130\u01af\131\u018c\215\u0192\216\u018e\217" +
    "\u018f\220\u01a3\221\u0182\222\u018b\223\u0177\224\u019f\225\u019e" +
    "\226\u01ad\236\u019d\237\u01a4\240\u0178\001\002\000\004\066" +
    "\u026b\001\ufec1\000\002\001\ufef2\000\020\046\ufec9\221\u023a" +
    "\222\u026a\223\u0269\224\u0233\225\u022c\226\u0238\001\ufecc\000" +
    "\002\001\uff4e\000\002\001\ufec4\000\002\001\ufec8\000\002" +
    "\001\ufeea\000\002\001\uff4b\000\002\001\ufee9\000\002\001" +
    "\ufec6\000\012\011\174\112\210\115\214\117\060\001\002" +
    "\000\002\001\ufec3\000\004\013\u023e\001\002\000\002\001" +
    "\ufecb\000\006\125\u0241\150\u0242\001\002\000\004\132\u023f" +
    "\001\ufebe\000\160\004\157\006\116\007\010\010\066\011" +
    "\174\013\064\020\140\035\112\046\177\051\012\052\044" +
    "\063\162\064\033\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\112\176\113\137\114\043" +
    "\115\073\117\060\120\031\121\077\122\053\123\134\124" +
    "\115\131\070\170\114\171\074\176\160\177\016\201\055" +
    "\202\165\203\030\204\144\205\041\206\136\207\100\210" +
    "\146\211\076\212\040\213\054\215\102\221\175\227\164" +
    "\232\107\233\122\234\062\235\104\241\124\001\002\000" +
    "\074\034\323\126\313\127\332\130\302\147\306\151\303" +
    "\152\324\153\304\154\315\155\325\156\331\157\317\160" +
    "\277\161\314\162\330\163\327\164\310\165\326\166\322" +
    "\167\316\170\333\171\311\172\321\173\307\174\320\175" +
    "\301\200\305\243\312\244\300\001\ufebd\000\004\013\u0243" +
    "\001\002\000\002\001\ufef0\000\004\132\u0244\001\ufec0\000" +
    "\160\004\157\006\116\007\010\010\066\011\174\013\064" +
    "\020\140\035\112\046\177\051\012\052\044\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\112\176\113\137\114\043\115\073\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\175\227\164\232\107\233" +
    "\122\234\062\235\104\241\124\001\002\000\074\034\323" +
    "\126\313\127\332\130\302\147\306\151\303\152\324\153" +
    "\304\154\315\155\325\156\331\157\317\160\277\161\314" +
    "\162\330\163\327\164\310\165\326\166\322\167\316\170" +
    "\333\171\311\172\321\173\307\174\320\175\301\200\305" +
    "\243\312\244\300\001\ufebf\000\010\107\u0249\125\u0248\150" +
    "\u024b\001\002\000\002\001\ufee6\000\012\011\174\112\210" +
    "\115\214\117\060\001\002\000\012\011\u0254\112\210\115" +
    "\214\117\060\001\ufee2\000\002\001\ufee7\000\002\001\ufee4" +
    "\000\004\036\u0260\001\002\000\004\150\u025f\001\002\000" +
    "\012\011\u0254\112\210\115\214\117\060\001\ufee1\000\004" +
    "\110\u025d\001\002\000\004\236\u0258\001\ufed8\000\004\111" +
    "\u0256\001\002\000\002\001\ufee0\000\004\150\u0255\001\002" +
    "\000\004\036\ufed9\001\ufde7\000\002\001\ufede\000\004\011" +
    "\u0257\001\002\000\002\001\ufed7\000\012\011\174\112\210" +
    "\115\214\117\060\001\002\000\004\125\u025b\001\ufedc\000" +
    "\002\001\ufedb\000\012\011\174\112\210\115\214\117\060" +
    "\001\002\000\002\001\ufeda\000\002\001\ufee3\000\002\001" +
    "\ufedf\000\002\001\ufedd\000\010\224\u0263\225\u0264\226\u0261" +
    "\001\ufed1\000\002\001\ufed4\000\210\004\u01b1\005\u01ba\011" +
    "\174\022\u01a7\023\u01a5\024\u0183\025\u0187\026\u017e\027\u019a" +
    "\030\u0197\031\u0184\032\u01b9\033\u01a0\034\u0186\035\u0199\036" +
    "\u017f\037\u01ab\040\u0196\041\u0173\042\u0189\043\u0188\044\u01a6" +
    "\045\u0191\046\u019c\047\u01ac\050\u01ae\051\u0175\053\u0180\054" +
    "\u01b6\055\u01b8\056\u018a\057\u017a\060\u0174\061\u01b7\062\u0193" +
    "\063\u01b4\064\u017c\066\u017d\067\u01b0\070\u0179\071\u0198\074" +
    "\u01b5\075\u0176\112\u0194\117\060\120\u017b\121\u0190\122\u0185" +
    "\123\u01a9\124\u019b\126\u01b2\127\u01b3\130\u01af\131\u018c\215" +
    "\u0192\216\u018e\217\u018f\220\u01a3\221\u0182\222\u018b\223\u0177" +
    "\224\u019f\225\u019e\226\u01ad\236\u019d\237\u01a4\240\u0178\001" +
    "\002\000\002\001\ufed2\000\002\001\ufed3\000\004\150\ufed5" +
    "\001\ufed0\000\002\001\ufed6\000\002\001\ufee5\000\002\001" +
    "\ufec7\000\002\001\ufec1\000\002\001\ufec2\000\002\001\uff47" +
    "\000\002\001\ufeb9\000\004\132\u0272\001\002\000\006\125" +
    "\u026f\150\u0270\001\002\000\210\004\u01b1\005\u01ba\011\174" +
    "\022\u01a7\023\u01a5\024\u0183\025\u0187\026\u017e\027\u019a\030" +
    "\u0197\031\u0184\032\u01b9\033\u01a0\034\u0186\035\u0199\036\u017f" +
    "\037\u01ab\040\u0196\041\u0173\042\u0189\043\u0188\044\u01a6\045" +
    "\u0191\046\u019c\047\u01ac\050\u01ae\051\u0175\053\u0180\054\u01b6" +
    "\055\u01b8\056\u018a\057\u017a\060\u0174\061\u01b7\062\u0193\063" +
    "\u01b4\064\u017c\066\u017d\067\u01b0\070\u0179\071\u0198\074\u01b5" +
    "\075\u0176\112\u0194\117\060\120\u017b\121\u0190\122\u0185\123" +
    "\u01a9\124\u019b\126\u01b2\127\u01b3\130\u01af\131\u018c\215\u0192" +
    "\216\u018e\217\u018f\220\u01a3\221\u0182\222\u018b\223\u0177\224" +
    "\u019f\225\u019e\226\u01ad\236\u019d\237\u01a4\240\u0178\001\002" +
    "\000\002\001\ufeef\000\002\001\ufeba\000\160\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\074\034\323\126\313\127\332" +
    "\130\302\147\306\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\243\312\244\300" +
    "\001\ufeb8\000\002\001\uff48\000\004\155\200\001\uff5a\000" +
    "\210\004\u01b1\005\u01ba\011\174\022\u01a7\023\u01a5\024\u0183" +
    "\025\u0187\026\u017e\027\u019a\030\u0197\031\u0184\032\u01b9\033" +
    "\u01a0\034\u0186\035\u0199\036\u017f\037\u01ab\040\u0196\041\u0173" +
    "\042\u0189\043\u0188\044\u01a6\045\u0191\046\u019c\047\u01ac\050" +
    "\u01ae\051\u0175\053\u0180\054\u01b6\055\u01b8\056\u018a\057\u017a" +
    "\060\u0174\061\u01b7\062\u0193\063\u01b4\064\u017c\066\u017d\067" +
    "\u01b0\070\u0179\071\u0198\074\u01b5\075\u0176\112\u0194\117\060" +
    "\120\u017b\121\u0190\122\u0185\123\u01a9\124\u019b\126\u01b2\127" +
    "\u01b3\130\u01af\131\u018c\215\u0192\216\u018e\217\u018f\220\u01a3" +
    "\221\u0182\222\u018b\223\u0177\224\u019f\225\u019e\226\u01ad\236" +
    "\u019d\237\u01a4\240\u0178\001\002\000\002\001\ufeee\000\004" +
    "\227\u0279\001\002\000\022\003\211\011\174\075\203\112" +
    "\210\115\214\117\060\230\uff15\240\207\001\uff0a\000\004" +
    "\230\u027b\001\002\000\002\001\ufeed\000\004\231\222\001" +
    "\ufefd\000\002\001\ufeec\000\006\107\u0280\150\u0281\001\ufecd" +
    "\000\002\001\ufeeb\000\002\001\uff90\000\002\001\ufecf\000" +
    "\254\003\125\004\157\005\171\006\116\007\010\010\066" +
    "\011\036\013\064\015\101\020\140\021\022\022\131\023" +
    "\126\024\047\026\035\030\110\032\170\035\112\037\142" +
    "\043\057\044\130\045\075\046\117\050\151\051\012\052" +
    "\044\053\042\055\166\057\235\060\011\062\103\063\162" +
    "\064\033\065\236\066\034\067\155\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\107\071" +
    "\110\u0283\112\176\113\137\114\043\115\073\116\025\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\150\007\170\114\171\074\176\160\177\016\201\055\202" +
    "\165\203\030\204\144\205\041\206\136\207\100\210\146" +
    "\211\076\212\040\213\054\215\102\221\045\222\065\223" +
    "\017\227\164\232\107\233\122\234\062\235\104\237\127" +
    "\241\124\001\002\000\002\001\ufece\000\016\013\u0286\016" +
    "\u02a0\017\u029f\105\u0288\106\u0287\233\u029e\001\002\000\002" +
    "\001\ufdfc\000\006\072\u0296\213\u0295\001\ufdf9\000\030\011" +
    "\174\013\064\020\140\075\014\112\176\115\073\117\060" +
    "\213\054\221\350\227\u0154\232\107\001\002\000\162\004" +
    "\157\006\116\007\010\010\066\011\174\012\u028c\013\064" +
    "\020\140\035\112\046\177\051\012\052\044\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\112\176\113\137\114\043\115\073\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\175\227\164\232\107\233" +
    "\122\234\062\235\104\241\124\001\002\000\010\013\u0286" +
    "\105\u0288\106\u0287\001\002\000\002\001\ufdfb\000\076\034" +
    "\323\110\u0292\126\313\127\332\130\302\147\306\151\303" +
    "\152\324\153\304\154\315\155\325\156\331\157\317\160" +
    "\277\161\314\162\330\163\327\164\310\165\326\166\322" +
    "\167\316\170\333\171\311\172\321\173\307\174\320\175" +
    "\301\200\305\243\312\244\300\001\002\000\006\110\u028d" +
    "\213\u028e\001\002\000\002\001\ufdf5\000\160\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\076\034\323\126\313\127\332" +
    "\130\302\147\306\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\214\u0290\243\312" +
    "\244\300\001\002\000\004\110\u0291\001\002\000\002\001" +
    "\ufdf4\000\002\001\ufdf6\000\004\110\u0294\001\ufe31\000\002" +
    "\001\ufdfa\000\012\011\174\013\u0299\014\u029b\117\060\001" +
    "\002\000\006\011\174\117\060\001\002\000\002\001\ufdf7" +
    "\000\004\214\u029c\001\002\000\002\001\ufdf1\000\002\001" +
    "\ufdf3\000\002\001\ufdf2\000\002\001\ufdf8\000\002\001\ufdff" +
    "\000\002\001\ufe3d\000\002\001\ufdfe\000\002\001\ufdfd\000" +
    "\010\011\174\117\060\227\202\001\002\000\002\001\uff58" +
    "\000\004\227\u02a4\001\002\000\022\003\211\011\174\075" +
    "\203\112\210\115\214\117\060\230\uff15\240\207\001\uff0a" +
    "\000\004\230\u02a6\001\002\000\002\001\uff57\000\004\231" +
    "\222\001\ufefd\000\002\001\uff56\000\006\003\u02aa\107\u02ab" +
    "\001\002\000\002\001\uff53\000\002\001\uff90\000\002\001" +
    "\uff55\000\254\003\125\004\157\005\171\006\116\007\010" +
    "\010\066\011\036\013\064\015\101\020\140\021\022\022" +
    "\131\023\126\024\047\026\035\030\110\032\170\035\112" +
    "\037\142\043\057\044\130\045\075\046\117\050\151\051" +
    "\012\052\044\053\042\055\166\057\235\060\011\062\103" +
    "\063\162\064\033\065\236\066\034\067\155\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\107\071\110\u02ae\112\176\113\137\114\043\115\073\116" +
    "\025\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\150\007\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\045\222" +
    "\065\223\017\227\164\232\107\233\122\234\062\235\104" +
    "\237\127\241\124\001\002\000\002\001\uff54\000\074\034" +
    "\323\126\313\127\332\130\302\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\243\312\244\300\001\ufdea\000\014\034\323\172\321" +
    "\173\307\174\320\175\301\001\ufe8a\000\002\001\ufeac\000" +
    "\162\004\157\006\116\007\010\010\066\011\174\013\064" +
    "\020\140\035\112\046\177\051\012\052\044\063\162\064" +
    "\033\074\163\075\014\076\021\077\050\100\052\101\143" +
    "\102\006\103\037\112\176\113\137\114\043\115\073\117" +
    "\060\120\031\121\077\122\053\123\134\124\115\131\070" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\175\227\164\232\107\233" +
    "\122\234\062\235\104\241\124\242\u01c0\001\uff05\000\004" +
    "\230\u02b4\001\002\000\002\001\ufe5d\000\160\004\157\006" +
    "\116\007\010\010\066\011\174\013\064\020\140\035\112" +
    "\046\177\051\012\052\044\063\162\064\033\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\112\176\113\137\114\043\115\073\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\175\227\164\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\052\036\uff39\072\ufe31\107\ufe31" +
    "\111\ufe31\132\u01cd\133\u01d2\134\u01ce\135\u01db\136\u01d1\137" +
    "\u01da\140\u01d4\141\u01d7\142\u01d0\143\u01cc\144\u01d3\145\u01d5" +
    "\146\u01cf\201\u01d6\202\u01d9\213\ufe31\001\ufe36\000\004\036" +
    "\uff38\001\ufe35\000\004\036\u02b9\001\002\000\034\011\174" +
    "\013\064\020\140\074\163\075\014\112\176\115\073\117" +
    "\060\155\u02be\213\054\221\350\227\u0154\232\107\001\002" +
    "\000\004\073\u02cc\001\uff36\000\002\001\uff35\000\004\230" +
    "\u02ca\001\002\000\006\073\uff34\230\uff34\001\ufe31\000\030" +
    "\011\174\013\064\020\140\075\014\112\176\115\073\117" +
    "\060\213\054\221\350\227\u0154\232\107\001\002\000\034" +
    "\011\174\013\064\020\140\074\163\075\014\112\176\115" +
    "\073\117\060\155\u02be\213\054\221\350\227\u0154\232\107" +
    "\001\002\000\002\001\uff36\000\004\230\u02c2\001\002\000" +
    "\240\003\125\004\157\005\171\006\116\007\010\010\066" +
    "\011\036\013\064\015\101\020\140\021\022\022\131\023" +
    "\126\024\047\026\035\030\110\032\170\035\112\037\142" +
    "\043\057\044\130\045\075\046\177\050\151\051\012\052" +
    "\044\053\042\055\166\057\235\060\011\062\103\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\107\071\112\176\113\137\114\043" +
    "\115\073\116\025\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\150\007\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\045\227\164\231\u02c3\232\107\233\122\234\062\235" +
    "\104\241\124\001\002\000\002\001\uff90\000\002\001\uff2f" +
    "\000\002\001\uff70\000\254\003\125\004\157\005\171\006" +
    "\116\007\010\010\066\011\036\013\064\015\101\020\140" +
    "\021\022\022\131\023\126\024\047\026\035\030\110\031" +
    "\u02c7\032\170\035\112\037\142\043\057\044\130\045\075" +
    "\046\117\050\151\051\012\052\044\053\042\055\166\057" +
    "\235\060\011\062\103\063\162\064\033\065\236\066\034" +
    "\067\155\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\107\071\112\176\113\137\114\043" +
    "\115\073\116\025\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\150\007\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\045\222\065\223\017\227\164\232\107\233\122\234" +
    "\062\235\104\237\127\241\124\001\002\000\004\150\u02c8" +
    "\001\002\000\002\001\uff2e\000\006\073\uff33\230\uff33\001" +
    "\ufe31\000\240\003\125\004\157\005\171\006\116\007\010" +
    "\010\066\011\036\013\064\015\101\020\140\021\022\022" +
    "\131\023\126\024\047\026\035\030\110\032\170\035\112" +
    "\037\142\043\057\044\130\045\075\046\177\050\151\051" +
    "\012\052\044\053\042\055\166\057\235\060\011\062\103" +
    "\063\162\064\033\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\107\071\112\176\113\137" +
    "\114\043\115\073\116\025\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\150\007\170\114\171\074" +
    "\176\160\177\016\201\055\202\165\203\030\204\144\205" +
    "\041\206\136\207\100\210\146\211\076\212\040\213\054" +
    "\215\102\221\045\227\164\231\u02c3\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\002\001\uff71\000\002" +
    "\001\uff37\000\002\001\ufef8\000\160\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\001\002\000\076\034\323\110\u02d0\126\313\127\332" +
    "\130\302\147\306\151\303\152\324\153\304\154\315\155" +
    "\325\156\331\157\317\160\277\161\314\162\330\163\327" +
    "\164\310\165\326\166\322\167\316\170\333\171\311\172" +
    "\321\173\307\174\320\175\301\200\305\243\312\244\300" +
    "\001\002\000\002\001\ufef7\000\160\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\001\002\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\ufe16" +
    "\000\014\011\174\013\064\107\362\117\060\232\107\001" +
    "\002\000\004\227\u02d5\001\ufe32\000\162\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\242\u01c0\001\uff05\000\004\230\u02d7\001\002\000" +
    "\002\001\ufe24\000\004\214\u02d9\001\002\000\002\001\ufe27" +
    "\000\076\034\323\110\u02db\126\313\127\332\130\302\147" +
    "\306\151\303\152\324\153\304\154\315\155\325\156\331" +
    "\157\317\160\277\161\314\162\330\163\327\164\310\165" +
    "\326\166\322\167\316\170\333\171\311\172\321\173\307" +
    "\174\320\175\301\200\305\243\312\244\300\001\002\000" +
    "\002\001\ufe25\000\006\003\u02e0\107\u02df\001\002\000\002" +
    "\001\uffad\000\010\003\u02e0\107\u02df\150\u02e3\001\002\000" +
    "\002\001\uffb7\000\002\001\uffa1\000\002\001\uffa3\000\002" +
    "\001\uffac\000\002\001\uffa4\000\256\003\125\004\157\005" +
    "\171\006\116\007\010\010\066\011\036\013\064\015\101" +
    "\020\140\021\022\022\131\023\126\024\047\026\035\030" +
    "\110\032\170\035\112\037\142\043\057\044\130\045\075" +
    "\046\117\047\147\050\151\051\012\052\044\053\042\055" +
    "\166\057\027\060\011\062\103\063\162\064\033\065\061" +
    "\066\034\067\155\074\163\075\014\076\021\077\050\100" +
    "\052\101\143\102\006\103\037\107\071\110\u02e5\112\105" +
    "\113\137\114\043\115\073\116\025\117\060\120\031\121" +
    "\077\122\053\123\134\124\115\131\070\150\007\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\045\222\065\223\017\227\164\232" +
    "\107\233\122\234\062\235\104\237\127\241\124\001\002" +
    "\000\002\001\uffa2\000\002\001\uffb8\000\002\001\uffaa\000" +
    "\016\013\u0286\016\u02a0\017\u029f\105\u0288\106\u0287\235\u02e9" +
    "\001\002\000\002\001\ufe3c\000\030\011\174\013\064\020" +
    "\140\075\014\112\176\115\073\117\060\213\054\221\350" +
    "\227\u0154\232\107\001\002\000\002\001\uff61\000\006\125" +
    "\u02ef\230\u02ee\001\002\000\006\125\uff5f\230\uff5f\001\ufe31" +
    "\000\004\150\u02f1\001\002\000\030\011\174\013\064\020" +
    "\140\075\014\112\176\115\073\117\060\213\054\221\350" +
    "\227\u0154\232\107\001\002\000\002\001\uff60\000\002\001" +
    "\uff72\000\004\227\u02f5\001\ufe4c\000\004\227\u02f5\001\ufe4c" +
    "\000\004\070\u02f9\001\uff45\000\162\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\242\u01c0\001\uff05\000\004\230\u02f7\001\002\000\002" +
    "\001\ufe4b\000\002\001\ufeb0\000\014\003\u0304\011\174\112" +
    "\210\115\214\117\060\001\002\000\004\003\u02fc\001\uff4c" +
    "\000\004\071\u02fe\001\uff3f\000\002\001\uff4d\000\002\001" +
    "\ufeb3\000\014\003\u0222\011\174\112\210\115\214\117\060" +
    "\001\002\000\004\125\u0223\001\uff3e\000\004\107\u0301\001" +
    "\002\000\002\001\ufef1\000\040\003\u0237\047\u022e\057\u0239" +
    "\061\u023c\066\034\067\155\110\u0236\116\u0235\221\u023a\222" +
    "\u022d\223\u022f\224\u0233\225\u022c\226\u0238\237\127\001\ufeca" +
    "\000\002\001\ufeb2\000\002\001\uff43\000\002\001\uff44\000" +
    "\002\001\ufeb1\000\002\001\ufe71\000\074\034\323\126\313" +
    "\127\332\130\302\147\306\151\303\152\324\153\304\154" +
    "\315\155\325\156\331\157\317\160\277\161\314\162\330" +
    "\163\327\164\310\165\326\166\322\167\316\170\333\171" +
    "\311\172\321\173\307\174\320\175\301\200\305\243\312" +
    "\244\300\001\ufded\000\002\001\ufe6f\000\004\150\u030b\001" +
    "\002\000\002\001\uff6b\000\014\034\323\172\321\173\307" +
    "\174\320\175\301\001\ufe89\000\002\001\uffb4\000\002\001" +
    "\uff90\000\254\003\125\004\157\005\171\006\116\007\010" +
    "\010\066\011\036\013\064\015\101\020\140\021\022\022" +
    "\131\023\126\024\047\026\035\030\110\032\170\035\112" +
    "\037\142\043\057\044\130\045\075\046\117\050\151\051" +
    "\012\052\044\053\042\055\166\057\235\060\011\062\103" +
    "\063\162\064\033\065\236\066\034\067\155\074\163\075" +
    "\014\076\021\077\050\100\052\101\143\102\006\103\037" +
    "\107\071\110\u0310\112\176\113\137\114\043\115\073\116" +
    "\025\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\150\007\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\045\222" +
    "\065\223\017\227\164\232\107\233\122\234\062\235\104" +
    "\237\127\241\124\001\002\000\002\001\uff86\000\066\034" +
    "\323\147\306\151\303\152\324\153\304\154\315\155\325" +
    "\156\331\157\317\160\277\161\314\162\330\163\327\164" +
    "\310\165\326\166\322\167\316\170\333\171\311\172\321" +
    "\173\307\174\320\175\301\200\305\243\312\244\300\001" +
    "\ufe6a\000\216\004\u01b1\005\u01ba\011\174\013\064\022\u01a7" +
    "\023\u01a5\024\u0183\025\u0187\026\u017e\027\u019a\030\u0197\031" +
    "\u0184\032\u01b9\033\u01a0\034\u0186\035\u0199\036\u017f\037\u01ab" +
    "\040\u0196\041\u0173\042\u0189\043\u0188\044\u01a6\045\u0191\046" +
    "\u019c\047\u01ac\050\u01ae\051\u0175\053\u0180\054\u01b6\055\u01b8" +
    "\056\u018a\057\u017a\060\u0174\061\u01b7\062\u0193\063\u01b4\064" +
    "\u017c\066\u017d\067\u01b0\070\u0179\071\u0198\074\u01b5\075\u0176" +
    "\107\u018d\112\u0194\117\060\120\u017b\121\u0190\122\u0185\123" +
    "\u01a9\124\u019b\126\u01b2\127\u01b3\130\u01af\131\u018c\215\u0192" +
    "\216\u018e\217\u018f\220\u01a3\221\u0182\222\u018b\223\u0177\224" +
    "\u019f\225\u019e\226\u01ad\232\107\236\u019d\237\u01a4\240\u0178" +
    "\001\002\000\004\227\ufe14\001\ufe21\000\004\227\u0316\001" +
    "\002\000\004\227\ufe12\001\ufe1f\000\162\004\157\006\116" +
    "\007\010\010\066\011\174\013\064\020\140\035\112\046" +
    "\177\051\012\052\044\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\112" +
    "\176\113\137\114\043\115\073\117\060\120\031\121\077" +
    "\122\053\123\134\124\115\131\070\170\114\171\074\176" +
    "\160\177\016\201\055\202\165\203\030\204\144\205\041" +
    "\206\136\207\100\210\146\211\076\212\040\213\054\215" +
    "\102\221\175\227\164\232\107\233\122\234\062\235\104" +
    "\241\124\242\u01c0\001\uff05\000\004\230\u0318\001\002\000" +
    "\002\001\ufe5c\000\004\234\u031c\001\002\000\014\013\u0286" +
    "\016\u02a0\017\u029f\105\u0288\106\u0287\001\ufe4d\000\010\013" +
    "\u0286\105\u0288\106\u0287\001\ufe4e\000\002\001\ufe6b\000\004" +
    "\230\u031e\001\002\000\004\150\u031f\001\002\000\002\001" +
    "\uffae\000\002\001\uff7f\000\076\034\323\126\313\127\332" +
    "\130\302\147\306\150\u0322\151\303\152\324\153\304\154" +
    "\315\155\325\156\331\157\317\160\277\161\314\162\330" +
    "\163\327\164\310\165\326\166\322\167\316\170\333\171" +
    "\311\172\321\173\307\174\320\175\301\200\305\243\312" +
    "\244\300\001\002\000\002\001\uff7e\000\012\072\ufe31\107" +
    "\ufe31\111\ufe31\213\ufe31\001\ufe9e\000\030\011\174\013\064" +
    "\020\140\075\014\112\176\115\073\117\060\213\054\221" +
    "\350\227\u0154\232\107\001\002\000\076\034\323\073\u0332" +
    "\126\313\127\332\130\302\147\306\151\303\152\324\153" +
    "\304\154\315\155\325\156\331\157\317\160\277\161\314" +
    "\162\330\163\327\164\310\165\326\166\322\167\316\170" +
    "\333\171\311\172\321\173\307\174\320\175\301\200\305" +
    "\243\312\244\300\001\ufe04\000\004\125\u0329\001\ufe38\000" +
    "\004\214\u0328\001\002\000\002\001\ufe2a\000\162\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\155\u032b\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\ufe37\000\002\001\ufe08\000" +
    "\030\011\174\013\064\020\140\075\014\112\176\115\073" +
    "\117\060\213\054\221\350\227\u0154\232\107\001\002\000" +
    "\076\034\323\073\u032d\126\313\127\332\130\302\147\306" +
    "\151\303\152\324\153\304\154\315\155\325\156\331\157" +
    "\317\160\277\161\314\162\330\163\327\164\310\165\326" +
    "\166\322\167\316\170\333\171\311\172\321\173\307\174" +
    "\320\175\301\200\305\243\312\244\300\001\ufe06\000\162" +
    "\004\157\006\116\007\010\010\066\011\174\013\064\020" +
    "\140\035\112\046\177\051\012\052\044\063\162\064\033" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\112\176\113\137\114\043\115\073\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\155" +
    "\u032e\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\030\011" +
    "\174\013\064\020\140\075\014\112\176\115\073\117\060" +
    "\213\054\221\350\227\u0154\232\107\001\002\000\074\034" +
    "\323\126\313\127\332\130\302\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\243\312\244\300\001\ufe07\000\010\125\ufe03\214\ufe03" +
    "\230\ufe03\001\ufe31\000\010\125\ufe02\214\ufe02\230\ufe02\001" +
    "\ufe31\000\162\004\157\006\116\007\010\010\066\011\174" +
    "\013\064\020\140\035\112\046\177\051\012\052\044\063" +
    "\162\064\033\074\163\075\014\076\021\077\050\100\052" +
    "\101\143\102\006\103\037\112\176\113\137\114\043\115" +
    "\073\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\155\u0333\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\002" +
    "\000\030\011\174\013\064\020\140\075\014\112\176\115" +
    "\073\117\060\213\054\221\350\227\u0154\232\107\001\002" +
    "\000\074\034\323\126\313\127\332\130\302\147\306\151" +
    "\303\152\324\153\304\154\315\155\325\156\331\157\317" +
    "\160\277\161\314\162\330\163\327\164\310\165\326\166" +
    "\322\167\316\170\333\171\311\172\321\173\307\174\320" +
    "\175\301\200\305\243\312\244\300\001\ufe05\000\010\125" +
    "\ufe01\214\ufe01\230\ufe01\001\ufe31\000\010\125\ufe00\214\ufe00" +
    "\230\ufe00\001\ufe31\000\160\004\157\006\116\007\010\010" +
    "\066\011\174\013\064\020\140\035\112\046\177\051\012" +
    "\052\044\063\162\064\033\074\163\075\014\076\021\077" +
    "\050\100\052\101\143\102\006\103\037\112\176\113\137" +
    "\114\043\115\073\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\170\114\171\074\176\160\177\016" +
    "\201\055\202\165\203\030\204\144\205\041\206\136\207" +
    "\100\210\146\211\076\212\040\213\054\215\102\221\175" +
    "\227\164\232\107\233\122\234\062\235\104\241\124\001" +
    "\002\000\076\034\323\126\313\127\332\130\302\147\306" +
    "\151\303\152\324\153\304\154\315\155\325\156\331\157" +
    "\317\160\277\161\314\162\330\163\327\164\310\165\326" +
    "\166\322\167\316\170\333\171\311\172\321\173\307\174" +
    "\320\175\301\200\305\230\u0339\243\312\244\300\001\002" +
    "\000\002\001\ufdec\000\002\001\uff52\000\004\070\u02f9\001" +
    "\uff45\000\004\003\u02fc\001\uff4c\000\004\071\u02fe\001\uff3f" +
    "\000\002\001\uff51\000\004\107\u0340\001\002\000\002\001" +
    "\ufef1\000\040\003\u0237\047\u022e\057\u0239\061\u023c\066\034" +
    "\067\155\110\u0236\116\u0235\221\u023a\222\u022d\223\u022f\224" +
    "\u0233\225\u022c\226\u0238\237\127\001\ufeca\000\002\001\uff50" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\076\034" +
    "\323\126\313\127\332\130\302\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\230\u0345\243\312\244\300\001\002\000\240\003\125" +
    "\004\157\005\171\006\116\007\010\010\066\011\036\013" +
    "\064\015\101\020\140\021\022\022\131\023\126\024\047" +
    "\026\035\030\110\032\170\035\112\037\142\043\057\044" +
    "\130\045\075\046\177\050\151\051\012\052\044\053\042" +
    "\055\166\057\235\060\011\062\103\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\107\071\112\176\113\137\114\043\115\073\116" +
    "\025\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\150\007\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\045\227" +
    "\164\231\u0346\232\107\233\122\234\062\235\104\241\124" +
    "\001\002\000\002\001\uff90\000\002\001\uff83\000\002\001" +
    "\uff20\000\254\003\125\004\157\005\171\006\116\007\010" +
    "\010\066\011\036\013\064\015\101\020\140\021\022\022" +
    "\131\023\126\024\047\025\u034a\026\035\030\110\032\170" +
    "\035\112\037\142\043\057\044\130\045\075\046\117\050" +
    "\151\051\012\052\044\053\042\055\166\057\235\060\011" +
    "\062\103\063\162\064\033\065\236\066\034\067\155\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\107\071\112\176\113\137\114\043\115\073\116" +
    "\025\117\060\120\031\121\077\122\053\123\134\124\115" +
    "\131\070\150\007\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\045\222" +
    "\065\223\017\227\164\232\107\233\122\234\062\235\104" +
    "\237\127\241\124\001\002\000\004\150\u034b\001\002\000" +
    "\002\001\uff1f\000\004\132\u0352\001\ufef4\000\006\125\u034f" +
    "\150\u0350\001\002\000\002\001\ufef6\000\004\013\u034c\001" +
    "\002\000\002\001\uff77\000\002\001\ufef5\000\160\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\170\114\171" +
    "\074\176\160\177\016\201\055\202\165\203\030\204\144" +
    "\205\041\206\136\207\100\210\146\211\076\212\040\213" +
    "\054\215\102\221\175\227\164\232\107\233\122\234\062" +
    "\235\104\241\124\001\002\000\074\034\323\126\313\127" +
    "\332\130\302\147\306\151\303\152\324\153\304\154\315" +
    "\155\325\156\331\157\317\160\277\161\314\162\330\163" +
    "\327\164\310\165\326\166\322\167\316\170\333\171\311" +
    "\172\321\173\307\174\320\175\301\200\305\243\312\244" +
    "\300\001\ufef3\000\050\034\323\156\331\157\317\160\277" +
    "\161\314\162\330\163\327\164\310\165\326\166\322\167" +
    "\316\170\333\171\311\172\321\173\307\174\320\175\301" +
    "\200\305\243\312\001\ufde2\000\002\001\uff90\000\254\003" +
    "\125\004\157\005\171\006\116\007\010\010\066\011\036" +
    "\013\064\015\101\020\140\021\022\022\131\023\126\024" +
    "\047\026\035\030\110\032\170\035\112\037\142\043\057" +
    "\044\130\045\075\046\117\050\151\051\012\052\044\053" +
    "\042\055\166\057\235\060\011\062\103\063\162\064\033" +
    "\065\236\066\034\067\155\074\163\075\014\076\021\077" +
    "\050\100\052\101\143\102\006\103\037\107\071\110\u0357" +
    "\112\176\113\137\114\043\115\073\116\025\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\150\007" +
    "\170\114\171\074\176\160\177\016\201\055\202\165\203" +
    "\030\204\144\205\041\206\136\207\100\210\146\211\076" +
    "\212\040\213\054\215\102\221\045\222\065\223\017\227" +
    "\164\232\107\233\122\234\062\235\104\237\127\241\124" +
    "\001\002\000\004\054\u0358\001\uff68\000\004\227\u0363\001" +
    "\002\000\002\001\uff67\000\004\056\u035f\001\uff63\000\004" +
    "\054\u0358\001\uff69\000\002\001\uff66\000\002\001\uff64\000" +
    "\002\001\uff6d\000\004\107\u0360\001\002\000\002\001\uff90" +
    "\000\254\003\125\004\157\005\171\006\116\007\010\010" +
    "\066\011\036\013\064\015\101\020\140\021\022\022\131" +
    "\023\126\024\047\026\035\030\110\032\170\035\112\037" +
    "\142\043\057\044\130\045\075\046\117\050\151\051\012" +
    "\052\044\053\042\055\166\057\235\060\011\062\103\063" +
    "\162\064\033\065\236\066\034\067\155\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\107" +
    "\071\110\u0362\112\176\113\137\114\043\115\073\116\025" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\150\007\170\114\171\074\176\160\177\016\201\055" +
    "\202\165\203\030\204\144\205\041\206\136\207\100\210" +
    "\146\211\076\212\040\213\054\215\102\221\045\222\065" +
    "\223\017\227\164\232\107\233\122\234\062\235\104\237" +
    "\127\241\124\001\002\000\002\001\uff62\000\012\011\174" +
    "\112\210\115\214\117\060\001\002\000\004\013\u0365\001" +
    "\002\000\004\230\u0366\001\002\000\004\107\u0367\001\002" +
    "\000\002\001\uff90\000\254\003\125\004\157\005\171\006" +
    "\116\007\010\010\066\011\036\013\064\015\101\020\140" +
    "\021\022\022\131\023\126\024\047\026\035\030\110\032" +
    "\170\035\112\037\142\043\057\044\130\045\075\046\117" +
    "\050\151\051\012\052\044\053\042\055\166\057\235\060" +
    "\011\062\103\063\162\064\033\065\236\066\034\067\155" +
    "\074\163\075\014\076\021\077\050\100\052\101\143\102" +
    "\006\103\037\107\071\110\u0369\112\176\113\137\114\043" +
    "\115\073\116\025\117\060\120\031\121\077\122\053\123" +
    "\134\124\115\131\070\150\007\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\045\222\065\223\017\227\164\232\107\233\122\234" +
    "\062\235\104\237\127\241\124\001\002\000\002\001\uff65" +
    "\000\002\001\ufe73\000\002\001\ufe6d\000\016\013\u0286\016" +
    "\u02a0\017\u029f\104\u0370\105\u0288\106\u0287\001\002\000\002" +
    "\001\ufe3e\000\012\013\u0286\104\u036f\105\u0288\106\u0287\001" +
    "\002\000\002\001\ufe3f\000\002\001\ufe3b\000\002\001\uff8a" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\ufeb5\000\074\034" +
    "\323\126\313\127\332\130\302\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\243\312\244\300\001\ufebb\000\004\150\u0378\001\002" +
    "\000\004\125\u0376\001\ufeb4\000\160\004\157\006\116\007" +
    "\010\010\066\011\174\013\064\020\140\035\112\046\177" +
    "\051\012\052\044\063\162\064\033\074\163\075\014\076" +
    "\021\077\050\100\052\101\143\102\006\103\037\112\176" +
    "\113\137\114\043\115\073\117\060\120\031\121\077\122" +
    "\053\123\134\124\115\131\070\170\114\171\074\176\160" +
    "\177\016\201\055\202\165\203\030\204\144\205\041\206" +
    "\136\207\100\210\146\211\076\212\040\213\054\215\102" +
    "\221\175\227\164\232\107\233\122\234\062\235\104\241" +
    "\124\001\002\000\074\034\323\126\313\127\332\130\302" +
    "\147\306\151\303\152\324\153\304\154\315\155\325\156" +
    "\331\157\317\160\277\161\314\162\330\163\327\164\310" +
    "\165\326\166\322\167\316\170\333\171\311\172\321\173" +
    "\307\174\320\175\301\200\305\243\312\244\300\001\ufebc" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\ufeb5\000\004\150" +
    "\u037a\001\002\000\160\004\157\006\116\007\010\010\066" +
    "\011\174\013\064\020\140\035\112\046\177\051\012\052" +
    "\044\063\162\064\033\074\163\075\014\076\021\077\050" +
    "\100\052\101\143\102\006\103\037\112\176\113\137\114" +
    "\043\115\073\117\060\120\031\121\077\122\053\123\134" +
    "\124\115\131\070\170\114\171\074\176\160\177\016\201" +
    "\055\202\165\203\030\204\144\205\041\206\136\207\100" +
    "\210\146\211\076\212\040\213\054\215\102\221\175\227" +
    "\164\232\107\233\122\234\062\235\104\241\124\001\ufeb5" +
    "\000\004\230\u037c\001\002\000\240\003\125\004\157\005" +
    "\171\006\116\007\010\010\066\011\036\013\064\015\101" +
    "\020\140\021\022\022\131\023\126\024\047\026\035\030" +
    "\110\032\170\035\112\037\142\043\057\044\130\045\075" +
    "\046\177\050\151\051\012\052\044\053\042\055\166\057" +
    "\235\060\011\062\103\063\162\064\033\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\107" +
    "\071\112\176\113\137\114\043\115\073\116\025\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\150" +
    "\007\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\045\227\164\231\u037e" +
    "\232\107\233\122\234\062\235\104\241\124\001\002\000" +
    "\002\001\uff81\000\002\001\uff90\000\002\001\uff31\000\254" +
    "\003\125\004\157\005\171\006\116\007\010\010\066\011" +
    "\036\013\064\015\101\020\140\021\022\022\131\023\126" +
    "\024\047\026\035\027\u0381\030\110\032\170\035\112\037" +
    "\142\043\057\044\130\045\075\046\117\050\151\051\012" +
    "\052\044\053\042\055\166\057\235\060\011\062\103\063" +
    "\162\064\033\065\236\066\034\067\155\074\163\075\014" +
    "\076\021\077\050\100\052\101\143\102\006\103\037\107" +
    "\071\112\176\113\137\114\043\115\073\116\025\117\060" +
    "\120\031\121\077\122\053\123\134\124\115\131\070\150" +
    "\007\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\045\222\065\223\017" +
    "\227\164\232\107\233\122\234\062\235\104\237\127\241" +
    "\124\001\002\000\004\150\u0382\001\002\000\002\001\uff30" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\076\034" +
    "\323\126\313\127\332\130\302\147\306\151\303\152\324" +
    "\153\304\154\315\155\325\156\331\157\317\160\277\161" +
    "\314\162\330\163\327\164\310\165\326\166\322\167\316" +
    "\170\333\171\311\172\321\173\307\174\320\175\301\200" +
    "\305\230\u0385\243\312\244\300\001\002\000\002\001\ufdef" +
    "\000\160\004\157\006\116\007\010\010\066\011\174\013" +
    "\064\020\140\035\112\046\177\051\012\052\044\063\162" +
    "\064\033\074\163\075\014\076\021\077\050\100\052\101" +
    "\143\102\006\103\037\112\176\113\137\114\043\115\073" +
    "\117\060\120\031\121\077\122\053\123\134\124\115\131" +
    "\070\170\114\171\074\176\160\177\016\201\055\202\165" +
    "\203\030\204\144\205\041\206\136\207\100\210\146\211" +
    "\076\212\040\213\054\215\102\221\175\227\164\232\107" +
    "\233\122\234\062\235\104\241\124\001\002\000\066\034" +
    "\323\147\306\151\303\152\324\153\304\154\315\155\325" +
    "\156\331\157\317\160\277\161\314\162\330\163\327\164" +
    "\310\165\326\166\322\167\316\170\333\171\311\172\321" +
    "\173\307\174\320\175\301\200\305\243\312\244\300\001" +
    "\ufeaf\000\074\034\323\126\313\127\332\130\302\147\306" +
    "\151\303\152\324\153\304\154\315\155\325\156\331\157" +
    "\317\160\277\161\314\162\330\163\327\164\310\165\326" +
    "\166\322\167\316\170\333\171\311\172\321\173\307\174" +
    "\320\175\301\200\305\243\312\244\300\001\ufdee\000\002" +
    "\001\ufe75\000\004\036\u03ad\001\uff96\000\004\150\u03ac\001" +
    "\002\000\004\107\u03a3\001\002\000\002\001\uffa0\000\004" +
    "\115\u03a2\001\uffbb\000\010\011\174\115\u0392\117\060\001" +
    "\002\000\002\001\uff97\000\002\001\uff9f\000\006\011\174" +
    "\117\060\001\002\000\006\125\u0394\150\u0395\001\002\000" +
    "\010\011\174\115\u0392\117\060\001\002\000\002\001\uffa7" +
    "\000\002\001\uff98\000\004\036\u0398\001\uff94\000\004\011" +
    "\u0399\001\002\000\002\001\uff93\000\004\107\u039f\001\002" +
    "\000\004\150\u039e\001\002\000\006\125\u0394\150\u039d\001" +
    "\002\000\002\001\uffa6\000\002\001\uffa8\000\010\011\174" +
    "\115\u0392\117\060\001\002\000\006\110\u03a1\125\u0394\001" +
    "\002\000\002\001\uff9e\000\006\011\174\117\060\001\uff92" +
    "\000\014\011\174\046\u038d\047\u0391\115\u0392\117\060\001" +
    "\002\000\006\110\u03a9\125\u03aa\001\002\000\010\011\174" +
    "\115\u0392\117\060\001\002\000\002\001\uff9a\000\002\001" +
    "\uff9b\000\002\001\uff99\000\002\001\uff9d\000\014\011\174" +
    "\046\u038d\047\u0391\115\u0392\117\060\001\002\000\002\001" +
    "\uff9c\000\002\001\uffa9\000\004\011\u03ae\001\002\000\002" +
    "\001\uff95\000\006\125\u0211\150\u03b0\001\002\000\002\001" +
    "\uff6a\000\002\001\uff74\000\002\001\ufe87\000\162\004\157" +
    "\006\116\007\010\010\066\011\174\013\064\020\140\035" +
    "\112\046\177\051\012\052\044\063\162\064\033\074\163" +
    "\075\014\076\021\077\050\100\052\101\143\102\006\103" +
    "\037\112\176\113\137\114\043\115\073\117\060\120\031" +
    "\121\077\122\053\123\134\124\115\131\070\155\u0324\170" +
    "\114\171\074\176\160\177\016\201\055\202\165\203\030" +
    "\204\144\205\041\206\136\207\100\210\146\211\076\212" +
    "\040\213\054\215\102\221\175\227\164\232\107\233\122" +
    "\234\062\235\104\241\124\001\ufe09\000\004\230\u03b5\001" +
    "\002\000\002\001\ufe2b\000\052\034\323\073\u03b7\156\331" +
    "\157\317\160\277\161\314\162\330\163\327\164\310\165" +
    "\326\166\322\167\316\170\333\171\311\172\321\173\307" +
    "\174\320\175\301\200\305\243\312\001\ufde4\000\160\004" +
    "\157\006\116\007\010\010\066\011\174\013\064\020\140" +
    "\035\112\046\177\051\012\052\044\063\162\064\033\074" +
    "\163\075\014\076\021\077\050\100\052\101\143\102\006" +
    "\103\037\112\176\113\137\114\043\115\073\117\060\120" +
    "\031\121\077\122\053\123\134\124\115\131\070\170\114" +
    "\171\074\176\160\177\016\201\055\202\165\203\030\204" +
    "\144\205\041\206\136\207\100\210\146\211\076\212\040" +
    "\213\054\215\102\221\175\227\164\232\107\233\122\234" +
    "\062\235\104\241\124\001\002\000\050\034\323\156\331" +
    "\157\317\160\277\161\314\162\330\163\327\164\310\165" +
    "\326\166\322\167\316\170\333\171\311\172\321\173\307" +
    "\174\320\175\301\200\305\243\312\001\ufde3\000\002\001" +
    "\ufefa\000\006\125\u03bb\150\u03bc\001\002\000\006\013\064" +
    "\232\107\001\002\000\002\001\uff78\000\002\001\ufefb\000" +
    "\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03bc\000\006\002\003\020\004\001\001\000\002\001" +
    "\001\000\100\006\155\007\153\022\166\023\160\026\120" +
    "\061\131\073\151\074\045\077\014\101\017\102\152\116" +
    "\071\117\134\120\122\122\062\123\110\140\112\141\132" +
    "\142\025\143\117\144\105\145\140\146\055\152\144\153" +
    "\023\154\050\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\060\u03b9\061\u03b8\001\001\000\056\006\155" +
    "\007\153\061\131\073\151\074\045\077\014\101\u03b5\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u03b1\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\006\155\007\153\061\131\067\u03ae\073\151\074\045" +
    "\077\014\101\u020e\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\006\u0389\007\u038d\010\u038f\011\u038b\012\u038a\016" +
    "\u0392\017\u038e\031\246\117\134\001\001\000\056\006\155" +
    "\007\153\061\131\073\151\074\045\077\014\101\u0388\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\056\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\u0387\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\112\u036b\114" +
    "\u0284\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u036a\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u0369\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u0353\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\006\062\u034c\063\u034d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\u0324\102\152\110\u0326\111" +
    "\u0325\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\040\006\155\007\153\061\131" +
    "\074\045\102\152\117\134\122\062\123\110\142\u0322\143" +
    "\117\144\105\145\140\146\u0151\162\u0150\163\022\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u0320\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\112\u0319\113" +
    "\u0318\114\u0284\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u0310\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\004\222\u030d\001" +
    "\001\000\002\001\001\000\010\006\u030c\007\153\117\134" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\u030b\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\002" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\u0308\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\056" +
    "\006\155\007\153\061\131\073\151\074\045\077\014\101" +
    "\u0307\102\152\116\071\117\134\122\062\123\110\142\025" +
    "\143\117\144\105\145\140\146\055\162\066\163\022\210" +
    "\012\214\031\217\147\001\001\000\056\006\155\007\153" +
    "\061\131\073\151\074\045\077\014\101\u0306\102\152\116" +
    "\071\117\134\122\062\123\110\142\025\143\117\144\105" +
    "\145\140\146\055\162\066\163\022\210\012\214\031\217" +
    "\147\001\001\000\002\001\001\000\022\006\155\007\153" +
    "\061\350\117\134\122\346\123\344\164\345\166\u02f1\001" +
    "\001\000\002\001\001\000\006\112\u02e7\114\u0284\001\001" +
    "\000\012\006\u02dc\007\153\117\134\221\u02db\001\001\000" +
    "\002\001\001\000\004\061\u02cc\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u02b0\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u02af\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\056\006\155\007\153\061\131\073\151\074\045\077" +
    "\014\101\u02ae\102\152\116\071\117\134\122\062\123\110" +
    "\142\025\143\117\144\105\145\140\146\055\162\066\163" +
    "\022\210\012\214\031\217\147\001\001\000\002\001\001" +
    "\000\004\066\u02a0\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\112\u0283\114\u0284\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\006\155\007" +
    "\153\023\u0216\026\120\061\131\073\151\074\045\077\014" +
    "\101\017\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u0214\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\060\006\155\007" +
    "\153\061\131\067\u020f\073\151\074\045\077\014\101\u020e" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\u020d\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\002\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\u020c\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u01ed\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u01ec\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\006\037\u01ea\117\u0140\001\001\000\002\001\001\000" +
    "\056\006\155\007\153\061\131\073\u01c9\074\045\077\014" +
    "\101\u01c7\102\152\116\071\117\134\122\062\123\110\142" +
    "\u01c8\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\075\u016b\001\001\000\056\006\155\007" +
    "\153\061\131\073\151\074\045\077\014\101\u0169\102\152" +
    "\116\071\117\134\122\062\123\110\142\025\143\117\144" +
    "\105\145\140\146\055\162\066\163\022\210\012\214\031" +
    "\217\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u0159\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\040\006\155\007\153\061\131\074\045\102\152\117\134" +
    "\122\062\123\110\142\u0152\143\117\144\105\145\140\146" +
    "\u0151\162\u0150\163\022\001\001\000\056\006\155\007\153" +
    "\061\131\073\151\074\045\077\014\101\u014e\102\152\116" +
    "\071\117\134\122\062\123\110\142\025\143\117\144\105" +
    "\145\140\146\055\162\066\163\022\210\012\214\031\217" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\172\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\006\203\007\153\050\214\054\205\055" +
    "\212\117\134\126\211\160\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\264\007\153\117" +
    "\134\001\001\000\002\001\001\000\004\051\217\001\001" +
    "\000\002\001\001\000\004\125\220\001\001\000\004\235" +
    "\226\001\001\000\014\006\155\007\153\117\134\123\222" +
    "\124\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\171\231\001\001" +
    "\000\002\001\001\000\004\024\232\001\001\000\002\001" +
    "\001\000\100\006\155\007\153\023\241\025\233\026\120" +
    "\061\131\073\151\074\045\077\014\101\017\102\152\116" +
    "\071\117\134\120\122\122\062\123\110\140\236\141\240" +
    "\142\025\143\117\144\105\145\140\146\055\152\144\153" +
    "\023\154\050\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\002\001\001\000\004\031\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\256\053\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\266\007\153\117\134\001\001\000\002\001\001\000\016" +
    "\006\203\007\153\055\270\117\134\126\211\160\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\275\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u0112\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\056\006\155\007\153\061\131\073\151\074\045\077" +
    "\014\101\u0111\102\152\116\071\117\134\122\062\123\110" +
    "\142\025\143\117\144\105\145\140\146\055\162\066\163" +
    "\022\210\012\214\031\217\147\001\001\000\056\006\155" +
    "\007\153\061\131\073\151\074\045\077\014\101\u0110\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\056\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\u010f\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\u010e\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\056\006" +
    "\155\007\153\061\131\073\151\074\045\077\014\101\u010d" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\056\006\155\007\153\061" +
    "\131\073\151\074\045\077\014\101\u010c\102\152\116\071" +
    "\117\134\122\062\123\110\142\025\143\117\144\105\145" +
    "\140\146\055\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\u0107\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\056" +
    "\006\155\007\153\061\131\073\151\074\045\077\014\101" +
    "\u0106\102\152\116\071\117\134\122\062\123\110\142\025" +
    "\143\117\144\105\145\140\146\055\162\066\163\022\210" +
    "\012\214\031\217\147\001\001\000\056\006\155\007\153" +
    "\061\131\073\151\074\045\077\014\101\u0105\102\152\116" +
    "\071\117\134\122\062\123\110\142\025\143\117\144\105" +
    "\145\140\146\055\162\066\163\022\210\012\214\031\217" +
    "\147\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u0104\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u0103\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\056\006\155\007" +
    "\153\061\131\073\151\074\045\077\014\101\u0102\102\152" +
    "\116\071\117\134\122\062\123\110\142\025\143\117\144" +
    "\105\145\140\146\055\162\066\163\022\210\012\214\031" +
    "\217\147\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u0101\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\056\006\155\007\153\061\131\073\151\074\045\077" +
    "\014\101\u0100\102\152\116\071\117\134\122\062\123\110" +
    "\142\025\143\117\144\105\145\140\146\055\162\066\163" +
    "\022\210\012\214\031\217\147\001\001\000\056\006\155" +
    "\007\153\061\131\073\151\074\045\077\014\101\377\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\056\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\376\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\375\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\056\006" +
    "\155\007\153\061\131\073\151\074\045\077\014\101\374" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\056\006\155\007\153\061" +
    "\131\073\151\074\045\077\014\101\373\102\152\116\071" +
    "\117\134\122\062\123\110\142\025\143\117\144\105\145" +
    "\140\146\055\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\022\006\155\007\153\061\350\117\134\122" +
    "\346\123\344\164\345\166\343\001\001\000\056\006\155" +
    "\007\153\061\131\073\151\074\045\077\014\101\342\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\056\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\341\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\340\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\056\006" +
    "\155\007\153\061\131\073\151\074\045\077\014\101\337" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\056\006\155\007\153\061" +
    "\131\073\151\074\045\077\014\101\336\102\152\116\071" +
    "\117\134\122\062\123\110\142\025\143\117\144\105\145" +
    "\140\146\055\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\335\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\056" +
    "\006\155\007\153\061\131\073\151\074\045\077\014\101" +
    "\334\102\152\116\071\117\134\122\062\123\110\142\025" +
    "\143\117\144\105\145\140\146\055\162\066\163\022\210" +
    "\012\214\031\217\147\001\001\000\056\006\155\007\153" +
    "\061\131\073\151\074\045\077\014\101\333\102\152\116" +
    "\071\117\134\122\062\123\110\142\025\143\117\144\105" +
    "\145\140\146\055\162\066\163\022\210\012\214\031\217" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\352\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\371\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\060\006\155\007\153\061\131\073\151\074\045\077" +
    "\014\101\367\102\152\103\366\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\004" +
    "\061\365\001\001\000\010\061\357\105\360\117\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\155" +
    "\007\153\061\131\073\151\074\045\077\014\101\363\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\u0109\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\002" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\u010b\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u0117\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\u011a\007\153" +
    "\117\134\001\001\000\002\001\001\000\004\066\u011c\001" +
    "\001\000\002\001\001\000\022\006\203\007\153\050\u011e" +
    "\054\205\055\212\117\134\126\211\160\204\001\001\000" +
    "\002\001\001\000\004\051\u0120\001\001\000\004\125\u0121" +
    "\001\001\000\004\236\u0122\001\001\000\004\171\u0123\001" +
    "\001\000\002\001\001\000\062\006\155\007\153\023\u0126" +
    "\026\120\061\131\073\151\074\045\077\014\101\017\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\004\024\u0130\001\001\000\004" +
    "\044\u0127\001\001\000\004\046\u0128\001\001\000\002\001" +
    "\001\000\062\006\155\007\153\023\u012f\026\120\061\131" +
    "\073\151\074\045\077\014\101\017\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\002\001\001\000\056\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\u012c\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\002\001\001\000\062\006\155\007\153\023\u012e" +
    "\026\120\061\131\073\151\074\045\077\014\101\017\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\006\155\007\153\023\241\025\233\026\120\045" +
    "\u0131\061\131\073\151\074\045\077\014\101\017\102\152" +
    "\116\071\117\134\120\122\122\062\123\110\140\236\141" +
    "\240\142\025\143\117\144\105\145\140\146\055\152\144" +
    "\153\023\154\050\162\066\163\022\210\012\214\031\217" +
    "\147\001\001\000\004\047\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\155\007" +
    "\153\061\131\073\151\074\045\077\014\101\u0136\102\152" +
    "\116\071\117\134\122\062\123\110\142\025\143\117\144" +
    "\105\145\140\146\055\162\066\163\022\210\012\214\031" +
    "\217\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\u0139\001\001\000\100\006\155\007\153\023\241" +
    "\025\233\026\120\061\131\073\151\074\045\077\014\101" +
    "\017\102\152\116\071\117\134\120\122\122\062\123\110" +
    "\140\236\141\240\142\025\143\117\144\105\145\140\146" +
    "\055\152\144\153\023\154\050\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\004\024\u013b\001\001\000" +
    "\100\006\155\007\153\023\241\025\233\026\120\061\131" +
    "\073\151\074\045\077\014\101\017\102\152\116\071\117" +
    "\134\120\122\122\062\123\110\140\236\141\240\142\025" +
    "\143\117\144\105\145\140\146\055\152\144\153\023\154" +
    "\050\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\u013f\117" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\155\007\153\061\131\073\151\074\045\077\014\101" +
    "\u0142\102\152\116\071\117\134\122\062\123\110\142\025" +
    "\143\117\144\105\145\140\146\055\162\066\163\022\210" +
    "\012\214\031\217\147\001\001\000\002\001\001\000\064" +
    "\006\155\007\153\023\u014a\026\120\036\u0148\061\131\073" +
    "\151\074\045\077\014\101\017\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\004\117\u0145\001\001\000\002\001\001\000\056\006" +
    "\155\007\153\061\131\073\151\074\045\077\014\101\u0147" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u014b\001\001\000\002\001\001\000\100" +
    "\006\155\007\153\023\241\025\233\026\120\061\131\073" +
    "\151\074\045\077\014\101\017\102\152\116\071\117\134" +
    "\120\122\122\062\123\110\140\236\141\240\142\025\143" +
    "\117\144\105\145\140\146\055\152\144\153\023\154\050" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\u0154\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\367\102\152\103\u0157\116" +
    "\071\117\134\122\062\123\110\142\025\143\117\144\105" +
    "\145\140\146\055\162\066\163\022\210\012\214\031\217" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\006\155\007\153\061" +
    "\131\074\045\102\152\106\u015d\107\u015e\117\134\122\062" +
    "\123\110\142\u015f\143\117\144\105\145\140\146\u0151\162" +
    "\u0150\163\022\214\u015c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\006\155\007\153\061\131\074\045\102\152" +
    "\107\u0162\117\134\122\062\123\110\142\u015f\143\117\144" +
    "\105\145\140\146\u0151\162\u0150\163\022\214\u015c\001\001" +
    "\000\002\001\001\000\042\006\155\007\153\061\131\074" +
    "\045\102\152\117\134\122\062\123\110\142\u0164\143\117" +
    "\144\105\145\140\146\u0151\162\u0150\163\022\165\u0165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\006\155\007\153\061\131\074\045\102\152\117" +
    "\134\122\062\123\110\142\u0168\143\117\144\105\145\140" +
    "\146\u0151\162\u0150\163\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u016c\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\117\u0170\001\001\000\002\001\001\000" +
    "\016\003\u01a0\004\u0180\005\u0194\061\u01a7\104\u01a1\117\u01a9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\u01c4\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\006\155" +
    "\007\153\056\u01bb\057\u01be\061\131\072\u01bd\073\151\074" +
    "\045\077\014\101\u01bc\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\u01c0\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\002\001" +
    "\001\000\060\006\155\007\153\061\131\072\u01c2\073\151" +
    "\074\045\077\014\101\u01bc\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\155" +
    "\007\153\061\131\073\151\074\045\077\014\101\u01e9\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\056\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\u01e7\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\u01e5\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\056\006" +
    "\155\007\153\061\131\073\151\074\045\077\014\101\u01e4" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\056\006\155\007\153\061" +
    "\131\073\151\074\045\077\014\101\u01e3\102\152\116\071" +
    "\117\134\122\062\123\110\142\025\143\117\144\105\145" +
    "\140\146\055\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\u01e2\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\056" +
    "\006\155\007\153\061\131\073\151\074\045\077\014\101" +
    "\u01e1\102\152\116\071\117\134\122\062\123\110\142\025" +
    "\143\117\144\105\145\140\146\055\162\066\163\022\210" +
    "\012\214\031\217\147\001\001\000\056\006\155\007\153" +
    "\061\131\073\151\074\045\077\014\101\u01e0\102\152\116" +
    "\071\117\134\122\062\123\110\142\025\143\117\144\105" +
    "\145\140\146\055\162\066\163\022\210\012\214\031\217" +
    "\147\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u01df\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u01de\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u01dd\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u01dc\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u01db\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\006\155\007\153\061\131\074\045\102\152\117" +
    "\134\122\062\123\110\142\u01e8\143\117\144\105\145\140" +
    "\146\u0151\162\u0150\163\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\006" +
    "\155\007\153\061\131\073\151\074\045\077\014\101\u01ef" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\002\001\001\000\004\040" +
    "\u01f1\001\001\000\002\001\001\000\004\041\u0204\001\001" +
    "\000\004\041\u01f4\001\001\000\002\001\001\000\004\041" +
    "\u01f6\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\006\155\007\153\061\131\073\151\074\045\077\014\101" +
    "\u01fe\102\152\116\071\117\134\122\062\123\110\142\025" +
    "\143\117\144\105\145\140\146\055\162\066\163\022\210" +
    "\012\214\031\217\147\001\001\000\004\042\u01fa\001\001" +
    "\000\004\024\u01fd\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\006\155\007\153\023\241\025\233\026\120" +
    "\061\131\073\151\074\045\077\014\101\017\102\152\116" +
    "\071\117\134\120\122\122\062\123\110\140\236\141\240" +
    "\142\025\143\117\144\105\145\140\146\055\152\144\153" +
    "\023\154\050\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\004\042\u01ff\001\001\000\004\024\u0200\001" +
    "\001\000\100\006\155\007\153\023\241\025\233\026\120" +
    "\061\131\073\151\074\045\077\014\101\017\102\152\116" +
    "\071\117\134\120\122\122\062\123\110\140\236\141\240" +
    "\142\025\143\117\144\105\145\140\146\055\152\144\153" +
    "\023\154\050\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u0206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\006" +
    "\155\007\153\056\u020a\057\u01be\061\131\072\u01bd\073\151" +
    "\074\045\077\014\101\u01bc\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\006" +
    "\155\007\153\061\131\073\151\074\045\077\014\101\u0212" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\155\007" +
    "\153\061\131\073\151\074\045\077\014\101\u0219\102\152" +
    "\116\071\117\134\122\062\123\110\142\025\143\117\144" +
    "\105\145\140\146\055\162\066\163\022\210\012\214\031" +
    "\217\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\121\u021d\001\001\000\004\230\u0225" +
    "\001\001\000\014\006\203\007\153\117\134\126\u0220\157" +
    "\u021f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\203\007\153\117\134\126\u0223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\u0227\001\001\000\030\065\u022f\120\122\132" +
    "\u022a\136\u0230\137\u0233\141\u0228\153\023\154\050\161\u023a" +
    "\167\u0231\173\u0229\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\u01a0\004\u0180\005\u026c\117\u01a9\130\u026d\131" +
    "\u026b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\137\u0267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\203\007\153\117" +
    "\134\126\u0246\174\u0245\001\001\000\002\001\001\000\004" +
    "\127\u023c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u023f\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\006\155\007\153\061\131\073\151\074" +
    "\045\077\014\101\u0244\102\152\116\071\117\134\122\062" +
    "\123\110\142\025\143\117\144\105\145\140\146\055\162" +
    "\066\163\022\210\012\214\031\217\147\001\001\000\002" +
    "\001\001\000\004\175\u0249\001\001\000\002\001\001\000" +
    "\012\006\203\007\153\117\134\126\u0266\001\001\000\030" +
    "\006\203\007\153\117\134\126\u0250\176\u024e\177\u024d\200" +
    "\u0251\201\u0252\203\u024b\204\u024f\205\u024c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\203\007\153\117\134\126\u0250\200\u025d" +
    "\201\u0252\203\u024b\204\u024f\205\u024c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\203\007\153" +
    "\117\134\126\u0259\202\u0258\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\203\007\153\117\134\126\u025b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\206\u0261\207\u0264\001\001" +
    "\000\002\001\001\000\012\003\u01a0\004\u0180\005\u0265\117" +
    "\u01a9\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\u01a0\004\u0180\005\u026c\117\u01a9\131\u0270\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\006\155\007" +
    "\153\061\131\073\151\074\045\077\014\101\u0272\102\152" +
    "\116\071\117\134\122\062\123\110\142\025\143\117\144" +
    "\105\145\140\146\055\162\066\163\022\210\012\214\031" +
    "\217\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\u0275\001\001\000\012\003\u01a0\004\u0180\005\u0276" +
    "\117\u01a9\001\001\000\004\231\u0277\001\001\000\002\001" +
    "\001\000\022\006\203\007\153\050\u0279\054\205\055\212" +
    "\117\134\126\211\160\204\001\001\000\002\001\001\000" +
    "\004\232\u027b\001\001\000\004\125\u027c\001\001\000\004" +
    "\233\u027d\001\001\000\004\133\u027e\001\001\000\002\001" +
    "\001\000\004\024\u0281\001\001\000\002\001\001\000\100" +
    "\006\155\007\153\023\241\025\233\026\120\061\131\073" +
    "\151\074\045\077\014\101\017\102\152\116\071\117\134" +
    "\120\122\122\062\123\110\140\236\141\240\142\025\143" +
    "\117\144\105\145\140\146\055\152\144\153\023\154\050" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\004\114\u029c\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\155\007\153\061\131\074" +
    "\045\102\152\117\134\122\062\123\110\142\u0292\143\117" +
    "\144\105\145\140\146\u0151\162\u0150\163\022\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u028a\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\004\114\u0289\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u028e\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\115\u0297\117\u0299\001\001\000\004\117\u0296\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\117\u02a1\001\001\000\004\223\u02a2\001\001\000" +
    "\002\001\001\000\022\006\203\007\153\050\u02a4\054\205" +
    "\055\212\117\134\126\211\160\204\001\001\000\002\001" +
    "\001\000\004\224\u02a6\001\001\000\004\125\u02a7\001\001" +
    "\000\004\225\u02a8\001\001\000\004\170\u02ab\001\001\000" +
    "\002\001\001\000\004\024\u02ac\001\001\000\002\001\001" +
    "\000\100\006\155\007\153\023\241\025\233\026\120\061" +
    "\131\073\151\074\045\077\014\101\017\102\152\116\071" +
    "\117\134\120\122\122\062\123\110\140\236\141\240\142" +
    "\025\143\117\144\105\145\140\146\055\152\144\153\023" +
    "\154\050\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\006\155\007\153\056\u02b2\057" +
    "\u01be\061\131\072\u01bd\073\151\074\045\077\014\101\u01bc" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\006\155\007\153\061\131\073\u02b6\074\045" +
    "\077\014\101\u01c7\102\152\116\071\117\134\122\062\123" +
    "\110\142\u02b5\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\215\u02b7\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\155\007\153\032\u02be\033\u02b9\061\131\074\045\102" +
    "\152\117\134\122\062\123\110\142\u02bc\143\117\144\105" +
    "\145\140\146\u0151\162\u0150\163\022\214\u02ba\216\u02bb\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\155\007\153\061\131\074" +
    "\045\102\152\117\134\122\062\123\110\142\u02c8\143\117" +
    "\144\105\145\140\146\u0151\162\u0150\163\022\001\001\000" +
    "\046\006\155\007\153\033\u02bf\061\131\074\045\102\152" +
    "\117\134\122\062\123\110\142\u02bc\143\117\144\105\145" +
    "\140\146\u0151\162\u0150\163\022\214\u02ba\216\u02c0\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\006\155\007" +
    "\153\023\u02c3\026\120\035\u02c4\061\131\073\151\074\045" +
    "\077\014\101\017\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\004\024" +
    "\u02c5\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\006\155\007\153\023\241\025\233\026\120\061\131\073" +
    "\151\074\045\077\014\101\017\102\152\116\071\117\134" +
    "\120\122\122\062\123\110\140\236\141\240\142\025\143" +
    "\117\144\105\145\140\146\055\152\144\153\023\154\050" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\006\155\007\153\023\u02c3\026\120\035\u02ca\061\131\073" +
    "\151\074\045\077\014\101\017\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u02ce\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u02d9\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\060\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\367\102\152\103\u02d7\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\010\061" +
    "\357\105\u02d3\117\362\001\001\000\002\001\001\000\064" +
    "\006\155\007\153\056\u02d5\057\u01be\061\131\072\u01bd\073" +
    "\151\074\045\077\014\101\u01bc\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\135\u02e6\001\001\000\004\220\u02dd\001\001\000\006\134" +
    "\u02e1\135\u02e0\001\001\000\004\021\u02e3\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\100\006\155\007\153\022\u02e5\023\160\026\120" +
    "\061\131\073\151\074\045\077\014\101\017\102\152\116" +
    "\071\117\134\120\122\122\062\123\110\140\112\141\132" +
    "\142\025\143\117\144\105\145\140\146\055\152\144\153" +
    "\023\154\050\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\114\u029c\001\001\000\002\001\001\000\044" +
    "\006\155\007\153\027\u02eb\030\u02ea\061\131\074\045\102" +
    "\152\117\134\122\062\123\110\142\u02ec\143\117\144\105" +
    "\145\140\146\u0151\162\u0150\163\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\155\007\153\030\u02ef\061\131\074\045\102" +
    "\152\117\134\122\062\123\110\142\u02ec\143\117\144\105" +
    "\145\140\146\u0151\162\u0150\163\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\u0305\001\001\000\004" +
    "\076\u02f3\001\001\000\006\155\u02f9\211\u02f7\001\001\000" +
    "\064\006\155\007\153\056\u02f5\057\u01be\061\131\072\u01bd" +
    "\073\151\074\045\077\014\101\u01bc\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\203\007\153\117\134\126\u0304\001\001\000" +
    "\004\172\u02fa\001\001\000\004\156\u02fc\001\001\000\002" +
    "\001\001\000\004\234\u02ff\001\001\000\014\006\203\007" +
    "\153\117\134\126\u0220\157\u02fe\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\u0301\001\001\000\030\065" +
    "\u022f\120\122\132\u022a\136\u0230\137\u0233\141\u0228\153\023" +
    "\154\050\161\u023a\167\u0302\173\u0229\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u030e\001\001\000\100\006\155\007" +
    "\153\023\241\025\233\026\120\061\131\073\151\074\045" +
    "\077\014\101\017\102\152\116\071\117\134\120\122\122" +
    "\062\123\110\140\236\141\240\142\025\143\117\144\105" +
    "\145\140\146\055\152\144\153\023\154\050\162\066\163" +
    "\022\210\012\214\031\217\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\u01a0\004\u0180\005\u0312\061" +
    "\u0314\104\u0313\117\u01a9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\006\155\007\153\056" +
    "\u0316\057\u01be\061\131\072\u01bd\073\151\074\045\077\014" +
    "\101\u01bc\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\114\u029c\001\001" +
    "\000\004\114\u0289\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\155\007\153\061\131\074\045\102\152\117\134" +
    "\122\062\123\110\142\u0335\143\117\144\105\145\140\146" +
    "\u0151\162\u0150\163\022\001\001\000\002\001\001\000\004" +
    "\100\u0329\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u032b\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\040\006\155\007\153\061\131\074\045\102\152\117\134" +
    "\122\062\123\110\142\u0330\143\117\144\105\145\140\146" +
    "\u0151\162\u0150\163\022\001\001\000\002\001\001\000\056" +
    "\006\155\007\153\061\131\073\151\074\045\077\014\101" +
    "\u032e\102\152\116\071\117\134\122\062\123\110\142\025" +
    "\143\117\144\105\145\140\146\055\162\066\163\022\210" +
    "\012\214\031\217\147\001\001\000\040\006\155\007\153" +
    "\061\131\074\045\102\152\117\134\122\062\123\110\142" +
    "\u032f\143\117\144\105\145\140\146\u0151\162\u0150\163\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\006\155\007\153\061\131\073\151\074\045" +
    "\077\014\101\u0333\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\040\006" +
    "\155\007\153\061\131\074\045\102\152\117\134\122\062" +
    "\123\110\142\u0334\143\117\144\105\145\140\146\u0151\162" +
    "\u0150\163\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\006\155\007\153\061\131\073" +
    "\151\074\045\077\014\101\u0337\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\226\u033a\001" +
    "\001\000\004\155\u033b\001\001\000\004\172\u033c\001\001" +
    "\000\004\156\u033d\001\001\000\004\227\u033e\001\001\000" +
    "\002\001\001\000\004\064\u0340\001\001\000\030\065\u022f" +
    "\120\122\132\u022a\136\u0230\137\u0233\141\u0228\153\023\154" +
    "\050\161\u023a\167\u0341\173\u0229\001\001\000\002\001\001" +
    "\000\056\006\155\007\153\061\131\073\151\074\045\077" +
    "\014\101\u0343\102\152\116\071\117\134\122\062\123\110" +
    "\142\025\143\117\144\105\145\140\146\055\162\066\163" +
    "\022\210\012\214\031\217\147\001\001\000\002\001\001" +
    "\000\064\006\155\007\153\023\u0347\026\120\043\u0346\061" +
    "\131\073\151\074\045\077\014\101\017\102\152\116\071" +
    "\117\134\122\062\123\110\142\025\143\117\144\105\145" +
    "\140\146\055\162\066\163\022\210\012\214\031\217\147" +
    "\001\001\000\004\024\u0348\001\001\000\002\001\001\000" +
    "\002\001\001\000\100\006\155\007\153\023\241\025\233" +
    "\026\120\061\131\073\151\074\045\077\014\101\017\102" +
    "\152\116\071\117\134\120\122\122\062\123\110\140\236" +
    "\141\240\142\025\143\117\144\105\145\140\146\055\152" +
    "\144\153\023\154\050\162\066\163\022\210\012\214\031" +
    "\217\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u0350\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\006\155\007\153\061\131\073\151\074\045\077\014" +
    "\101\u0352\102\152\116\071\117\134\122\062\123\110\142" +
    "\025\143\117\144\105\145\140\146\055\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\u0355\001\001\000\100\006\155" +
    "\007\153\023\241\025\233\026\120\061\131\073\151\074" +
    "\045\077\014\101\017\102\152\116\071\117\134\120\122" +
    "\122\062\123\110\140\236\141\240\142\025\143\117\144" +
    "\105\145\140\146\055\152\144\153\023\154\050\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\010\147" +
    "\u0359\150\u035a\151\u0358\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\212\u035d\213\u035c\001\001\000\004\151" +
    "\u035b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u0360\001\001\000" +
    "\100\006\155\007\153\023\241\025\233\026\120\061\131" +
    "\073\151\074\045\077\014\101\017\102\152\116\071\117" +
    "\134\120\122\122\062\123\110\140\236\141\240\142\025" +
    "\143\117\144\105\145\140\146\055\152\144\153\023\154" +
    "\050\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\012\006\203\007\153\117\134\126" +
    "\u0363\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0367\001\001\000\100\006\155\007" +
    "\153\023\241\025\233\026\120\061\131\073\151\074\045" +
    "\077\014\101\017\102\152\116\071\117\134\120\122\122" +
    "\062\123\110\140\236\141\240\142\025\143\117\144\105" +
    "\145\140\146\055\152\144\153\023\154\050\162\066\163" +
    "\022\210\012\214\031\217\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\114\u029c\001" +
    "\001\000\002\001\001\000\004\114\u0289\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\006" +
    "\155\007\153\061\131\070\u0373\071\u0374\073\151\074\045" +
    "\077\014\101\u0372\102\152\116\071\117\134\122\062\123" +
    "\110\142\025\143\117\144\105\145\140\146\055\162\066" +
    "\163\022\210\012\214\031\217\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\155" +
    "\007\153\061\131\073\151\074\045\077\014\101\u0376\102" +
    "\152\116\071\117\134\122\062\123\110\142\025\143\117" +
    "\144\105\145\140\146\055\162\066\163\022\210\012\214" +
    "\031\217\147\001\001\000\002\001\001\000\062\006\155" +
    "\007\153\061\131\070\u0378\071\u0374\073\151\074\045\077" +
    "\014\101\u0372\102\152\116\071\117\134\122\062\123\110" +
    "\142\025\143\117\144\105\145\140\146\055\162\066\163" +
    "\022\210\012\214\031\217\147\001\001\000\002\001\001" +
    "\000\062\006\155\007\153\061\131\070\u037a\071\u0374\073" +
    "\151\074\045\077\014\101\u0372\102\152\116\071\117\134" +
    "\122\062\123\110\142\025\143\117\144\105\145\140\146" +
    "\055\162\066\163\022\210\012\214\031\217\147\001\001" +
    "\000\002\001\001\000\064\006\155\007\153\023\u037e\026" +
    "\120\034\u037c\061\131\073\151\074\045\077\014\101\017" +
    "\102\152\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\002\001\001\000\004\024" +
    "\u037f\001\001\000\002\001\001\000\100\006\155\007\153" +
    "\023\241\025\233\026\120\061\131\073\151\074\045\077" +
    "\014\101\017\102\152\116\071\117\134\120\122\122\062" +
    "\123\110\140\236\141\240\142\025\143\117\144\105\145" +
    "\140\146\055\152\144\153\023\154\050\162\066\163\022" +
    "\210\012\214\031\217\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\006\155\007\153\061\131\073\151" +
    "\074\045\077\014\101\u0383\102\152\116\071\117\134\122" +
    "\062\123\110\142\025\143\117\144\105\145\140\146\055" +
    "\162\066\163\022\210\012\214\031\217\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\006\155\007\153" +
    "\061\131\073\151\074\045\077\014\101\u0386\102\152\116" +
    "\071\117\134\122\062\123\110\142\025\143\117\144\105" +
    "\145\140\146\055\162\066\163\022\210\012\214\031\217" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\u0389" +
    "\007\u038d\010\u038f\011\u0399\013\u039a\016\u039b\117\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\u0396" +
    "\007\153\117\134\001\001\000\002\001\001\000\012\006" +
    "\u0389\007\153\010\u0395\117\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\u0389\007\153\010\u038f\016\u039f\117\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\117\u0170\001\001\000" +
    "\020\006\u0389\007\153\010\u03a5\014\u03a3\015\u03a6\017\u03a4" +
    "\117\134\001\001\000\002\001\001\000\012\006\u0389\007" +
    "\153\010\u03a7\117\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\u0389\007\153\010\u03a5\015\u03aa\017\u03a4\117\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\006\155\007\153\061" +
    "\131\073\151\074\045\077\014\101\u0324\102\152\110\u03b3" +
    "\111\u0325\116\071\117\134\122\062\123\110\142\025\143" +
    "\117\144\105\145\140\146\055\162\066\163\022\210\012" +
    "\214\031\217\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\006\155\007\153\061\131" +
    "\073\151\074\045\077\014\101\u03b7\102\152\116\071\117" +
    "\134\122\062\123\110\142\025\143\117\144\105\145\140" +
    "\146\055\162\066\163\022\210\012\214\031\217\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\u03bc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;

		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}

	protected Expression detectScalar(Expression expr) {
		if (expr instanceof FullyQualifiedReference) {
			FullyQualifiedReference name = (FullyQualifiedReference) expr;
			if (name.getNamespace() == null) {
				return new Scalar(name.start(), name.end(), name.getName(), Scalar.TYPE_STRING);
			}
		}
		return expr;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CompilerAstParser$actions {
  private final CompilerAstParser parser;

  /** Constructor */
  CUP$CompilerAstParser$actions(CompilerAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000000(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();

	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment) c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
		if (c instanceof Comment) {
			program.getCommentList().add((Comment) c);
		}
	}

	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerAstParser$parser.done_parsing();
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // reserved_non_modifiers ::= T_INCLUDE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // reserved_non_modifiers ::= T_INCLUDE_ONCE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // reserved_non_modifiers ::= T_EVAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // reserved_non_modifiers ::= T_REQUIRE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // reserved_non_modifiers ::= T_REQUIRE_ONCE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // reserved_non_modifiers ::= T_LOGICAL_OR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // reserved_non_modifiers ::= T_LOGICAL_XOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // reserved_non_modifiers ::= T_LOGICAL_AND 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reserved_non_modifiers ::= T_INSTANCEOF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reserved_non_modifiers ::= T_NEW 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reserved_non_modifiers ::= T_CLONE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // reserved_non_modifiers ::= T_EXIT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reserved_non_modifiers ::= T_IF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reserved_non_modifiers ::= T_ELSEIF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reserved_non_modifiers ::= T_ELSE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // reserved_non_modifiers ::= T_ENDIF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // reserved_non_modifiers ::= T_ECHO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // reserved_non_modifiers ::= T_DO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // reserved_non_modifiers ::= T_WHILE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // reserved_non_modifiers ::= T_ENDWHILE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reserved_non_modifiers ::= T_FOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // reserved_non_modifiers ::= T_ENDFOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // reserved_non_modifiers ::= T_FOREACH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // reserved_non_modifiers ::= T_ENDFOREACH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // reserved_non_modifiers ::= T_DECLARE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // reserved_non_modifiers ::= T_ENDDECLARE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // reserved_non_modifiers ::= T_AS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reserved_non_modifiers ::= T_TRY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // reserved_non_modifiers ::= T_CATCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // reserved_non_modifiers ::= T_FINALLY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // reserved_non_modifiers ::= T_THROW 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // reserved_non_modifiers ::= T_USE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // reserved_non_modifiers ::= T_INSTEADOF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // reserved_non_modifiers ::= T_GLOBAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // reserved_non_modifiers ::= T_VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // reserved_non_modifiers ::= T_UNSET 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // reserved_non_modifiers ::= T_ISSET 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // reserved_non_modifiers ::= T_EMPTY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // reserved_non_modifiers ::= T_CONTINUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // reserved_non_modifiers ::= T_GOTO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // reserved_non_modifiers ::= T_FUNCTION 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // reserved_non_modifiers ::= T_CONST 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reserved_non_modifiers ::= T_RETURN 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reserved_non_modifiers ::= T_PRINT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reserved_non_modifiers ::= T_YIELD 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // reserved_non_modifiers ::= T_LIST 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // reserved_non_modifiers ::= T_SWITCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // reserved_non_modifiers ::= T_ENDSWITCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // reserved_non_modifiers ::= T_CASE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // reserved_non_modifiers ::= T_DEFAULT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // reserved_non_modifiers ::= T_BREAK 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // reserved_non_modifiers ::= T_ARRAY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // reserved_non_modifiers ::= T_CALLABLE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // reserved_non_modifiers ::= T_EXTENDS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // reserved_non_modifiers ::= T_IMPLEMENTS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // reserved_non_modifiers ::= T_NAMESPACE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // reserved_non_modifiers ::= T_TRAIT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // reserved_non_modifiers ::= T_INTERFACE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // reserved_non_modifiers ::= T_CLASS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // semi_reserved ::= reserved_non_modifiers 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // semi_reserved ::= T_STATIC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // semi_reserved ::= T_ABSTRACT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // semi_reserved ::= T_FINAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // semi_reserved ::= T_PRIVATE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // semi_reserved ::= T_PROTECTED 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // semi_reserved ::= T_PUBLIC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // identifier ::= string_st 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("identifier",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // identifier ::= semi_reserved 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("identifier",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // namespace_name ::= namespace_name_list 
            {
              FullyQualifiedReference RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ?
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, listright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // namespace_name_list ::= string_st 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // namespace_name_list ::= namespace_name_list T_NS_SEPARATOR string_st 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // namespace_statement_list ::= namespace_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	if (!(parser.declarations.peek() instanceof NamespaceDeclaration)) {
		statementList.add(parser.declarations.pop());
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // namespace_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // name ::= namespace_name 
            {
              FullyQualifiedReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("name",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              FullyQualifiedReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		name.setNamespace(new NamespaceReference(nameleft, nameleft, ""));
	}
	name.getNamespace().setLocal(true);

	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("name",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // name ::= T_NS_SEPARATOR namespace_name 
            {
              FullyQualifiedReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("name",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (statement != null) {
		parser.addStatement(statement);
		if (parser.pendingStatement != null) {
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while (!parser.declarations.isEmpty()) {
		parser.addStatement(parser.declarations.pop());
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // top_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$0 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, nameright, nameleft, nameright, name.getFullyQualifiedName(), null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$0",142, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // top_statement ::= T_NAMESPACE namespace_name NT$0 named_namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$1 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, startright, startright, startright, NamespaceDeclaration.GLOBAL, null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$1",143, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // top_statement ::= T_NAMESPACE NT$1 namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // top_statement ::= T_USE mixed_group_use_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		UseStatement useStatement = (UseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useStatement.setStart(startleft);
	useStatement.setEnd(endright);
	parser.declarations.push(useStatement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // top_statement ::= T_USE use_type group_use_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		UseStatement useStatement = (UseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useStatement.setStart(startleft);
	useStatement.setEnd(endright);
	useStatement.setStatementType(useType);
	parser.declarations.push(useStatement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // top_statement ::= T_USE use_type use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList, useType));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // top_statement ::= T_CONST const_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] decList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList[0].iterator();
	int pos = 0;
	while (i.hasNext()) {
		ConstantReference constant = (ConstantReference) i.next();
		Expression initializer = (Expression) decList[1].get(pos);

		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.declarations.push(new ConstantDeclaration(constant, initializer, sleft, end, pos == 0 ? s.doc : null));
		pos++;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // named_namespace_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.setEnd(endright);
	namespaceDeclaration.setBracketed(false);

	parser.currentNamespace = namespaceDeclaration;

	parser.metUnbracketedNSDecl = true;
	if (parser.metBracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // named_namespace_body ::= namespace_body 
            {
              Statement RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // namespace_body ::= T_CURLY_OPEN namespace_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.getBody().setStart(startleft);
	namespaceDeclaration.getBody().setEnd(endright);
	namespaceDeclaration.getBody().getStatements().clear();
	namespaceDeclaration.getBody().acceptStatements(statementList);
	namespaceDeclaration.setEnd(endright);

	parser.metBracketedNSDecl = true;
	if (parser.metUnbracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // namespace_body ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (NamespaceDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // use_type ::= T_FUNCTION 
            {
              Integer RESULT =null;
		
	RESULT = UseStatement.T_FUNCTION;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_type",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // use_type ::= T_CONST 
            {
              Integer RESULT =null;
		
	RESULT = UseStatement.T_CONST;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_type",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // group_use_declaration ::= use_namespace_name T_CURLY_OPEN use_declarations T_CURLY_CLOSE 
            {
              UseStatement RESULT =null;
		int namespaceNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int namespaceNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference namespaceName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(namespaceNameleft, endright, namespaceName, useDeclList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("group_use_declaration",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // mixed_group_use_declaration ::= use_namespace_name T_CURLY_OPEN inline_use_declarations T_CURLY_CLOSE 
            {
              UseStatement RESULT =null;
		int namespaceNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int namespaceNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference namespaceName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(namespaceNameleft, endright, namespaceName, useDeclList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("mixed_group_use_declaration",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // inline_use_declarations ::= inline_use_declarations T_COMMA inline_use_declaration 
            {
              List RESULT =null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declarations",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // inline_use_declarations ::= inline_use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declarations",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // inline_use_declaration ::= use_declaration 
            {
              UsePart RESULT =null;
		int useDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDeclaration = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = useDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declaration",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // inline_use_declaration ::= use_type use_declaration 
            {
              UsePart RESULT =null;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int useDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDeclaration = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclaration.setStatementType(useType);
	RESULT = useDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declaration",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT =null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // use_declarations ::= use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // use_declaration ::= namespace_name 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // use_namespace_name ::= namespace_name_list T_NS_SEPARATOR 
            {
              FullyQualifiedReference RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ?
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, endright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_namespace_name",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoLabel(labelleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$2 ::= 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$2",144, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unticked_statement ::= T_CURLY_OPEN NT$2 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = (Block) parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);

	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);

	RESULT = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);
	RESULT = whileStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);
	RESULT = doStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // unticked_statement ::= T_GLOBAL simple_variable_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GlobalStatement(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticStatement(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(startleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(exprleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = new ExpressionStatement(startleft, endright, functionInvocation);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	RESULT = new ExpressionStatement(startleft, endright, functionInvocation);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, expr, var, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE foreach_expr T_AS foreach_key foreach_value T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, expr, key, var, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE const_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List names = new LinkedList();
	for (Object v : lists[0]) {
		names.add(((ConstantReference) v).getName());
	}
	RESULT = new DeclareStatement(startleft, statementright, names, lists[1], statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE catches_list finally_clause 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int finallyClauseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int finallyClauseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FinallyClause finallyClause = (FinallyClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TryStatement s = new TryStatement(startleft, finallyClause != null ? finallyClauseright : catchesListright, new Block(tryBlockStartleft, tryBlockEndright, tryList), catchesList, finallyClause);
	if (finallyClause == null && catchesList.size() == 0) {
		parser.reportError(new ASTError(tryBlockEndleft, tryBlockEndright), "syntax error, catch or finally clause expected");
		parser.pendingStatement = s;
	}

	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoStatement(startleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // catches_list ::= non_empty_catches_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // catches_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // non_empty_catches_list ::= catch_clause 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // non_empty_catches_list ::= non_empty_catches_list catch_clause 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // catch_clause ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		String catch_word = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	RESULT = new CatchClause(catch_wordleft, catchBlockEndright, className, variable, catchBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catch_clause",103, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // finally_clause ::= non_empty_finally_clause 
            {
              FinallyClause RESULT =null;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FinallyClause clause = (FinallyClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = clause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",136, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // finally_clause ::= 
            {
              FinallyClause RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",136, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // non_empty_finally_clause ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FinallyClause RESULT =null;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String finally_word = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, finallyList);
	FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, finallyBlock);
	RESULT = finallyClause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_finally_clause",137, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",94, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",95, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$3 ::= 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), start.doc);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$3",145, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$4 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$4",146, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$5 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.setReturnType(returnType);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$5",147, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$3 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$4 return_type NT$5 function_body 
            {
              PHPMethodDeclaration RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (PHPMethodDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$6 ::= 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration;
	if (modifier.modifier == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) {
		classDeclaration = new TraitDeclaration(modifierleft, classNameright,
			classNameleft, classNameright, modifier.modifier, className, null, null,
			new Block(classNameright, classNameright, null), modifier.doc);
	}else{
		classDeclaration = new ClassDeclaration(modifierleft, classNameright,
			classNameleft, classNameright, modifier.modifier, className, null, null,
			new Block(classNameright, classNameright, null), modifier.doc);
	}
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$6",148, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$7 ::= 
            {
              Statement RESULT =(Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.peek();
	if (superClass != null) {
		if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) {
			parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd()), String.format("A trait (%s) cannot extend a class. Traits can only be composed from other traits with the 'use' keyword", classDeclaration.getName()));
		} else {
			classDeclaration.setSuperClass(superClass);
		}
	}
	if (interfaces != null) {
		if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait && interfaces.size() > 0) {
		SimpleReference node = (SimpleReference) interfaces.get(0);
			parser.reportError(new ASTError(node.sourceStart(), node.sourceEnd()), String.format("Cannot use '%s' as interface on '%s' since it is a Trait", node.getName(), classDeclaration.getName()));
		} else {
			classDeclaration.setInterfaceList(interfaces);
		}
	}
	classDeclaration.setEnd(interfacesright);
	classDeclaration.getBody().setStart(interfacesright);
	classDeclaration.getBody().setEnd(interfacesright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$7",149, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // unticked_class_declaration_statement ::= class_entry_type T_STRING NT$6 extends_from errorOrNot implements_list NT$7 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}
	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$8 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft, interfacesright, classNameleft, classNameright, className, interfaces, new Block(interfacesright, interfacesright, null), start);
	interfaceDeclaration.setRecovered(true);
	parser.declarations.push(interfaceDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$8",150, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list NT$8 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration) parser.declarations.pop();
	interfaceDeclaration.setRecovered(false);
	interfaceDeclaration.setEnd(blockEndright);
	interfaceDeclaration.getBody().setStart(blockStartleft);
	interfaceDeclaration.getBody().setEnd(blockEndright);
	RESULT = interfaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // errorOrNot ::= error 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // errorOrNot ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // class_entry_type ::= T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // class_entry_type ::= T_FINAL T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // class_entry_type ::= T_TRAIT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(org.eclipse.php.core.compiler.IPHPModifiers.AccTrait, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = value.doc;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // interface_list ::= error 
            {
              List RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // foreach_expr ::= variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_expr",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // foreach_expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_expr",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // foreach_key ::= foreach_variable T_DOUBLE_ARROW 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_key",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // foreach_value ::= foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_value",140, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // foreach_value ::= list_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ListVariable var = (ListVariable)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_value",140, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReferenceExpression (startleft, varright, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // list_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              ListVariable RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ListVariable(startleft, endright, varList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("list_variable",138, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // const_list ::= string_st T_EQUAL expr 
            {
              List[] RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(new ConstantReference(constNameleft, constNameright, constName));
	listValues.add(expr);

	RESULT = new List[] { listKeys, listValues };

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("const_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // const_list ::= const_list T_COMMA string_st T_EQUAL expr 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	lists[0].add(new ConstantReference(constNameleft, constNameright, constName));
	lists[1].add(expr);
	RESULT = lists;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("const_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (parameter != null) {
		list.add(parameter);
	}

	if (list.size() >= 2) {
		FormalParameter previousFormalParameter = (FormalParameter) list.get(list.size() - 2);
		if (previousFormalParameter.isVariadic()) {
			parser.reportError(new ASTError(previousFormalParameter.start(), previousFormalParameter.end()), "Only the last parameter can be variadic");
		}
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // parameter ::= optional_class_type T_ELLIPSIS T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v, null, false, true);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // parameter ::= optional_class_type T_REFERENCE T_ELLIPSIS T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v, null, false, true);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // parameter ::= optional_class_type T_VARIABLE T_EQUAL expr 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, exprright, classType, v, expr);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL expr 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, exprright, classType, v, expr);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // parameter ::= error 
            {
              FormalParameter RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // optional_class_type ::= fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // optional_class_type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String array = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(arrayleft, arrayright, "array", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // optional_class_type ::= T_CALLABLE 
            {
              TypeReference RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String callable = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(callableleft, callableright, "callable", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // function_call_parameter_list ::= non_empty_argument_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // non_empty_argument_list ::= argument 
            {
              PHPCallArgumentsList RESULT =null;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression argument = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(argument);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_argument_list",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // non_empty_argument_list ::= non_empty_argument_list T_COMMA argument 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	if (paramsList.getChilds().size() > 1) {
		ASTNode previousNode = paramsList.getChilds().get((paramsList.getChilds().size() - 2));
		if (!(var instanceof PrefixExpression) && previousNode instanceof PrefixExpression) {
			PrefixExpression pExpression = (PrefixExpression) previousNode;
			if (pExpression.getOperatorType() == PrefixExpression.OP_UNPACK) {
				parser.reportError(new ASTError(var.start(), var.end()), "Cannot use positional argument after argument unpacking");
			}
		}
	}
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_argument_list",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // argument ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("argument",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // argument ::= T_ELLIPSIS expr 
            {
              Expression RESULT =null;
		int ellleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(ellleft, exprright, expr, PrefixExpression.OP_UNPACK);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("argument",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // type ::= T_ARRAY 
            {
              TypeReference RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String array = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(arrayleft, arrayright, "array", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("type",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // type ::= T_CALLABLE 
            {
              TypeReference RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String callable = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TypeReference reference = new FullyQualifiedReference(callableleft, callableright, "callable", null);
	RESULT = reference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("type",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // type ::= name 
            {
              TypeReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("type",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // return_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("return_type",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // return_type ::= T_NEKUDOTAIM type 
            {
              TypeReference RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference type = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = type;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("return_type",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // simple_variable_list ::= simple_variable_list T_COMMA simple_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable_list",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // simple_variable_list ::= simple_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable_list",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // simple_variable ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // simple_variable ::= T_DOLLAR simple_variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // simple_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // static_var_list ::= static_var 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // static_var_list ::= static_var_list T_COMMA static_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // static_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varleft, varright, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // static_var ::= T_VARIABLE T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	RESULT = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (!(parser.declarations.peek() instanceof TypeDeclaration || parser.declarations.peek() instanceof AnonymousClassDeclaration)) {
		parser.declarations.pop();
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // class_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // class_statement ::= variable_modifiers property_list T_SEMICOLON 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference) decl[0];
		Expression initializer = (Expression) decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // class_statement ::= T_CONST class_const_list T_SEMICOLON 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List lists = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = lists.iterator();
	PHPDocBlock docBlock = s.doc;
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ConstantDeclaration(constant, initializer, sleft, end, docBlock));
		docBlock = null;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // NT$9 ::= 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start.doc;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$9",151, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$10",152, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.setReturnType(returnType);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$11",153, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // class_statement ::= method_modifiers T_FUNCTION is_reference identifier NT$9 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$10 return_type NT$11 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	if (body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	if (parser.declarations.peek() instanceof TypeDeclaration) {
		TypeDeclaration type = (TypeDeclaration) parser.declarations.peek();
		methodDeclaration.setDeclaringTypeName(type.getName());
	}
	if (body instanceof EmptyStatement) { /* method without body part */
		Statement statement = parser.declarations.peek();
		if (statement instanceof ClassDeclaration) {
			ClassDeclaration classDeclaration = (ClassDeclaration) statement;
			if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) { /* handle traits */
				if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
				}
			} else { /* handle classes */
				if ((classDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
					if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
					}
				} else {
					if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
					} else {
						String message = Messages.getString("AbstractMethodInAbstractClass", methodDeclaration.getName(), classDeclaration.getName());
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodInAbstractClass), message);

						message = Messages.getString("AbstractMethodsInConcreteClass", classDeclaration.getName());
						parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodsInConcreteClass), message);
					}
				}
			}
		}
	} else if (body == null) { /* method with body part */
		Statement statement = parser.declarations.peek();
		if (statement instanceof ClassDeclaration) { /* handle classes and traits */
			if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
				parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
			}
		} else if (statement instanceof InterfaceDeclaration) {
			parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
		}
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // class_statement ::= error 
            {
              Object RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // class_statement ::= trait_use_statement 
            {
              Object RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft, adaptationsright, list, adaptations);
	parser.addDeclarationStatement(traitUseStatement);
	parser.declarations.push(traitUseStatement);
	RESULT = traitUseStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_use_statement",121, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TypeReference> traitList = new LinkedList<TypeReference>();
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",122, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",122, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // trait_adaptation_list ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",125, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT =null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",125, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft, endright, precedence);
	RESULT = traitPrecedenceStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft, endright, alias);
	RESULT = traitAliasStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT =null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft, trListright, methodReference, trList);
	RESULT = traitPrecedence;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_precedence",127, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TypeReference> trList = new LinkedList<TypeReference>();
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",128, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",128, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",129, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",129, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, className, functionName);
	RESULT = methodReference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference_fully_qualified",130, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // trait_alias ::= trait_method_reference T_AS trait_modifiers identifier 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference, modifierValue,
		new SimpleReference(functionNameleft, functionNameright, functionName));
	RESULT = alias;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",131, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000001(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // trait_alias ::= trait_method_reference T_AS non_empty_trait_modifiers 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference, modifierValue, null);
	RESULT = alias;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",131, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // non_empty_trait_modifiers ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // non_empty_trait_modifiers ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // non_empty_trait_modifiers ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // trait_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // trait_modifiers ::= non_empty_trait_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = modifier;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	// return an EmptyStatement object to make distinction between an abstract method and a method with an empty body
	RESULT = new EmptyStatement(endleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // method_body ::= 
            {
              Statement RESULT =null;
		
	parser.reportError();
	RESULT = new ASTError(0, 0);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // variable_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendPropertyModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // variable_modifiers ::= T_VAR 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair var = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // method_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // method_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendMethodModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // member_modifier ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // member_modifier ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // member_modifier ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // member_modifier ::= T_STATIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // member_modifier ::= T_ABSTRACT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // member_modifier ::= T_FINAL 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // property_list ::= property_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // property_list ::= property_list T_COMMA T_VARIABLE T_EQUAL expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // property_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // property_list ::= T_VARIABLE T_EQUAL expr 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // class_const_list ::= class_const_list T_COMMA class_const_decl 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ASTNode[] decl = (ASTNode[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(decl);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_const_list",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // class_const_list ::= class_const_decl 
            {
              List RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ASTNode[] decl = (ASTNode[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(decl);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_const_list",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // class_const_decl ::= identifier T_EQUAL expr 
            {
              ASTNode[] RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ASTNode[] { new ConstantReference(constNameleft, constNameright, constName), expr};

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_const_decl",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // NT$12 ::= 
            {
              AnonymousClassDeclaration RESULT =null;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	Block block = new Block(0, 0, null);
	AnonymousClassDeclaration acd = new AnonymousClassDeclaration(superClassleft, superClassleft, superClass, interfaces, block);
	acd.setRecovered(true);
	parser.addDeclarationStatement(acd);
	parser.declarations.push(acd);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$12",154, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // anonymous_class ::= extends_from errorOrNot implements_list NT$12 T_CURLY_OPEN class_statement_list class_closure 
            {
              AnonymousClassDeclaration RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (AnonymousClassDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	AnonymousClassDeclaration acd = (AnonymousClassDeclaration) parser.declarations.pop();

	acd.setEnd(blockEndright);
	acd.setRecovered(false);
	acd.getBody().setStart(blockStartleft);
	acd.getBody().setEnd(blockEndright);
	RESULT = acd;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("anonymous_class",135, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // new_expr ::= T_NEW T_CLASS ctor_arguments anonymous_class 
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tclassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tclassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair tclass = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		AnonymousClassDeclaration ac = (AnonymousClassDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression className = new SimpleReference(tclassleft, tclassright, "class");
	RESULT = new ClassInstanceCreation(startleft, acright, className, ctor, ac);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // expr_without_variable ::= list_variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		ListVariable vars = (ListVariable)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varsleft, exprright, vars, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CloneExpression(startleft, exprright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // expr_without_variable ::= variable T_POW_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_POW_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_AND_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_OR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // expr_without_variable ::= variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // expr_without_variable ::= T_INC variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // expr_without_variable ::= variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // expr_without_variable ::= T_DEC variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MUL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // expr_without_variable ::= expr T_POW expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_POW, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_DIV, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MOD, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_PLUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_MINUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_NOT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_TILDA);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // expr_without_variable ::= expr T_SPACESHIP expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SPACESHIP, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr, className);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // expr_without_variable ::= new_expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // expr_without_variable ::= yield_expr 
            {
              Expression RESULT =null;
		int yieldleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int yieldright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		YieldExpression yield = (YieldExpression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	boolean found = false;
	ListIterator<Statement> it = parser.declarations.listIterator(parser.declarations.size());
	while (!found && it.hasPrevious()) {
		Statement prev = it.previous();
		found = (prev instanceof PHPMethodDeclaration) || (prev instanceof LambdaFunctionDeclaration);
	}
	if (parser.declarations.isEmpty() || !found) {
		parser.reportError(new ASTError(yieldleft, yieldright), "syntax error, the yield expression can only be used inside a function");
		parser.pendingStatement = yield;
	}
	RESULT = yield;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ifTrue, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, null, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // expr_without_variable ::= expr T_COALESCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(expr1left, expr2right, expr1, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_INT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_REAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_OBJECT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_BOOL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_UNSET);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // NT$13 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	LambdaFunctionDeclaration functionDeclaration = new LambdaFunctionDeclaration(sleft, varsListright, paramList, varsList,
		new Block(varsListright, varsListright, null), isReference.booleanValue(), false, returnType);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$13",155, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars return_type NT$13 lambda_function_body 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		LambdaFunctionDeclaration body = (LambdaFunctionDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // NT$14 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	LambdaFunctionDeclaration functionDeclaration = new LambdaFunctionDeclaration(sleft, varsListright, paramList, varsList,
		new Block(varsListright, varsListright, null), isReference.booleanValue(), true, returnType);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$14",156, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars return_type NT$14 lambda_function_body 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		LambdaFunctionDeclaration body = (LambdaFunctionDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // lambda_function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              LambdaFunctionDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	LambdaFunctionDeclaration functionDeclaration = (LambdaFunctionDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lambda_function_body",119, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // lambda_function_body ::= error 
            {
              LambdaFunctionDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (LambdaFunctionDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lambda_function_body",119, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // lexical_vars ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // lexical_var_list ::= lexical_var_list T_COMMA lexical_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // lexical_var_list ::= lexical_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // lexical_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varleft, varright, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // lexical_var ::= T_REFERENCE T_VARIABLE 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReferenceExpression(refleft, varright, new VariableReference(varleft, varright, var));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // function_call ::= name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM member_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	if (functionName.getClass() == SimpleReference.class) {
		RESULT = new StaticMethodInvocation(classNameleft, endright, className, functionName, (SimpleReference) functionName, parameters);
	}else{
		RESULT = new ReflectionStaticMethodInvocation(classNameleft, endright, className, functionName, parameters);
	}


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM member_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters);
	RESULT = functionInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // function_call ::= callable_expr T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // class_name ::= T_STATIC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FullyQualifiedReference(sleft, sright, "static", null);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // class_name ::= name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // fully_qualified_class_name ::= namespace_name 
            {
              TypeReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		name.setNamespace(new NamespaceReference(nameleft, nameleft, null));
	}

	name.getNamespace().setLocal(true);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // class_name_reference ::= class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // class_name_reference ::= new_variable 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // backticks_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // backticks_expr ::= encaps_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // scalar ::= T_LNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // scalar ::= T_DNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // scalar ::= T_BNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_BIN);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // scalar ::= T_LINE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // scalar ::= T_FILE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // scalar ::= T_DIR 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // scalar ::= T_CLASS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // scalar ::= T_TRAIT_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__TRAIT__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // scalar ::= T_METHOD_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // scalar ::= T_FUNC_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // scalar ::= T_NS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(labelleft, eright, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(startleft, endright, list, Quote.QT_QUOTE);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(startleft, endright, list, Quote.QT_SINGLE);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // scalar ::= dereferencable_scalar 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression name = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // scalar ::= constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression classConstant = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // expr ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // variable ::= callable_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // variable ::= static_member 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticFieldAccess s = (StaticFieldAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // variable ::= dereferencable T_OBJECT_OPERATOR property_name 
            {
              Expression RESULT =null;
		int dispatchleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int dispatchright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression dispatch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression property = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(dispatchleft, propertyright, dispatch, property);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // dereferencable ::= variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // dereferencable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // dereferencable ::= dereferencable_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // callable_expr ::= callable_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // callable_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // callable_expr ::= dereferencable_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // dereferencable_scalar ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // dereferencable_scalar ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // dereferencable_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // callable_variable ::= simple_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // callable_variable ::= dereferencable T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (d.getClass() == VariableReference.class) {
		RESULT = new ArrayVariableReference(dleft, eright, ((VariableReference) d).getName(), dim, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		RESULT = new ReflectionArrayVariableReference(dleft, eright, d, dim, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // callable_variable ::= constant T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(dleft, eright, d, dim, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // callable_variable ::= dereferencable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (d.getClass() == VariableReference.class) {
		RESULT = new ArrayVariableReference(dleft, eright, ((VariableReference) d).getName(), dim, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		RESULT = new ReflectionArrayVariableReference(dleft, eright, d, dim, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // callable_variable ::= dereferencable T_OBJECT_OPERATOR property_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	if (memberProperty.getClass() == SimpleReference.class) {
		RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty, paramsList);
	} else {
		RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty, paramsList);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // callable_variable ::= function_call 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = c;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // constant ::= name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = detectScalar(name);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM identifier 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varright, className, new ConstantReference(varleft, varright, var));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM identifier 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varright, className, new ConstantReference(varleft, varright, var));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              StaticFieldAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              StaticFieldAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // new_variable ::= simple_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // new_variable ::= new_variable T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (varName.getClass() == VariableReference.class) {
		RESULT = new ArrayVariableReference(varNameleft, eright, ((VariableReference) varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		RESULT = new ReflectionArrayVariableReference(varNameleft, eright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // new_variable ::= new_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (varName.getClass() == VariableReference.class) {
		RESULT = new ArrayVariableReference(varNameleft, eright, ((VariableReference) varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		RESULT = new ReflectionArrayVariableReference(varNameleft, eright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // new_variable ::= new_variable T_OBJECT_OPERATOR property_name 
            {
              Expression RESULT =null;
		int dispatcherleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int dispatcherright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression dispatcher = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression property = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(dispatcherleft, propertyright, dispatcher, property);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // new_variable ::= class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // new_variable ::= new_variable T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // variable_class_name ::= dereferencable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_class_name",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // optional_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_expr",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // optional_expr ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_expr",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // member_name ::= identifier 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_name",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // member_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_name",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // member_name ::= simple_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_name",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // property_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_name",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // property_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_name",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // property_name ::= simple_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_name",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression element = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);
	}
	RESULT = listElements;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // assignment_list_element ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // assignment_list_element ::= list_variable 
            {
              Expression RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ListVariable vars = (ListVariable)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = vars;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // assignment_list_element ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, expr);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(keyleft, varright, key, value);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // non_empty_array_pair_list ::= T_REFERENCE variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	ReferenceExpression ref = new ReferenceExpression(startleft, varright, var);
	ArrayElement element = new ArrayElement(startleft, varright, ref);
	list.add(element);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // encaps_list ::= encaps_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // encaps_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // encaps_var ::= T_VARIABLE T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayVariableReference(varNameleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // encaps_var ::= T_VARIABLE T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(varNameleft, stringright, new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL), new SimpleReference(stringleft, stringright, string));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new Scalar(varNameleft, varNameright, varName, Scalar.TYPE_STRING));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new ArrayVariableReference(varNameleft, cright, varName, index, ArrayVariableReference.VARIABLE_ARRAY));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft, numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // encaps_var_offset ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // yield_expr ::= T_YIELD 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",141, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // yield_expr ::= T_YIELD expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",141, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // yield_expr ::= T_YIELD expr T_DOUBLE_ARROW expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, key, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",141, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // yield_expr ::= T_YIELD_FROM expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, expr, YieldExpression.OP_FROM);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",141, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CompilerAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CompilerAstParser$do_action_part00000000(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CompilerAstParser$do_action_part00000001(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
