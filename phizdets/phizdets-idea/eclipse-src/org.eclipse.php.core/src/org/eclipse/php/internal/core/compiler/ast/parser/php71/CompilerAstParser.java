
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package org.eclipse.php.internal.core.compiler.ast.parser.php71;

import java.util.*;
import org.eclipse.dltk.ast.*;
import org.eclipse.dltk.ast.declarations.*;
import org.eclipse.dltk.ast.expressions.*;
import org.eclipse.dltk.ast.references.*;
import org.eclipse.dltk.ast.statements.*;
import org.eclipse.php.core.compiler.ast.nodes.*;
import org.eclipse.php.internal.core.compiler.ast.parser.*;
import org.eclipse.php.internal.core.ast.scanner.php71.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CompilerAstParser extends AbstractASTParser {

 public final Class getSymbolContainer() {
    return CompilerParserConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public CompilerAstParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CompilerAstParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompilerAstParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u021b\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\007\003\000\002\007\005\000\002\021\004\000" +
    "\002\021\002\000\002\122\003\000\002\122\005\000\002" +
    "\122\004\000\002\020\004\000\002\020\002\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\006" +
    "\000\002\216\002\000\002\022\006\000\002\217\002\000" +
    "\002\022\005\000\002\022\005\000\002\022\006\000\002" +
    "\022\005\000\002\022\006\000\002\022\005\000\002\134" +
    "\003\000\002\134\003\000\002\135\005\000\002\135\003" +
    "\000\002\017\003\000\002\017\003\000\002\013\006\000" +
    "\002\012\006\000\002\014\005\000\002\014\003\000\002" +
    "\015\003\000\002\015\004\000\002\016\005\000\002\016" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\004" +
    "\000\002\010\006\000\002\011\004\000\002\024\004\000" +
    "\002\024\002\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\006\000\002\023\003\000\002\023" +
    "\004\000\002\023\003\000\002\023\003\000\002\220\002" +
    "\000\002\026\006\000\002\026\011\000\002\026\014\000" +
    "\002\026\007\000\002\026\011\000\002\026\013\000\002" +
    "\026\007\000\002\026\004\000\002\026\005\000\002\026" +
    "\004\000\002\026\005\000\002\026\004\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\003\000\002\026\004\000\002" +
    "\026\005\000\002\026\007\000\002\026\011\000\002\026" +
    "\013\000\002\026\007\000\002\026\003\000\002\026\010" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\147\003\000\002\147\002\000\002\150\003\000\002" +
    "\150\004\000\002\151\012\000\002\152\003\000\002\152" +
    "\005\000\002\213\003\000\002\213\002\000\002\214\006" +
    "\000\002\027\003\000\002\027\005\000\002\030\003\000" +
    "\002\031\003\000\002\031\005\000\002\140\003\000\002" +
    "\141\003\000\002\065\002\000\002\065\003\000\002\221" +
    "\002\000\002\222\002\000\002\223\002\000\002\153\015" +
    "\000\002\171\005\000\002\171\003\000\002\224\002\000" +
    "\002\225\002\000\002\154\014\000\002\226\002\000\002" +
    "\154\011\000\002\173\003\000\002\173\002\000\002\170" +
    "\003\000\002\170\003\000\002\155\003\000\002\155\004" +
    "\000\002\155\004\000\002\155\003\000\002\156\002\000" +
    "\002\156\004\000\002\156\004\000\002\117\003\000\002" +
    "\120\002\000\002\120\004\000\002\157\002\000\002\157" +
    "\004\000\002\160\003\000\002\160\005\000\002\160\005" +
    "\000\002\160\003\000\002\032\003\000\002\032\004\000" +
    "\002\032\006\000\002\032\005\000\002\033\003\000\002" +
    "\033\006\000\002\034\003\000\002\034\006\000\002\035" +
    "\003\000\002\035\006\000\002\036\005\000\002\036\007" +
    "\000\002\037\005\000\002\037\006\000\002\037\006\000" +
    "\002\037\007\000\002\040\002\000\002\040\007\000\002" +
    "\040\006\000\002\041\003\000\002\041\003\000\002\042" +
    "\003\000\002\042\006\000\002\043\002\000\002\043\010" +
    "\000\002\044\002\000\002\044\011\000\002\045\002\000" +
    "\002\045\004\000\002\046\002\000\002\046\005\000\002" +
    "\047\003\000\002\047\002\000\002\053\003\000\002\053" +
    "\005\000\002\053\004\000\002\054\004\000\002\054\005" +
    "\000\002\054\005\000\002\054\006\000\002\054\006\000" +
    "\002\054\007\000\002\054\003\000\002\161\002\000\002" +
    "\161\003\000\002\055\003\000\002\055\002\000\002\056" +
    "\003\000\002\056\005\000\002\071\003\000\002\071\004" +
    "\000\002\124\003\000\002\124\004\000\002\123\003\000" +
    "\002\123\003\000\002\123\003\000\002\125\002\000\002" +
    "\125\004\000\002\057\005\000\002\057\003\000\002\060" +
    "\003\000\002\060\004\000\002\060\006\000\002\061\003" +
    "\000\002\061\005\000\002\062\003\000\002\062\005\000" +
    "\002\063\004\000\002\063\002\000\002\064\005\000\002" +
    "\064\006\000\002\227\002\000\002\230\002\000\002\231" +
    "\002\000\002\064\016\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\174\005\000\002\175\003\000" +
    "\002\175\005\000\002\176\003\000\002\176\005\000\002" +
    "\177\002\000\002\177\003\000\002\200\003\000\002\200" +
    "\004\000\002\201\004\000\002\201\004\000\002\202\005" +
    "\000\002\203\003\000\002\203\005\000\002\204\003\000" +
    "\002\204\003\000\002\205\005\000\002\206\006\000\002" +
    "\206\005\000\002\210\003\000\002\210\003\000\002\210" +
    "\003\000\002\207\002\000\002\207\003\000\002\133\003" +
    "\000\002\133\005\000\002\133\002\000\002\162\003\000" +
    "\002\162\003\000\002\132\002\000\002\132\003\000\002" +
    "\136\003\000\002\136\004\000\002\137\003\000\002\137" +
    "\003\000\002\137\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\127\005\000\002\127\007\000" +
    "\002\127\003\000\002\127\005\000\002\070\005\000\002" +
    "\070\003\000\002\130\005\000\002\130\003\000\002\131" +
    "\005\000\002\066\005\000\002\066\003\000\002\067\002" +
    "\000\002\067\003\000\002\232\002\000\002\212\011\000" +
    "\002\211\005\000\002\211\006\000\002\072\010\000\002" +
    "\072\007\000\002\072\005\000\002\072\006\000\002\072" +
    "\004\000\002\072\005\000\002\072\005\000\002\072\005" +
    "\000\002\072\005\000\002\072\005\000\002\072\005\000" +
    "\002\072\005\000\002\072\005\000\002\072\005\000\002" +
    "\072\005\000\002\072\005\000\002\072\005\000\002\072" +
    "\004\000\002\072\004\000\002\072\004\000\002\072\004" +
    "\000\002\072\005\000\002\072\005\000\002\072\005\000" +
    "\002\072\005\000\002\072\005\000\002\072\005\000\002" +
    "\072\005\000\002\072\005\000\002\072\005\000\002\072" +
    "\005\000\002\072\005\000\002\072\005\000\002\072\005" +
    "\000\002\072\005\000\002\072\005\000\002\072\005\000" +
    "\002\072\005\000\002\072\004\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\005\000\002\072" +
    "\005\000\002\072\005\000\002\072\005\000\002\072\005" +
    "\000\002\072\005\000\002\072\005\000\002\072\005\000" +
    "\002\072\005\000\002\072\005\000\002\072\005\000\002" +
    "\072\003\000\002\072\003\000\002\072\007\000\002\072" +
    "\006\000\002\072\005\000\002\072\003\000\002\072\004" +
    "\000\002\072\004\000\002\072\004\000\002\072\004\000" +
    "\002\072\004\000\002\072\004\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\003\000\002\072" +
    "\005\000\002\072\004\000\002\233\002\000\002\072\013" +
    "\000\002\234\002\000\002\072\014\000\002\172\005\000" +
    "\002\172\003\000\002\050\002\000\002\050\006\000\002" +
    "\051\005\000\002\051\003\000\002\052\003\000\002\052" +
    "\004\000\002\073\006\000\002\073\010\000\002\073\010" +
    "\000\002\073\006\000\002\121\003\000\002\121\003\000" +
    "\002\126\003\000\002\126\005\000\002\126\004\000\002" +
    "\167\003\000\002\167\003\000\002\074\002\000\002\074" +
    "\004\000\002\074\005\000\002\112\002\000\002\112\003" +
    "\000\002\112\003\000\002\075\002\000\002\075\005\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\005\000\002\076\004\000" +
    "\002\076\005\000\002\076\005\000\002\076\005\000\002" +
    "\076\003\000\002\076\003\000\002\077\002\000\002\077" +
    "\003\000\002\100\003\000\002\100\003\000\002\142\003" +
    "\000\002\142\003\000\002\142\005\000\002\144\003\000" +
    "\002\144\005\000\002\144\003\000\002\145\003\000\002" +
    "\145\005\000\002\145\003\000\002\146\006\000\002\146" +
    "\005\000\002\146\003\000\002\143\003\000\002\143\006" +
    "\000\002\143\006\000\002\143\006\000\002\143\010\000" +
    "\002\143\003\000\002\163\003\000\002\163\005\000\002" +
    "\163\005\000\002\164\005\000\002\164\005\000\002\165" +
    "\003\000\002\165\006\000\002\165\006\000\002\165\005" +
    "\000\002\165\005\000\002\165\005\000\002\101\003\000" +
    "\002\102\002\000\002\102\003\000\002\103\003\000\002" +
    "\103\005\000\002\103\003\000\002\104\003\000\002\104" +
    "\005\000\002\104\003\000\002\107\003\000\002\105\002" +
    "\000\002\105\003\000\002\110\003\000\002\110\005\000" +
    "\002\106\005\000\002\106\003\000\002\106\006\000\002" +
    "\106\004\000\002\106\010\000\002\106\006\000\002\111" +
    "\004\000\002\111\004\000\002\111\004\000\002\111\003" +
    "\000\002\111\004\000\002\113\005\000\002\113\003\000" +
    "\002\113\006\000\002\113\005\000\002\113\005\000\002" +
    "\113\005\000\002\113\010\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\115\006\000\002\115\006" +
    "\000\002\115\004\000\002\115\004\000\002\115\006\000" +
    "\002\115\004\000\002\115\004\000\002\166\003\000\002" +
    "\166\005\000\002\116\003\000\002\116\003\000\002\215" +
    "\003\000\002\215\004\000\002\215\006\000\002\215\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u03c3\000\002\001\uffb2\000\004\002\u03c5\001\002\000" +
    "\254\003\124\004\156\005\170\006\115\007\010\010\065" +
    "\011\035\013\063\015\100\020\137\021\022\022\131\023" +
    "\125\024\046\026\034\030\107\032\167\035\111\037\141" +
    "\043\056\044\127\045\074\046\116\047\146\050\150\051" +
    "\012\052\043\053\041\055\165\057\027\060\011\062\102" +
    "\063\160\064\032\065\060\066\033\067\154\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\107\070\112\104\113\140\114\042\115\072\116\025\117" +
    "\057\120\031\121\075\122\052\123\133\124\114\131\067" +
    "\150\007\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\044\222\064\223" +
    "\020\227\163\232\106\233\121\234\062\235\103\237\126" +
    "\241\123\001\001\000\002\001\ufe47\000\002\001\uff6e\000" +
    "\002\001\ufe4a\000\006\013\063\232\106\001\002\000\160" +
    "\004\156\006\115\007\010\010\065\011\173\013\063\020" +
    "\137\035\111\046\176\051\012\052\043\063\160\064\032" +
    "\074\162\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\112\175\113\140\114\042\115\072\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\170" +
    "\113\171\073\176\157\177\016\201\054\202\164\203\030" +
    "\204\144\205\040\206\135\207\077\210\145\211\076\212" +
    "\037\213\053\215\101\221\174\227\163\232\106\233\121" +
    "\234\062\235\103\241\123\001\ufdea\000\004\227\u03ba\001" +
    "\002\000\002\001\ufe7c\000\002\001\ufe6d\000\160\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\174\227\163\232\106\233\121\234\062" +
    "\235\103\241\123\001\002\000\076\034\314\126\304\127" +
    "\324\130\274\147\277\150\u03b8\151\273\152\316\153\275" +
    "\154\306\155\315\156\322\157\307\160\270\161\305\162" +
    "\321\163\317\164\301\165\320\166\313\167\310\170\323" +
    "\171\302\172\312\173\300\174\311\175\271\200\276\243" +
    "\303\244\272\001\002\000\004\066\u027e\001\002\000\002" +
    "\001\ufe45\000\160\004\156\006\115\007\010\010\065\011" +
    "\173\013\063\020\137\035\111\046\176\051\012\052\043" +
    "\063\160\064\032\074\162\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\112\175\113\140\114\042" +
    "\115\072\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\170\113\171\073\176\157\177\016\201\054" +
    "\202\164\203\030\204\144\205\040\206\135\207\077\210" +
    "\145\211\076\212\037\213\053\215\101\221\174\227\163" +
    "\232\106\233\121\234\062\235\103\241\123\001\002\000" +
    "\002\001\ufe34\000\002\001\uff59\000\002\001\uff88\000\050" +
    "\072\ufe32\107\ufe32\111\ufe32\132\u01db\133\u01df\134\u01dc\135" +
    "\u01e8\136\u01e0\137\u01e7\140\u01e2\141\u01e5\142\u01de\143\u01da" +
    "\144\u01e1\145\u01e3\146\u01dd\201\u01e4\202\u01e9\213\ufe32\001" +
    "\ufe37\000\020\011\173\020\244\046\u0394\047\u0398\115\u0399" +
    "\117\057\227\242\001\002\000\160\004\156\006\115\007" +
    "\010\010\065\011\173\013\063\020\137\035\111\046\176" +
    "\051\012\052\043\063\160\064\032\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\112\175" +
    "\113\140\114\042\115\072\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\004\227\u038c\001\002\000\002\001\uff47\000\004\227" +
    "\u037b\001\002\000\004\231\u037a\001\ufdec\000\014\013\u029a" +
    "\017\u0377\104\u0376\105\u029c\106\u029b\001\002\000\160\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\174\227\163\232\106\233\121\234" +
    "\062\235\103\241\123\001\002\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\004\107\u035b\001\002\000\002\001" +
    "\ufe46\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\006" +
    "\013\u0352\046\u0116\001\ufe5a\000\002\001\ufe24\000\004\227" +
    "\u0349\001\002\000\002\001\ufe43\000\002\001\ufe42\000\004" +
    "\011\u0340\001\002\000\004\227\u033d\001\002\000\162\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\u0158\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\155\u0152" +
    "\170\113\171\073\176\157\177\016\201\054\202\164\203" +
    "\030\204\144\205\040\206\135\207\077\210\145\211\076" +
    "\212\037\213\053\215\101\221\174\227\163\232\106\233" +
    "\121\234\062\235\103\241\123\001\ufe0e\000\030\011\173" +
    "\013\063\020\137\075\013\112\175\115\072\117\057\213" +
    "\u014d\221\341\227\u014f\232\106\001\002\000\014\072\ufe30" +
    "\107\ufe30\111\ufe30\213\ufe30\227\ufe2d\001\ufe3b\000\162\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\150\u0335" +
    "\170\113\171\073\176\157\177\016\201\054\202\164\203" +
    "\030\204\144\205\040\206\135\207\077\210\145\211\076" +
    "\212\037\213\053\215\101\221\174\227\163\232\106\233" +
    "\121\234\062\235\103\241\123\001\002\000\002\001\ufdeb" +
    "\000\004\227\u0332\001\002\000\004\111\u032b\001\002\000" +
    "\012\013\u029a\017\u0329\105\u029c\106\u029b\001\ufe50\000\002" +
    "\001\ufefb\000\004\066\u027f\001\002\000\002\001\ufe49\000" +
    "\004\213\u016a\001\ufe3a\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\002\001\uff87\000\002\001\ufe77\000\006\011" +
    "\173\117\057\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\004\011\u031f\001\002\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\160\004\156\006\115\007\010\010\065\011" +
    "\173\013\063\020\137\035\111\046\176\051\012\052\043" +
    "\063\160\064\032\074\162\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\112\175\113\140\114\042" +
    "\115\072\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\170\113\171\073\176\157\177\016\201\054" +
    "\202\164\203\030\204\144\205\040\206\135\207\077\210" +
    "\145\211\076\212\037\213\053\215\101\221\174\227\163" +
    "\232\106\233\121\234\062\235\103\241\123\001\002\000" +
    "\002\001\uff75\000\022\011\173\013\063\066\u0308\112\175" +
    "\115\072\117\057\221\341\232\106\001\002\000\004\227" +
    "\u02ff\001\002\000\012\013\u029a\017\u029d\105\u029c\106\u029b" +
    "\001\002\000\010\011\173\115\u0114\117\057\001\uffab\000" +
    "\010\072\u02e8\107\u02e6\213\u02e7\001\ufe18\000\010\013\063" +
    "\107\u02e3\232\106\001\002\000\004\227\u02c9\001\002\000" +
    "\006\111\ufe59\227\u02c6\001\ufe23\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\002\001\uffb0\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\002\001\ufe4b\000\004\155\200\001\uff58\000" +
    "\004\227\ufe2f\001\ufe35\000\002\001\uff8b\000\012\013\u029a" +
    "\017\u029d\105\u029c\106\u029b\001\002\000\004\011\u022b\001" +
    "\002\000\002\001\ufe44\000\002\001\uff89\000\236\003\124" +
    "\004\156\005\170\006\115\007\010\010\065\011\035\013" +
    "\063\015\100\020\137\021\022\022\131\023\125\024\046" +
    "\026\034\030\107\032\167\035\111\037\141\043\056\044" +
    "\127\045\074\046\176\050\150\051\012\052\043\053\041" +
    "\055\165\057\231\060\011\062\102\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\107\070\112\175\113\140\114\042\115\072\116" +
    "\025\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\150\007\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\044\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\002\001\uff44\000\162\004\156\006\115\007\010\010" +
    "\065\011\173\013\063\020\137\035\111\046\176\051\012" +
    "\052\043\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\112\175\113\140" +
    "\114\042\115\072\117\057\120\031\121\075\122\052\123" +
    "\133\124\114\131\067\150\u0222\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\002\001\ufe29\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\002\001\uffaf\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\002\001\uffba\000\160\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\174\227\163\232\106\233\121\234\062" +
    "\235\103\241\123\001\002\000\004\227\u0218\001\002\000" +
    "\002\001\ufe2a\000\002\001\ufe41\000\004\227\u01fd\001\002" +
    "\000\002\001\uff5a\000\002\001\ufe48\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\006\011\173\117\057\001\002\000\002\001" +
    "\ufe7b\000\162\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\150\u01d5\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\002\001\ufe36\000\004\111\u0180\001\002\000\004\115" +
    "\u017e\001\uffbb\000\002\001\uff40\000\002\001\uffb6\000\004" +
    "\227\u0179\001\ufe53\000\160\004\156\006\115\007\010\010" +
    "\065\011\173\013\063\020\137\035\111\046\176\051\012" +
    "\052\043\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\112\175\113\140" +
    "\114\042\115\072\117\057\120\031\121\075\122\052\123" +
    "\133\124\114\131\067\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\174" +
    "\227\163\232\106\233\121\234\062\235\103\241\123\001" +
    "\002\000\004\227\u0172\001\002\000\002\001\uffb1\000\004" +
    "\227\u016f\001\002\000\160\004\156\006\115\007\010\010" +
    "\065\011\173\013\063\020\137\035\111\046\176\051\012" +
    "\052\043\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\112\175\113\140" +
    "\114\042\115\072\117\057\120\031\121\075\122\052\123" +
    "\133\124\114\131\067\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\174" +
    "\227\163\232\106\233\121\234\062\235\103\241\123\001" +
    "\002\000\030\011\173\013\063\020\137\075\013\112\175" +
    "\115\072\117\057\213\u014d\221\341\227\u014f\232\106\001" +
    "\002\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\002" +
    "\001\uffb3\000\004\227\u0139\001\002\000\004\227\171\001" +
    "\002\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\076" +
    "\034\314\126\304\127\324\130\274\147\277\151\273\152" +
    "\316\153\275\154\306\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\230\u011f\243\303\244\272\001\002\000\002\001" +
    "\ufdec\000\004\046\u0116\001\ufe5a\000\004\115\u0114\001\002" +
    "\000\004\155\200\001\uff58\000\004\227\201\001\002\000" +
    "\002\001\uff57\000\024\003\212\011\173\075\211\112\175" +
    "\115\072\117\057\147\205\230\uff17\240\207\001\uff0c\000" +
    "\002\001\uff0b\000\002\001\uff04\000\002\001\uff16\000\016" +
    "\011\173\075\211\112\175\115\072\117\057\240\207\001" +
    "\002\000\010\013\265\155\264\242\263\001\002\000\002" +
    "\001\uff01\000\004\125\261\001\uff18\000\002\001\uff02\000" +
    "\002\001\uff0d\000\004\230\215\001\002\000\002\001\uff00" +
    "\000\004\057\216\001\ufe64\000\004\227\250\001\002\000" +
    "\004\231\221\001\ufeff\000\002\001\ufe6a\000\020\011\173" +
    "\075\211\112\175\115\072\117\057\147\205\240\207\001" +
    "\002\000\002\001\ufefe\000\006\003\225\107\224\001\002" +
    "\000\002\001\uff90\000\002\001\ufe65\000\002\001\ufe69\000" +
    "\254\003\124\004\156\005\170\006\115\007\010\010\065" +
    "\011\035\013\063\015\100\020\137\021\022\022\131\023" +
    "\125\024\046\026\034\030\107\032\167\035\111\037\141" +
    "\043\056\044\127\045\074\046\116\050\150\051\012\052" +
    "\043\053\041\055\165\057\231\060\011\062\102\063\160" +
    "\064\032\065\232\066\033\067\154\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\107\070" +
    "\110\234\112\175\113\140\114\042\115\072\116\025\117" +
    "\057\120\031\121\075\122\052\123\133\124\114\131\067" +
    "\150\007\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\044\222\064\223" +
    "\020\227\163\232\106\233\121\234\062\235\103\237\126" +
    "\241\123\001\002\000\002\001\uff91\000\006\020\244\227" +
    "\242\001\002\000\004\227\237\001\002\000\002\001\uff8e" +
    "\000\002\001\ufe66\000\002\001\uff8d\000\002\001\uff8f\000" +
    "\004\230\240\001\002\000\004\150\241\001\002\000\002" +
    "\001\uff8c\000\004\020\246\001\002\000\004\150\245\001" +
    "\002\000\002\001\uff5c\000\002\001\uff73\000\004\230\247" +
    "\001\002\000\002\001\uff5b\000\006\013\254\155\251\001" +
    "\002\000\004\013\260\001\002\000\002\001\ufe61\000\006" +
    "\125\256\230\255\001\002\000\002\001\ufe60\000\002\001" +
    "\ufe63\000\006\013\254\155\251\001\002\000\002\001\ufe62" +
    "\000\002\001\ufe5f\000\026\003\212\011\173\075\211\112" +
    "\175\115\072\117\057\125\uff14\147\205\230\uff14\240\207" +
    "\001\uff0c\000\002\001\uff15\000\004\013\u0112\001\002\000" +
    "\006\013\u010e\242\u010d\001\002\000\004\132\266\001\uff13" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\074\034" +
    "\314\126\304\127\324\130\274\147\277\151\273\152\316" +
    "\153\275\154\306\155\315\156\322\157\307\160\270\161" +
    "\305\162\321\163\317\164\301\165\320\166\313\167\310" +
    "\170\323\171\302\172\312\173\300\174\311\175\271\200" +
    "\276\243\303\244\272\001\uff0f\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\160\004\156\006\115\007\010\010" +
    "\065\011\173\013\063\020\137\035\111\046\176\051\012" +
    "\052\043\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\112\175\113\140" +
    "\114\042\115\072\117\057\120\031\121\075\122\052\123" +
    "\133\124\114\131\067\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\174" +
    "\227\163\232\106\233\121\234\062\235\103\241\123\001" +
    "\002\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\160" +
    "\004\156\006\115\007\010\010\065\011\173\013\063\020" +
    "\137\035\111\046\176\051\012\052\043\063\160\064\032" +
    "\074\162\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\112\175\113\140\114\042\115\072\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\170" +
    "\113\171\073\176\157\177\016\201\054\202\164\203\030" +
    "\204\144\205\040\206\135\207\077\210\145\211\076\212" +
    "\037\213\053\215\101\221\174\227\163\232\106\233\121" +
    "\234\062\235\103\241\123\001\002\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\160\004\156\006\115\007\010\010\065\011" +
    "\173\013\063\020\137\035\111\046\176\051\012\052\043" +
    "\063\160\064\032\074\162\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\112\175\113\140\114\042" +
    "\115\072\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\170\113\171\073\176\157\177\016\201\054" +
    "\202\164\203\030\204\144\205\040\206\135\207\077\210" +
    "\145\211\076\212\037\213\053\215\101\221\174\227\163" +
    "\232\106\233\121\234\062\235\103\241\123\001\002\000" +
    "\162\004\156\006\115\007\010\010\065\011\173\013\063" +
    "\020\137\035\111\046\176\051\012\052\043\063\160\064" +
    "\032\074\162\075\013\076\021\077\047\100\050\101\143" +
    "\102\006\103\036\112\175\113\140\114\042\115\072\117" +
    "\057\120\031\121\075\122\052\123\133\124\114\131\067" +
    "\170\113\171\073\176\157\177\016\201\054\202\164\203" +
    "\030\204\144\205\040\206\135\207\077\210\145\211\076" +
    "\212\037\213\053\215\101\221\174\227\163\231\u0102\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\160" +
    "\004\156\006\115\007\010\010\065\011\173\013\063\020" +
    "\137\035\111\046\176\051\012\052\043\063\160\064\032" +
    "\074\162\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\112\175\113\140\114\042\115\072\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\170" +
    "\113\171\073\176\157\177\016\201\054\202\164\203\030" +
    "\204\144\205\040\206\135\207\077\210\145\211\076\212" +
    "\037\213\053\215\101\221\174\227\163\232\106\233\121" +
    "\234\062\235\103\241\123\001\002\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\160\004\156\006\115\007\010\010\065\011" +
    "\173\013\063\020\137\035\111\046\176\051\012\052\043" +
    "\063\160\064\032\074\162\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\112\175\113\140\114\042" +
    "\115\072\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\170\113\171\073\176\157\177\016\201\054" +
    "\202\164\203\030\204\144\205\040\206\135\207\077\210" +
    "\145\211\076\212\037\213\053\215\101\221\174\227\163" +
    "\232\106\233\121\234\062\235\103\241\123\001\002\000" +
    "\160\004\156\006\115\007\010\010\065\011\173\013\063" +
    "\020\137\035\111\046\176\051\012\052\043\063\160\064" +
    "\032\074\162\075\013\076\021\077\047\100\050\101\143" +
    "\102\006\103\036\112\175\113\140\114\042\115\072\117" +
    "\057\120\031\121\075\122\052\123\133\124\114\131\067" +
    "\170\113\171\073\176\157\177\016\201\054\202\164\203" +
    "\030\204\144\205\040\206\135\207\077\210\145\211\076" +
    "\212\037\213\053\215\101\221\174\227\163\232\106\233" +
    "\121\234\062\235\103\241\123\001\002\000\160\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\174\227\163\232\106\233\121\234\062" +
    "\235\103\241\123\001\002\000\160\004\156\006\115\007" +
    "\010\010\065\011\173\013\063\020\137\035\111\046\176" +
    "\051\012\052\043\063\160\064\032\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\112\175" +
    "\113\140\114\042\115\072\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\160\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\174\227\163\232\106\233\121\234" +
    "\062\235\103\241\123\001\002\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\160\004\156\006\115\007\010\010" +
    "\065\011\173\013\063\020\137\035\111\046\176\051\012" +
    "\052\043\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\112\175\113\140" +
    "\114\042\115\072\117\057\120\031\121\075\122\052\123" +
    "\133\124\114\131\067\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\174" +
    "\227\163\232\106\233\121\234\062\235\103\241\123\001" +
    "\002\000\020\011\173\013\063\112\175\115\072\117\057" +
    "\221\341\232\106\001\002\000\160\004\156\006\115\007" +
    "\010\010\065\011\173\013\063\020\137\035\111\046\176" +
    "\051\012\052\043\063\160\064\032\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\112\175" +
    "\113\140\114\042\115\072\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\160\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\174\227\163\232\106\233\121\234" +
    "\062\235\103\241\123\001\002\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\160\004\156\006\115\007\010\010" +
    "\065\011\173\013\063\020\137\035\111\046\176\051\012" +
    "\052\043\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\112\175\113\140" +
    "\114\042\115\072\117\057\120\031\121\075\122\052\123" +
    "\133\124\114\131\067\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\174" +
    "\227\163\232\106\233\121\234\062\235\103\241\123\001" +
    "\002\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\160" +
    "\004\156\006\115\007\010\010\065\011\173\013\063\020" +
    "\137\035\111\046\176\051\012\052\043\063\160\064\032" +
    "\074\162\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\112\175\113\140\114\042\115\072\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\170" +
    "\113\171\073\176\157\177\016\201\054\202\164\203\030" +
    "\204\144\205\040\206\135\207\077\210\145\211\076\212" +
    "\037\213\053\215\101\221\174\227\163\232\106\233\121" +
    "\234\062\235\103\241\123\001\002\000\070\034\314\130" +
    "\274\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\243\303\244\272\001" +
    "\ufe98\000\014\034\314\172\312\173\300\174\311\175\271" +
    "\001\ufe93\000\040\034\314\162\321\163\317\164\301\165" +
    "\320\166\313\167\310\170\323\171\302\172\312\173\300" +
    "\174\311\175\271\200\276\243\303\001\ufe85\000\030\034" +
    "\314\166\313\167\310\170\323\171\302\172\312\173\300" +
    "\174\311\175\271\200\276\243\303\001\ufe82\000\030\034" +
    "\314\166\313\167\310\170\323\171\302\172\312\173\300" +
    "\174\311\175\271\200\276\243\303\001\ufe81\000\030\034" +
    "\314\166\313\167\310\170\323\171\302\172\312\173\300" +
    "\174\311\175\271\200\276\243\303\001\ufe80\000\056\034" +
    "\314\153\275\154\306\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\243\303\001\ufe9b\000\050\034\314\156\322\157" +
    "\307\160\270\161\305\162\321\163\317\164\301\165\320" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\243\303\001\ufe96\000\002\001\ufe7e" +
    "\000\002\001\ufe59\000\012\072\350\107\345\111\347\213" +
    "\346\001\ufe54\000\004\111\343\001\ufe55\000\002\001\ufe5a" +
    "\000\002\001\ufe1e\000\006\013\063\232\106\001\002\000" +
    "\002\001\ufe1a\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\ufe17\000\006\013" +
    "\063\232\106\001\002\000\014\011\173\013\063\107\353" +
    "\117\057\232\106\001\002\000\002\001\ufe1b\000\002\001" +
    "\ufe10\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\002" +
    "\001\ufe12\000\076\034\314\110\356\126\304\127\324\130" +
    "\274\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\243\303\244\272\001" +
    "\002\000\002\001\ufe11\000\002\001\ufe19\000\074\034\314" +
    "\126\304\127\324\130\274\147\277\151\273\152\316\153" +
    "\275\154\306\155\315\156\322\157\307\160\270\161\305" +
    "\162\321\163\317\164\301\165\320\166\313\167\310\170" +
    "\323\171\302\172\312\173\300\174\311\175\271\200\276" +
    "\243\303\244\272\001\ufe16\000\004\214\362\001\002\000" +
    "\002\001\ufe1d\000\076\034\314\110\364\126\304\127\324" +
    "\130\274\147\277\151\273\152\316\153\275\154\306\155" +
    "\315\156\322\157\307\160\270\161\305\162\321\163\317" +
    "\164\301\165\320\166\313\167\310\170\323\171\302\172" +
    "\312\173\300\174\311\175\271\200\276\243\303\244\272" +
    "\001\002\000\002\001\ufe1c\000\022\034\314\170\323\171" +
    "\302\172\312\173\300\174\311\175\271\200\276\001\ufe8d" +
    "\000\004\034\314\001\ufe91\000\004\034\314\001\ufe8f\000" +
    "\022\034\314\170\323\171\302\172\312\173\300\174\311" +
    "\175\271\200\276\001\ufe8c\000\040\034\314\162\321\163" +
    "\317\164\301\165\320\166\313\167\310\170\323\171\302" +
    "\172\312\173\300\174\311\175\271\200\276\243\303\001" +
    "\ufe84\000\052\034\314\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\243\303\001\ufe95\000\040\034\314\162\321\163" +
    "\317\164\301\165\320\166\313\167\310\170\323\171\302" +
    "\172\312\173\300\174\311\175\271\200\276\243\303\001" +
    "\ufe86\000\072\034\314\127\324\130\274\147\277\151\273" +
    "\152\316\153\275\154\306\155\315\156\322\157\307\160" +
    "\270\161\305\162\321\163\317\164\301\165\320\166\313" +
    "\167\310\170\323\171\302\172\312\173\300\174\311\175" +
    "\271\200\276\243\303\244\272\001\ufe9a\000\026\034\314" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\001\ufe7f\000\014\034\314\172\312" +
    "\173\300\174\311\175\271\001\ufe92\000\030\034\314\166" +
    "\313\167\310\170\323\171\302\172\312\173\300\174\311" +
    "\175\271\200\276\243\303\001\ufe83\000\004\034\314\001" +
    "\ufe90\000\076\034\314\126\304\127\324\130\274\147\277" +
    "\151\273\152\316\153\275\154\306\155\315\156\322\157" +
    "\307\160\270\161\305\162\321\163\317\164\301\165\320" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\231\u0104\243\303\244\272\001\002" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\074\034" +
    "\314\126\304\127\324\130\274\147\277\151\273\152\316" +
    "\153\275\154\306\155\315\156\322\157\307\160\270\161" +
    "\305\162\321\163\317\164\301\165\320\166\313\167\310" +
    "\170\323\171\302\172\312\173\300\174\311\175\271\200" +
    "\276\243\303\244\272\001\ufe79\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\074\034\314\126\304\127\324\130" +
    "\274\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\243\303\244\272\001" +
    "\ufe7a\000\014\034\314\172\312\173\300\174\311\175\271" +
    "\001\ufe94\000\054\034\314\154\306\155\315\156\322\157" +
    "\307\160\270\161\305\162\321\163\317\164\301\165\320" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\243\303\001\ufe97\000\066\034\314" +
    "\147\277\151\273\152\316\153\275\154\306\155\315\156" +
    "\322\157\307\160\270\161\305\162\321\163\317\164\301" +
    "\165\320\166\313\167\310\170\323\171\302\172\312\173" +
    "\300\174\311\175\271\200\276\243\303\244\272\001\ufe99" +
    "\000\060\034\314\152\316\153\275\154\306\155\315\156" +
    "\322\157\307\160\270\161\305\162\321\163\317\164\301" +
    "\165\320\166\313\167\310\170\323\171\302\172\312\173" +
    "\300\174\311\175\271\200\276\243\303\001\ufe9c\000\064" +
    "\034\314\151\273\152\316\153\275\154\306\155\315\156" +
    "\322\157\307\160\270\161\305\162\321\163\317\164\301" +
    "\165\320\166\313\167\310\170\323\171\302\172\312\173" +
    "\300\174\311\175\271\200\276\243\303\244\272\001\ufe78" +
    "\000\004\034\314\001\ufe8e\000\040\034\314\162\321\163" +
    "\317\164\301\165\320\166\313\167\310\170\323\171\302" +
    "\172\312\173\300\174\311\175\271\200\276\243\303\001" +
    "\ufe87\000\004\013\u0111\001\002\000\004\132\u010f\001\uff11" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\074\034" +
    "\314\126\304\127\324\130\274\147\277\151\273\152\316" +
    "\153\275\154\306\155\315\156\322\157\307\160\270\161" +
    "\305\162\321\163\317\164\301\165\320\166\313\167\310" +
    "\170\323\171\302\172\312\173\300\174\311\175\271\200" +
    "\276\243\303\244\272\001\uff0e\000\002\001\uff10\000\002" +
    "\001\uff12\000\002\001\uff03\000\006\011\173\117\057\001" +
    "\002\000\002\001\uffb5\000\004\155\200\001\uff58\000\004" +
    "\227\u0118\001\002\000\024\003\212\011\173\075\211\112" +
    "\175\115\072\117\057\147\205\230\uff17\240\207\001\uff0c" +
    "\000\004\230\u011a\001\002\000\004\057\216\001\ufe64\000" +
    "\004\231\221\001\ufeff\000\002\001\ufe68\000\006\003\225" +
    "\107\224\001\002\000\002\001\ufe67\000\240\003\124\004" +
    "\156\005\170\006\115\007\010\010\065\011\035\013\063" +
    "\015\100\020\137\021\022\022\131\023\125\024\046\026" +
    "\034\030\107\032\167\035\111\037\141\043\056\044\127" +
    "\045\074\046\176\050\150\051\012\052\043\053\041\055" +
    "\165\057\231\060\011\062\102\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\107\070\112\175\113\140\114\042\115\072\116\025" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\150\007\170\113\171\073\176\157\177\016\201\054" +
    "\202\164\203\030\204\144\205\040\206\135\207\077\210" +
    "\145\211\076\212\037\213\053\215\101\221\044\227\163" +
    "\231\u0120\232\106\233\121\234\062\235\103\241\123\001" +
    "\002\000\002\001\uff90\000\002\001\uff20\000\006\217\u0125" +
    "\220\u0124\001\uff1c\000\002\001\uff85\000\236\003\124\004" +
    "\156\005\170\006\115\007\010\010\065\011\035\013\063" +
    "\015\100\020\137\021\022\022\131\023\125\024\046\026" +
    "\034\030\107\032\167\035\111\037\141\043\056\044\127" +
    "\045\074\046\176\050\150\051\012\052\043\053\041\055" +
    "\165\057\231\060\011\062\102\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\107\070\112\175\113\140\114\042\115\072\116\025" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\150\007\170\113\171\073\176\157\177\016\201\054" +
    "\202\164\203\030\204\144\205\040\206\135\207\077\210" +
    "\145\211\076\212\037\213\053\215\101\221\044\227\163" +
    "\232\106\233\121\234\062\235\103\241\123\001\002\000" +
    "\004\227\u0126\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\076\034\314\126\304\127\324\130\274\147" +
    "\277\151\273\152\316\153\275\154\306\155\315\156\322" +
    "\157\307\160\270\161\305\162\321\163\317\164\301\165" +
    "\320\166\313\167\310\170\323\171\302\172\312\173\300" +
    "\174\311\175\271\200\276\230\u0128\243\303\244\272\001" +
    "\002\000\236\003\124\004\156\005\170\006\115\007\010" +
    "\010\065\011\035\013\063\015\100\020\137\021\022\022" +
    "\131\023\125\024\046\026\034\030\107\032\167\035\111" +
    "\037\141\043\056\044\127\045\074\046\176\050\150\051" +
    "\012\052\043\053\041\055\165\057\231\060\011\062\102" +
    "\063\160\064\032\074\162\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\107\070\112\175\113\140" +
    "\114\042\115\072\116\025\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\150\007\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\044\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\002\001\uff1f\000\002\001\uff1b" +
    "\000\252\003\124\004\156\005\170\006\115\007\010\010" +
    "\065\011\035\013\063\015\100\020\137\021\022\022\131" +
    "\023\125\024\046\026\034\030\107\032\167\035\111\037" +
    "\141\043\056\044\127\045\074\046\116\050\150\051\012" +
    "\052\043\053\041\055\165\057\231\060\011\062\102\063" +
    "\160\064\032\065\232\066\033\067\154\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\107" +
    "\070\112\175\113\140\114\042\115\072\116\025\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\150" +
    "\007\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\044\222\064\223\020" +
    "\227\163\232\106\233\121\234\062\235\103\237\126\241" +
    "\123\001\uff1e\000\006\217\u012f\220\u012e\001\uff1a\000\004" +
    "\216\u0137\001\002\000\004\231\u0135\001\002\000\004\227" +
    "\u0130\001\002\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\076\034\314\126\304\127\324\130\274\147\277\151" +
    "\273\152\316\153\275\154\306\155\315\156\322\157\307" +
    "\160\270\161\305\162\321\163\317\164\301\165\320\166" +
    "\313\167\310\170\323\171\302\172\312\173\300\174\311" +
    "\175\271\200\276\230\u0132\243\303\244\272\001\002\000" +
    "\004\231\u0133\001\002\000\002\001\uff90\000\252\003\124" +
    "\004\156\005\170\006\115\007\010\010\065\011\035\013" +
    "\063\015\100\020\137\021\022\022\131\023\125\024\046" +
    "\026\034\030\107\032\167\035\111\037\141\043\056\044" +
    "\127\045\074\046\116\050\150\051\012\052\043\053\041" +
    "\055\165\057\231\060\011\062\102\063\160\064\032\065" +
    "\232\066\033\067\154\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\107\070\112\175\113" +
    "\140\114\042\115\072\116\025\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\150\007\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\044\222\064\223\020\227\163\232\106" +
    "\233\121\234\062\235\103\237\126\241\123\001\uff1d\000" +
    "\002\001\uff90\000\252\003\124\004\156\005\170\006\115" +
    "\007\010\010\065\011\035\013\063\015\100\020\137\021" +
    "\022\022\131\023\125\024\046\026\034\030\107\032\167" +
    "\035\111\037\141\043\056\044\127\045\074\046\116\050" +
    "\150\051\012\052\043\053\041\055\165\057\231\060\011" +
    "\062\102\063\160\064\032\065\232\066\033\067\154\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\107\070\112\175\113\140\114\042\115\072\116" +
    "\025\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\150\007\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\044\222" +
    "\064\223\020\227\163\232\106\233\121\234\062\235\103" +
    "\237\126\241\123\001\uff19\000\004\150\u0138\001\002\000" +
    "\002\001\uff84\000\006\011\173\117\057\001\002\000\006" +
    "\125\u013f\230\u013e\001\002\000\004\132\u013c\001\002\000" +
    "\160\004\156\006\115\007\010\010\065\011\173\013\063" +
    "\020\137\035\111\046\176\051\012\052\043\063\160\064" +
    "\032\074\162\075\013\076\021\077\047\100\050\101\143" +
    "\102\006\103\036\112\175\113\140\114\042\115\072\117" +
    "\057\120\031\121\075\122\052\123\133\124\114\131\067" +
    "\170\113\171\073\176\157\177\016\201\054\202\164\203" +
    "\030\204\144\205\040\206\135\207\077\210\145\211\076" +
    "\212\037\213\053\215\101\221\174\227\163\232\106\233" +
    "\121\234\062\235\103\241\123\001\002\000\074\034\314" +
    "\126\304\127\324\130\274\147\277\151\273\152\316\153" +
    "\275\154\306\155\315\156\322\157\307\160\270\161\305" +
    "\162\321\163\317\164\301\165\320\166\313\167\310\170" +
    "\323\171\302\172\312\173\300\174\311\175\271\200\276" +
    "\243\303\244\272\001\uff2d\000\240\003\124\004\156\005" +
    "\170\006\115\007\010\010\065\011\035\013\063\015\100" +
    "\020\137\021\022\022\131\023\125\024\046\026\034\030" +
    "\107\032\167\035\111\037\141\043\056\044\127\045\074" +
    "\046\176\050\150\051\012\052\043\053\041\055\165\057" +
    "\231\060\011\062\102\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\107" +
    "\070\112\175\113\140\114\042\115\072\116\025\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\150" +
    "\007\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\044\227\163\231\u0144" +
    "\232\106\233\121\234\062\235\103\241\123\001\002\000" +
    "\006\011\173\117\057\001\002\000\004\132\u0141\001\002" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\074\034" +
    "\314\126\304\127\324\130\274\147\277\151\273\152\316" +
    "\153\275\154\306\155\315\156\322\157\307\160\270\161" +
    "\305\162\321\163\317\164\301\165\320\166\313\167\310" +
    "\170\323\171\302\172\312\173\300\174\311\175\271\200" +
    "\276\243\303\244\272\001\uff2c\000\002\001\uff6f\000\002" +
    "\001\uff90\000\002\001\uff2f\000\254\003\124\004\156\005" +
    "\170\006\115\007\010\010\065\011\035\013\063\015\100" +
    "\020\137\021\022\022\131\023\125\024\046\026\034\030" +
    "\107\032\167\033\u0147\035\111\037\141\043\056\044\127" +
    "\045\074\046\116\050\150\051\012\052\043\053\041\055" +
    "\165\057\231\060\011\062\102\063\160\064\032\065\232" +
    "\066\033\067\154\074\162\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\107\070\112\175\113\140" +
    "\114\042\115\072\116\025\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\150\007\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\044\222\064\223\020\227\163\232\106\233" +
    "\121\234\062\235\103\237\126\241\123\001\002\000\004" +
    "\150\u0148\001\002\000\002\001\uff2e\000\076\034\314\126" +
    "\304\127\324\130\274\147\277\150\u014a\151\273\152\316" +
    "\153\275\154\306\155\315\156\322\157\307\160\270\161" +
    "\305\162\321\163\317\164\301\165\320\166\313\167\310" +
    "\170\323\171\302\172\312\173\300\174\311\175\271\200" +
    "\276\243\303\244\272\001\002\000\002\001\uff6c\000\004" +
    "\213\u016a\001\002\000\004\227\ufe2d\001\ufe30\000\162\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\u0158\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\155\u0152" +
    "\170\113\171\073\176\157\177\016\201\054\202\164\203" +
    "\030\204\144\205\040\206\135\207\077\210\145\211\076" +
    "\212\037\213\053\215\101\221\174\227\163\232\106\233" +
    "\121\234\062\235\103\241\123\001\ufe0e\000\012\072\ufe32" +
    "\107\ufe32\111\ufe32\213\ufe32\001\ufe9d\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\076\034\314\126\304\127\324" +
    "\130\274\147\277\151\273\152\316\153\275\154\306\155" +
    "\315\156\322\157\307\160\270\161\305\162\321\163\317" +
    "\164\301\165\320\166\313\167\310\170\323\171\302\172" +
    "\312\173\300\174\311\175\271\200\276\230\u0151\243\303" +
    "\244\272\001\002\000\004\227\ufe2e\001\ufe31\000\030\011" +
    "\173\013\063\020\137\075\013\112\175\115\072\117\057" +
    "\213\u014d\221\341\227\u014f\232\106\001\002\000\076\034" +
    "\314\073\u0161\126\304\127\324\130\274\147\277\151\273" +
    "\152\316\153\275\154\306\155\315\156\322\157\307\160" +
    "\270\161\305\162\321\163\317\164\301\165\320\166\313" +
    "\167\310\170\323\171\302\172\312\173\300\174\311\175" +
    "\271\200\276\243\303\244\272\001\ufe09\000\002\001\ufe0c" +
    "\000\004\125\u015f\001\ufe0f\000\002\001\ufe0d\000\004\214" +
    "\u015e\001\002\000\004\227\u0159\001\002\000\162\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\u0158" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\155\u0152\170" +
    "\113\171\073\176\157\177\016\201\054\202\164\203\030" +
    "\204\144\205\040\206\135\207\077\210\145\211\076\212" +
    "\037\213\053\215\101\221\174\227\163\232\106\233\121" +
    "\234\062\235\103\241\123\001\ufe0e\000\004\230\u015b\001" +
    "\002\000\004\132\u015c\001\ufe05\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\066\034\314\147\277\151\273\152" +
    "\316\153\275\154\306\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\243\303\244\272\001\ufeb1\000\002\001\ufe2b\000" +
    "\162\004\156\006\115\007\010\010\065\011\173\013\063" +
    "\020\137\035\111\046\176\051\012\052\043\063\160\064" +
    "\032\074\u0158\075\013\076\021\077\047\100\050\101\143" +
    "\102\006\103\036\112\175\113\140\114\042\115\072\117" +
    "\057\120\031\121\075\122\052\123\133\124\114\131\067" +
    "\155\u0152\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\ufe0e\000\002" +
    "\001\ufe0b\000\162\004\156\006\115\007\010\010\065\011" +
    "\173\013\063\020\137\035\111\046\176\051\012\052\043" +
    "\063\160\064\032\074\u0164\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\112\175\113\140\114\042" +
    "\115\072\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\155\u0162\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\174" +
    "\227\163\232\106\233\121\234\062\235\103\241\123\001" +
    "\002\000\030\011\173\013\063\020\137\075\013\112\175" +
    "\115\072\117\057\213\u014d\221\341\227\u014f\232\106\001" +
    "\002\000\074\034\314\126\304\127\324\130\274\147\277" +
    "\151\273\152\316\153\275\154\306\155\315\156\322\157" +
    "\307\160\270\161\305\162\321\163\317\164\301\165\320" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\243\303\244\272\001\ufe0a\000\004" +
    "\227\u0165\001\002\000\162\004\156\006\115\007\010\010" +
    "\065\011\173\013\063\020\137\035\111\046\176\051\012" +
    "\052\043\063\160\064\032\074\u0158\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\112\175\113\140" +
    "\114\042\115\072\117\057\120\031\121\075\122\052\123" +
    "\133\124\114\131\067\155\u0152\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\ufe0e\000\004\230\u0167\001\002\000\004\132\u015c" +
    "\001\ufe06\000\010\125\ufe08\214\ufe08\230\ufe08\001\ufe32\000" +
    "\010\125\ufe07\214\ufe07\230\ufe07\001\ufe32\000\160\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\174\227\163\232\106\233\121\234\062" +
    "\235\103\241\123\001\ufe17\000\004\214\u016c\001\002\000" +
    "\002\001\ufe27\000\076\034\314\126\304\127\324\130\274" +
    "\147\277\151\273\152\316\153\275\154\306\155\315\156" +
    "\322\157\307\160\270\161\305\162\321\163\317\164\301" +
    "\165\320\166\313\167\310\170\323\171\302\172\312\173" +
    "\300\174\311\175\271\200\276\230\u016e\243\303\244\272" +
    "\001\002\000\014\072\ufe31\107\ufe31\111\ufe31\213\ufe31\227" +
    "\ufe2e\001\ufe7d\000\162\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\u0158\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\155\u0152\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\ufe0e\000\004\230\u0171\001\002\000\004\132\u015c\001" +
    "\002\000\030\011\173\013\063\020\137\075\013\112\175" +
    "\115\072\117\057\213\u014d\221\341\227\u014f\232\106\001" +
    "\002\000\006\125\ufdee\230\ufdee\001\ufe32\000\006\125\u0176" +
    "\230\u0175\001\002\000\002\001\ufdf5\000\030\011\173\013" +
    "\063\020\137\075\013\112\175\115\072\117\057\213\u014d" +
    "\221\341\227\u014f\232\106\001\002\000\006\125\ufded\230" +
    "\ufded\001\ufe32\000\004\034\314\001\ufe89\000\162\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\174\227\163\230\u017c\232\106\233\121" +
    "\234\062\235\103\241\123\001\002\000\002\001\ufe6f\000" +
    "\076\034\314\126\304\127\324\130\274\147\277\151\273" +
    "\152\316\153\275\154\306\155\315\156\322\157\307\160" +
    "\270\161\305\162\321\163\317\164\301\165\320\166\313" +
    "\167\310\170\323\171\302\172\312\173\300\174\311\175" +
    "\271\200\276\230\u017d\243\303\244\272\001\002\000\002" +
    "\001\ufe52\000\002\001\ufe51\000\006\011\173\117\057\001" +
    "\002\000\002\001\uffb9\000\216\004\u01bf\005\u01c8\011\173" +
    "\013\063\022\u01b5\023\u01b3\024\u0191\025\u0195\026\u018c\027" +
    "\u01a8\030\u01a5\031\u0192\032\u01c7\033\u01ae\034\u0194\035\u01a7" +
    "\036\u018d\037\u01b9\040\u01a4\041\u0181\042\u0197\043\u0196\044" +
    "\u01b4\045\u019f\046\u01aa\047\u01ba\050\u01bc\051\u0183\053\u018e" +
    "\054\u01c4\055\u01c6\056\u0198\057\u0188\060\u0182\061\u01c5\062" +
    "\u01a1\063\u01c2\064\u018a\066\u018b\067\u01be\070\u0187\071\u01a6" +
    "\074\u01c3\075\u0184\107\u019b\112\u01a2\117\057\120\u0189\121" +
    "\u019e\122\u0193\123\u01b7\124\u01a9\126\u01c0\127\u01c1\130\u01bd" +
    "\131\u019a\215\u01a0\216\u019c\217\u019d\220\u01b1\221\u0190\222" +
    "\u0199\223\u0185\224\u01ad\225\u01ac\226\u01bb\232\106\236\u01ab" +
    "\237\u01b2\240\u0186\001\002\000\002\001\uffcf\000\002\001" +
    "\uffde\000\002\001\uffd3\000\002\001\uffcc\000\002\001\uffc1" +
    "\000\002\001\uffcb\000\002\001\uffca\000\002\001\uffe0\000" +
    "\002\001\uffff\000\002\001\uffda\000\002\001\uffc5\000\002" +
    "\001\uffeb\000\002\001\uffe5\000\002\001\uffe4\000\002\001" +
    "\uffbc\000\002\001\uffc3\000\002\001\uffed\000\002\001\uffe8" +
    "\000\002\001\ufffd\000\002\001\ufff7\000\002\001\uffec\000" +
    "\002\001\uffcd\000\002\001\uffce\000\002\001\uffe2\000\002" +
    "\001\uffc2\000\002\001\uffd4\000\160\004\156\006\115\007" +
    "\010\010\065\011\173\013\063\020\137\035\111\046\176" +
    "\051\012\052\043\063\160\064\032\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\112\175" +
    "\113\140\114\042\115\072\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\002\001\ufff0\000\002\001\ufff2\000\002" +
    "\001\ufffe\000\002\001\uffd8\000\002\001\ufff6\000\002\001" +
    "\uffdc\000\002\001\uffc8\000\004\227\ufe15\001\ufe21\000\002" +
    "\001\uffd0\000\002\001\uffe9\000\002\001\uffc9\000\002\001" +
    "\ufff5\000\002\001\uffea\000\002\001\ufffb\000\002\001\uffd7" +
    "\000\002\001\uffdf\000\002\001\uffbf\000\002\001\uffc0\000" +
    "\002\001\uffe6\000\002\001\uffc4\000\004\227\u01c9\001\002" +
    "\000\002\001\ufff1\000\002\001\uffc7\000\002\001\uffee\000" +
    "\002\001\uffd9\000\002\001\uffef\000\004\227\ufe13\001\ufe1f" +
    "\000\002\001\ufffc\000\002\001\uffbd\000\002\001\uffd1\000" +
    "\002\001\uffd6\000\002\001\uffbe\000\002\001\uffd5\000\002" +
    "\001\ufff8\000\002\001\uffc6\000\002\001\ufff4\000\002\001" +
    "\ufffa\000\002\001\ufff9\000\002\001\uffdb\000\002\001\uffd2" +
    "\000\002\001\uffe3\000\002\001\uffdd\000\002\001\uffe1\000" +
    "\002\001\uffe7\000\002\001\ufff3\000\162\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\242\u01ce\001\uff09\000\004\230\u01d2\001\002\000" +
    "\074\034\314\126\304\127\324\130\274\147\277\151\273" +
    "\152\316\153\275\154\306\155\315\156\322\157\307\160" +
    "\270\161\305\162\321\163\317\164\301\165\320\166\313" +
    "\167\310\170\323\171\302\172\312\173\300\174\311\175" +
    "\271\200\276\243\303\244\272\001\uff06\000\002\001\uff08" +
    "\000\004\125\u01d0\001\uff0a\000\160\004\156\006\115\007" +
    "\010\010\065\011\173\013\063\020\137\035\111\046\176" +
    "\051\012\052\043\063\160\064\032\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\112\175" +
    "\113\140\114\042\115\072\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\074\034\314\126\304\127\324\130\274" +
    "\147\277\151\273\152\316\153\275\154\306\155\315\156" +
    "\322\157\307\160\270\161\305\162\321\163\317\164\301" +
    "\165\320\166\313\167\310\170\323\171\302\172\312\173" +
    "\300\174\311\175\271\200\276\243\303\244\272\001\uff05" +
    "\000\162\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\242\u01ce\001\002\000" +
    "\002\001\uff07\000\002\001\ufe5c\000\076\034\314\110\u01d4" +
    "\126\304\127\324\130\274\147\277\151\273\152\316\153" +
    "\275\154\306\155\315\156\322\157\307\160\270\161\305" +
    "\162\321\163\317\164\301\165\320\166\313\167\310\170" +
    "\323\171\302\172\312\173\300\174\311\175\271\200\276" +
    "\243\303\244\272\001\002\000\002\001\ufe14\000\002\001" +
    "\uff7b\000\074\034\314\126\304\127\324\130\274\147\277" +
    "\151\273\152\316\153\275\154\306\155\315\156\322\157" +
    "\307\160\270\161\305\162\321\163\317\164\301\165\320" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\243\303\244\272\001\002\000\052" +
    "\072\ufe32\107\ufe32\111\ufe32\132\u01db\133\u01df\134\u01dc\135" +
    "\u01e8\136\u01e0\137\u01e7\140\u01e2\141\u01e5\142\u01de\143\u01da" +
    "\144\u01e1\145\u01e3\146\u01dd\150\u01e6\201\u01e4\202\u01e9\213" +
    "\ufe32\001\ufe37\000\004\150\u01d9\001\ufe36\000\002\001\uff7a" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\162\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\155\u01f5" +
    "\170\113\171\073\176\157\177\016\201\054\202\164\203" +
    "\030\204\144\205\040\206\135\207\077\210\145\211\076" +
    "\212\037\213\053\215\101\221\174\227\163\232\106\233" +
    "\121\234\062\235\103\241\123\001\002\000\160\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\174\227\163\232\106\233\121\234\062" +
    "\235\103\241\123\001\002\000\160\004\156\006\115\007" +
    "\010\010\065\011\173\013\063\020\137\035\111\046\176" +
    "\051\012\052\043\063\160\064\032\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\112\175" +
    "\113\140\114\042\115\072\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\160\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\174\227\163\232\106\233\121\234" +
    "\062\235\103\241\123\001\002\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\160\004\156\006\115\007\010\010" +
    "\065\011\173\013\063\020\137\035\111\046\176\051\012" +
    "\052\043\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\112\175\113\140" +
    "\114\042\115\072\117\057\120\031\121\075\122\052\123" +
    "\133\124\114\131\067\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\174" +
    "\227\163\232\106\233\121\234\062\235\103\241\123\001" +
    "\002\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\002" +
    "\001\ufea0\000\160\004\156\006\115\007\010\010\065\011" +
    "\173\013\063\020\137\035\111\046\176\051\012\052\043" +
    "\063\160\064\032\074\162\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\112\175\113\140\114\042" +
    "\115\072\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\170\113\171\073\176\157\177\016\201\054" +
    "\202\164\203\030\204\144\205\040\206\135\207\077\210" +
    "\145\211\076\212\037\213\053\215\101\221\174\227\163" +
    "\232\106\233\121\234\062\235\103\241\123\001\002\000" +
    "\002\001\uff79\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\002\000\002\001" +
    "\ufe9e\000\066\034\314\147\277\151\273\152\316\153\275" +
    "\154\306\155\315\156\322\157\307\160\270\161\305\162" +
    "\321\163\317\164\301\165\320\166\313\167\310\170\323" +
    "\171\302\172\312\173\300\174\311\175\271\200\276\243" +
    "\303\244\272\001\ufeaa\000\066\034\314\147\277\151\273" +
    "\152\316\153\275\154\306\155\315\156\322\157\307\160" +
    "\270\161\305\162\321\163\317\164\301\165\320\166\313" +
    "\167\310\170\323\171\302\172\312\173\300\174\311\175" +
    "\271\200\276\243\303\244\272\001\ufea7\000\066\034\314" +
    "\147\277\151\273\152\316\153\275\154\306\155\315\156" +
    "\322\157\307\160\270\161\305\162\321\163\317\164\301" +
    "\165\320\166\313\167\310\170\323\171\302\172\312\173" +
    "\300\174\311\175\271\200\276\243\303\244\272\001\ufea5" +
    "\000\066\034\314\147\277\151\273\152\316\153\275\154" +
    "\306\155\315\156\322\157\307\160\270\161\305\162\321" +
    "\163\317\164\301\165\320\166\313\167\310\170\323\171" +
    "\302\172\312\173\300\174\311\175\271\200\276\243\303" +
    "\244\272\001\ufea1\000\066\034\314\147\277\151\273\152" +
    "\316\153\275\154\306\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\243\303\244\272\001\ufea6\000\066\034\314\147" +
    "\277\151\273\152\316\153\275\154\306\155\315\156\322" +
    "\157\307\160\270\161\305\162\321\163\317\164\301\165" +
    "\320\166\313\167\310\170\323\171\302\172\312\173\300" +
    "\174\311\175\271\200\276\243\303\244\272\001\ufea2\000" +
    "\066\034\314\147\277\151\273\152\316\153\275\154\306" +
    "\155\315\156\322\157\307\160\270\161\305\162\321\163" +
    "\317\164\301\165\320\166\313\167\310\170\323\171\302" +
    "\172\312\173\300\174\311\175\271\200\276\243\303\244" +
    "\272\001\ufea8\000\066\034\314\147\277\151\273\152\316" +
    "\153\275\154\306\155\315\156\322\157\307\160\270\161" +
    "\305\162\321\163\317\164\301\165\320\166\313\167\310" +
    "\170\323\171\302\172\312\173\300\174\311\175\271\200" +
    "\276\243\303\244\272\001\ufeac\000\066\034\314\147\277" +
    "\151\273\152\316\153\275\154\306\155\315\156\322\157" +
    "\307\160\270\161\305\162\321\163\317\164\301\165\320" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\243\303\244\272\001\ufea4\000\066" +
    "\034\314\147\277\151\273\152\316\153\275\154\306\155" +
    "\315\156\322\157\307\160\270\161\305\162\321\163\317" +
    "\164\301\165\320\166\313\167\310\170\323\171\302\172" +
    "\312\173\300\174\311\175\271\200\276\243\303\244\272" +
    "\001\ufea9\000\066\034\314\147\277\151\273\152\316\153" +
    "\275\154\306\155\315\156\322\157\307\160\270\161\305" +
    "\162\321\163\317\164\301\165\320\166\313\167\310\170" +
    "\323\171\302\172\312\173\300\174\311\175\271\200\276" +
    "\243\303\244\272\001\ufeab\000\030\011\173\013\063\020" +
    "\137\075\013\112\175\115\072\117\057\213\u014d\221\341" +
    "\227\u014f\232\106\001\002\000\066\034\314\147\277\151" +
    "\273\152\316\153\275\154\306\155\315\156\322\157\307" +
    "\160\270\161\305\162\321\163\317\164\301\165\320\166" +
    "\313\167\310\170\323\171\302\172\312\173\300\174\311" +
    "\175\271\200\276\243\303\244\272\001\ufeaf\000\012\072" +
    "\ufe32\107\ufe32\111\ufe32\213\ufe32\001\ufeae\000\066\034\314" +
    "\147\277\151\273\152\316\153\275\154\306\155\315\156" +
    "\322\157\307\160\270\161\305\162\321\163\317\164\301" +
    "\165\320\166\313\167\310\170\323\171\302\172\312\173" +
    "\300\174\311\175\271\200\276\243\303\244\272\001\ufea3" +
    "\000\006\125\u013f\150\u01fa\001\002\000\002\001\uffa5\000" +
    "\002\001\ufe71\000\002\001\ufe75\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\076\034\314\126\304\127\324\130" +
    "\274\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\230\u01ff\243\303\244" +
    "\272\001\002\000\006\107\u0201\231\u0202\001\002\000\002" +
    "\001\uff80\000\004\150\u0214\001\uff27\000\004\150\u0204\001" +
    "\uff27\000\010\040\u0211\041\u0207\042\u0208\001\002\000\002" +
    "\001\uff27\000\010\040\u0206\041\u0207\042\u0208\001\002\000" +
    "\004\150\u0210\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\006\150\u020b\231\u020a\001\002\000\002\001" +
    "\uff90\000\002\001\uff24\000\002\001\uff23\000\252\003\124" +
    "\004\156\005\170\006\115\007\010\010\065\011\035\013" +
    "\063\015\100\020\137\021\022\022\131\023\125\024\046" +
    "\026\034\030\107\032\167\035\111\037\141\043\056\044" +
    "\127\045\074\046\116\050\150\051\012\052\043\053\041" +
    "\055\165\057\231\060\011\062\102\063\160\064\032\065" +
    "\232\066\033\067\154\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\107\070\112\175\113" +
    "\140\114\042\115\072\116\025\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\150\007\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\044\222\064\223\020\227\163\232\106" +
    "\233\121\234\062\235\103\237\126\241\123\001\uff25\000" +
    "\100\034\314\126\304\127\324\130\274\147\277\150\u020b" +
    "\151\273\152\316\153\275\154\306\155\315\156\322\157" +
    "\307\160\270\161\305\162\321\163\317\164\301\165\320" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\231\u020a\243\303\244\272\001\002" +
    "\000\002\001\uff90\000\252\003\124\004\156\005\170\006" +
    "\115\007\010\010\065\011\035\013\063\015\100\020\137" +
    "\021\022\022\131\023\125\024\046\026\034\030\107\032" +
    "\167\035\111\037\141\043\056\044\127\045\074\046\116" +
    "\050\150\051\012\052\043\053\041\055\165\057\231\060" +
    "\011\062\102\063\160\064\032\065\232\066\033\067\154" +
    "\074\162\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\107\070\112\175\113\140\114\042\115\072" +
    "\116\025\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\150\007\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\044" +
    "\222\064\223\020\227\163\232\106\233\121\234\062\235" +
    "\103\237\126\241\123\001\uff26\000\002\001\uff28\000\004" +
    "\150\u0212\001\002\000\002\001\uff29\000\010\041\u0207\042" +
    "\u0208\110\u0217\001\002\000\002\001\uff27\000\010\041\u0207" +
    "\042\u0208\110\u0216\001\002\000\002\001\uff2a\000\002\001" +
    "\uff2b\000\162\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\242\u01ce\001\uff09" +
    "\000\004\230\u021a\001\002\000\002\001\ufe5b\000\002\001" +
    "\ufe73\000\074\034\314\126\304\127\324\130\274\147\277" +
    "\151\273\152\316\153\275\154\306\155\315\156\322\157" +
    "\307\160\270\161\305\162\321\163\317\164\301\165\320" +
    "\166\313\167\310\170\323\171\302\172\312\173\300\174" +
    "\311\175\271\200\276\243\303\244\272\001\ufdf0\000\074" +
    "\034\314\126\304\127\324\130\274\147\277\151\273\152" +
    "\316\153\275\154\306\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\243\303\244\272\001\ufeb8\000\006\125\u021f\150" +
    "\u0220\001\002\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\002\001\uff76\000\074\034\314\126\304\127\324\130" +
    "\274\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\243\303\244\272\001" +
    "\ufeb9\000\002\001\uff7d\000\076\034\314\126\304\127\324" +
    "\130\274\147\277\150\u0224\151\273\152\316\153\275\154" +
    "\306\155\315\156\322\157\307\160\270\161\305\162\321" +
    "\163\317\164\301\165\320\166\313\167\310\170\323\171" +
    "\302\172\312\173\300\174\311\175\271\200\276\243\303" +
    "\244\272\001\002\000\002\001\uff7c\000\004\024\u0226\001" +
    "\002\000\004\227\u0227\001\002\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\076\034\314\126\304\127\324\130" +
    "\274\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\230\u0229\243\303\244" +
    "\272\001\002\000\004\150\u022a\001\002\000\002\001\uff82" +
    "\000\004\070\u022d\001\uff3f\000\002\001\uff4d\000\014\003" +
    "\u0232\011\173\112\u0230\115\u0233\117\057\001\002\000\002" +
    "\001\ufe58\000\004\125\u0237\001\uff3e\000\004\115\u0235\001" +
    "\002\000\002\001\uff3b\000\002\001\uff38\000\006\011\173" +
    "\117\057\001\002\000\002\001\ufe56\000\006\011\173\117" +
    "\057\001\002\000\002\001\ufe57\000\014\003\u0239\011\173" +
    "\112\u0230\115\u0233\117\057\001\002\000\002\001\uff3a\000" +
    "\002\001\uff39\000\004\107\u023b\001\002\000\002\001\ufef3" +
    "\000\036\003\u024a\057\u024d\061\u024f\066\033\067\154\110" +
    "\u0249\116\u0248\221\u024c\222\u0241\223\u0242\224\u0246\225\u0240" +
    "\226\u024b\237\126\001\ufecc\000\002\001\uff48\000\002\001" +
    "\ufeea\000\006\046\u0280\047\u0281\001\002\000\002\001\ufec7" +
    "\000\004\066\u027f\001\ufec4\000\004\066\u027e\001\ufec3\000" +
    "\002\001\ufef4\000\020\013\ufece\221\u024c\222\u027c\223\u027d" +
    "\224\u0246\225\u0240\226\u024b\001\ufecb\000\002\001\uff4c\000" +
    "\002\001\ufec6\000\002\001\ufeca\000\002\001\ufeec\000\002" +
    "\001\uff49\000\002\001\ufeeb\000\002\001\ufec8\000\002\001" +
    "\ufec5\000\012\011\173\112\u0230\115\u0233\117\057\001\002" +
    "\000\004\013\u0251\001\002\000\002\001\ufecd\000\006\125" +
    "\u0254\150\u0255\001\002\000\004\132\u0252\001\ufec0\000\160" +
    "\004\156\006\115\007\010\010\065\011\173\013\063\020" +
    "\137\035\111\046\176\051\012\052\043\063\160\064\032" +
    "\074\162\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\112\175\113\140\114\042\115\072\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\170" +
    "\113\171\073\176\157\177\016\201\054\202\164\203\030" +
    "\204\144\205\040\206\135\207\077\210\145\211\076\212" +
    "\037\213\053\215\101\221\174\227\163\232\106\233\121" +
    "\234\062\235\103\241\123\001\002\000\074\034\314\126" +
    "\304\127\324\130\274\147\277\151\273\152\316\153\275" +
    "\154\306\155\315\156\322\157\307\160\270\161\305\162" +
    "\321\163\317\164\301\165\320\166\313\167\310\170\323" +
    "\171\302\172\312\173\300\174\311\175\271\200\276\243" +
    "\303\244\272\001\ufebf\000\004\013\u0256\001\002\000\002" +
    "\001\ufef2\000\004\132\u0257\001\ufec2\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\074\034\314\126\304\127\324" +
    "\130\274\147\277\151\273\152\316\153\275\154\306\155" +
    "\315\156\322\157\307\160\270\161\305\162\321\163\317" +
    "\164\301\165\320\166\313\167\310\170\323\171\302\172" +
    "\312\173\300\174\311\175\271\200\276\243\303\244\272" +
    "\001\ufec1\000\010\107\u025c\125\u025b\150\u025e\001\002\000" +
    "\002\001\ufee8\000\012\011\173\112\u0230\115\u0233\117\057" +
    "\001\002\000\012\011\u0267\112\u0230\115\u0233\117\057\001" +
    "\ufee4\000\002\001\ufee9\000\002\001\ufee6\000\004\036\u0273" +
    "\001\002\000\004\150\u0272\001\002\000\012\011\u0267\112" +
    "\u0230\115\u0233\117\057\001\ufee3\000\004\110\u0270\001\002" +
    "\000\004\236\u026b\001\ufeda\000\004\111\u0269\001\002\000" +
    "\004\150\u0268\001\002\000\002\001\ufee2\000\004\036\ufedb" +
    "\001\ufdec\000\002\001\ufee0\000\004\011\u026a\001\002\000" +
    "\002\001\ufed9\000\012\011\173\112\u0230\115\u0233\117\057" +
    "\001\002\000\004\125\u026e\001\ufede\000\002\001\ufedd\000" +
    "\012\011\173\112\u0230\115\u0233\117\057\001\002\000\002" +
    "\001\ufedc\000\002\001\ufee5\000\002\001\ufee1\000\002\001" +
    "\ufedf\000\010\224\u0276\225\u0277\226\u0274\001\ufed3\000\002" +
    "\001\ufed6\000\210\004\u01bf\005\u01c8\011\173\022\u01b5\023" +
    "\u01b3\024\u0191\025\u0195\026\u018c\027\u01a8\030\u01a5\031\u0192" +
    "\032\u01c7\033\u01ae\034\u0194\035\u01a7\036\u018d\037\u01b9\040" +
    "\u01a4\041\u0181\042\u0197\043\u0196\044\u01b4\045\u019f\046\u01aa" +
    "\047\u01ba\050\u01bc\051\u0183\053\u018e\054\u01c4\055\u01c6\056" +
    "\u0198\057\u0188\060\u0182\061\u01c5\062\u01a1\063\u01c2\064\u018a" +
    "\066\u018b\067\u01be\070\u0187\071\u01a6\074\u01c3\075\u0184\112" +
    "\u01a2\117\057\120\u0189\121\u019e\122\u0193\123\u01b7\124\u01a9" +
    "\126\u01c0\127\u01c1\130\u01bd\131\u019a\215\u01a0\216\u019c\217" +
    "\u019d\220\u01b1\221\u0190\222\u0199\223\u0185\224\u01ad\225\u01ac" +
    "\226\u01bb\236\u01ab\237\u01b2\240\u0186\001\002\000\002\001" +
    "\ufed4\000\002\001\ufed5\000\004\150\ufed7\001\ufed2\000\002" +
    "\001\ufed8\000\002\001\ufee7\000\002\001\ufec9\000\002\001" +
    "\ufec4\000\002\001\ufec3\000\002\001\uff45\000\002\001\uff46" +
    "\000\004\155\200\001\uff58\000\210\004\u01bf\005\u01c8\011" +
    "\173\022\u01b5\023\u01b3\024\u0191\025\u0195\026\u018c\027\u01a8" +
    "\030\u01a5\031\u0192\032\u01c7\033\u01ae\034\u0194\035\u01a7\036" +
    "\u018d\037\u01b9\040\u01a4\041\u0181\042\u0197\043\u0196\044\u01b4" +
    "\045\u019f\046\u01aa\047\u01ba\050\u01bc\051\u0183\053\u018e\054" +
    "\u01c4\055\u01c6\056\u0198\057\u0188\060\u0182\061\u01c5\062\u01a1" +
    "\063\u01c2\064\u018a\066\u018b\067\u01be\070\u0187\071\u01a6\074" +
    "\u01c3\075\u0184\112\u01a2\117\057\120\u0189\121\u019e\122\u0193" +
    "\123\u01b7\124\u01a9\126\u01c0\127\u01c1\130\u01bd\131\u019a\215" +
    "\u01a0\216\u019c\217\u019d\220\u01b1\221\u0190\222\u0199\223\u0185" +
    "\224\u01ad\225\u01ac\226\u01bb\236\u01ab\237\u01b2\240\u0186\001" +
    "\002\000\002\001\ufebb\000\004\132\u0288\001\002\000\006" +
    "\125\u0285\150\u0286\001\002\000\210\004\u01bf\005\u01c8\011" +
    "\173\022\u01b5\023\u01b3\024\u0191\025\u0195\026\u018c\027\u01a8" +
    "\030\u01a5\031\u0192\032\u01c7\033\u01ae\034\u0194\035\u01a7\036" +
    "\u018d\037\u01b9\040\u01a4\041\u0181\042\u0197\043\u0196\044\u01b4" +
    "\045\u019f\046\u01aa\047\u01ba\050\u01bc\051\u0183\053\u018e\054" +
    "\u01c4\055\u01c6\056\u0198\057\u0188\060\u0182\061\u01c5\062\u01a1" +
    "\063\u01c2\064\u018a\066\u018b\067\u01be\070\u0187\071\u01a6\074" +
    "\u01c3\075\u0184\112\u01a2\117\057\120\u0189\121\u019e\122\u0193" +
    "\123\u01b7\124\u01a9\126\u01c0\127\u01c1\130\u01bd\131\u019a\215" +
    "\u01a0\216\u019c\217\u019d\220\u01b1\221\u0190\222\u0199\223\u0185" +
    "\224\u01ad\225\u01ac\226\u01bb\236\u01ab\237\u01b2\240\u0186\001" +
    "\002\000\002\001\ufef1\000\002\001\ufebc\000\160\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\174\227\163\232\106\233\121\234\062" +
    "\235\103\241\123\001\002\000\074\034\314\126\304\127" +
    "\324\130\274\147\277\151\273\152\316\153\275\154\306" +
    "\155\315\156\322\157\307\160\270\161\305\162\321\163" +
    "\317\164\301\165\320\166\313\167\310\170\323\171\302" +
    "\172\312\173\300\174\311\175\271\200\276\243\303\244" +
    "\272\001\ufeba\000\210\004\u01bf\005\u01c8\011\173\022\u01b5" +
    "\023\u01b3\024\u0191\025\u0195\026\u018c\027\u01a8\030\u01a5\031" +
    "\u0192\032\u01c7\033\u01ae\034\u0194\035\u01a7\036\u018d\037\u01b9" +
    "\040\u01a4\041\u0181\042\u0197\043\u0196\044\u01b4\045\u019f\046" +
    "\u01aa\047\u01ba\050\u01bc\051\u0183\053\u018e\054\u01c4\055\u01c6" +
    "\056\u0198\057\u0188\060\u0182\061\u01c5\062\u01a1\063\u01c2\064" +
    "\u018a\066\u018b\067\u01be\070\u0187\071\u01a6\074\u01c3\075\u0184" +
    "\112\u01a2\117\057\120\u0189\121\u019e\122\u0193\123\u01b7\124" +
    "\u01a9\126\u01c0\127\u01c1\130\u01bd\131\u019a\215\u01a0\216\u019c" +
    "\217\u019d\220\u01b1\221\u0190\222\u0199\223\u0185\224\u01ad\225" +
    "\u01ac\226\u01bb\236\u01ab\237\u01b2\240\u0186\001\002\000\002" +
    "\001\ufef0\000\004\227\u028d\001\002\000\024\003\212\011" +
    "\173\075\211\112\175\115\072\117\057\147\205\230\uff17" +
    "\240\207\001\uff0c\000\004\230\u028f\001\002\000\002\001" +
    "\ufeef\000\004\231\221\001\ufeff\000\002\001\ufeee\000\006" +
    "\107\u0294\150\u0295\001\ufecf\000\002\001\ufeed\000\002\001" +
    "\uff90\000\002\001\ufed1\000\254\003\124\004\156\005\170" +
    "\006\115\007\010\010\065\011\035\013\063\015\100\020" +
    "\137\021\022\022\131\023\125\024\046\026\034\030\107" +
    "\032\167\035\111\037\141\043\056\044\127\045\074\046" +
    "\116\050\150\051\012\052\043\053\041\055\165\057\231" +
    "\060\011\062\102\063\160\064\032\065\232\066\033\067" +
    "\154\074\162\075\013\076\021\077\047\100\050\101\143" +
    "\102\006\103\036\107\070\110\u0297\112\175\113\140\114" +
    "\042\115\072\116\025\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\150\007\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\044\222\064\223\020\227\163\232\106\233\121" +
    "\234\062\235\103\237\126\241\123\001\002\000\002\001" +
    "\ufed0\000\016\013\u029a\016\u02b4\017\u02b3\105\u029c\106\u029b" +
    "\233\u02b2\001\002\000\002\001\ufe01\000\006\072\u02aa\213" +
    "\u02a9\001\ufdfe\000\030\011\173\013\063\020\137\075\013" +
    "\112\175\115\072\117\057\213\u014d\221\341\227\u014f\232" +
    "\106\001\002\000\162\004\156\006\115\007\010\010\065" +
    "\011\173\012\u02a0\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\002\000\010\013\u029a\105\u029c\106\u029b\001\002\000" +
    "\002\001\ufe00\000\076\034\314\110\u02a6\126\304\127\324" +
    "\130\274\147\277\151\273\152\316\153\275\154\306\155" +
    "\315\156\322\157\307\160\270\161\305\162\321\163\317" +
    "\164\301\165\320\166\313\167\310\170\323\171\302\172" +
    "\312\173\300\174\311\175\271\200\276\243\303\244\272" +
    "\001\002\000\006\110\u02a1\213\u02a2\001\002\000\002\001" +
    "\ufdfa\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\076" +
    "\034\314\126\304\127\324\130\274\147\277\151\273\152" +
    "\316\153\275\154\306\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\214\u02a4\243\303\244\272\001\002\000\004\110" +
    "\u02a5\001\002\000\002\001\ufdf9\000\002\001\ufdfb\000\004" +
    "\110\u02a8\001\ufe32\000\002\001\ufdff\000\012\011\173\013" +
    "\u02ad\014\u02af\117\057\001\002\000\006\011\173\117\057" +
    "\001\002\000\002\001\ufdfc\000\004\214\u02b0\001\002\000" +
    "\002\001\ufdf6\000\002\001\ufdf8\000\002\001\ufdf7\000\002" +
    "\001\ufdfd\000\002\001\ufe04\000\002\001\ufe3e\000\002\001" +
    "\ufe03\000\002\001\ufe02\000\010\011\173\117\057\227\201" +
    "\001\002\000\002\001\uff56\000\004\227\u02b8\001\002\000" +
    "\024\003\212\011\173\075\211\112\175\115\072\117\057" +
    "\147\205\230\uff17\240\207\001\uff0c\000\004\230\u02ba\001" +
    "\002\000\002\001\uff55\000\004\231\221\001\ufeff\000\002" +
    "\001\uff54\000\006\003\u02be\107\u02bf\001\002\000\002\001" +
    "\uff51\000\002\001\uff90\000\002\001\uff53\000\254\003\124" +
    "\004\156\005\170\006\115\007\010\010\065\011\035\013" +
    "\063\015\100\020\137\021\022\022\131\023\125\024\046" +
    "\026\034\030\107\032\167\035\111\037\141\043\056\044" +
    "\127\045\074\046\116\050\150\051\012\052\043\053\041" +
    "\055\165\057\231\060\011\062\102\063\160\064\032\065" +
    "\232\066\033\067\154\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\107\070\110\u02c2\112" +
    "\175\113\140\114\042\115\072\116\025\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\150\007\170" +
    "\113\171\073\176\157\177\016\201\054\202\164\203\030" +
    "\204\144\205\040\206\135\207\077\210\145\211\076\212" +
    "\037\213\053\215\101\221\044\222\064\223\020\227\163" +
    "\232\106\233\121\234\062\235\103\237\126\241\123\001" +
    "\002\000\002\001\uff52\000\074\034\314\126\304\127\324" +
    "\130\274\147\277\151\273\152\316\153\275\154\306\155" +
    "\315\156\322\157\307\160\270\161\305\162\321\163\317" +
    "\164\301\165\320\166\313\167\310\170\323\171\302\172" +
    "\312\173\300\174\311\175\271\200\276\243\303\244\272" +
    "\001\ufdef\000\014\034\314\172\312\173\300\174\311\175" +
    "\271\001\ufe8b\000\002\001\ufead\000\162\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\242\u01ce\001\uff09\000\004\230\u02c8\001\002\000" +
    "\002\001\ufe5e\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\076\034\314\036\u02cb\126\304\127\324\130\274\147" +
    "\277\151\273\152\316\153\275\154\306\155\315\156\322" +
    "\157\307\160\270\161\305\162\321\163\317\164\301\165" +
    "\320\166\313\167\310\170\323\171\302\172\312\173\300" +
    "\174\311\175\271\200\276\243\303\244\272\001\002\000" +
    "\034\011\173\013\063\020\137\074\u02d0\075\013\112\175" +
    "\115\072\117\057\155\u02cf\213\u02cd\221\341\227\u014f\232" +
    "\106\001\002\000\006\073\u02d8\230\u02d7\001\002\000\162" +
    "\004\156\006\115\007\010\010\065\011\173\013\063\020" +
    "\137\035\111\046\176\051\012\052\043\063\160\064\032" +
    "\074\u0158\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\112\175\113\140\114\042\115\072\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\155" +
    "\u0152\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\ufe0e\000\006\073" +
    "\uff37\230\uff37\001\ufe32\000\030\011\173\013\063\020\137" +
    "\075\013\112\175\115\072\117\057\213\u014d\221\341\227" +
    "\u014f\232\106\001\002\000\004\227\u02d1\001\002\000\162" +
    "\004\156\006\115\007\010\010\065\011\173\013\063\020" +
    "\137\035\111\046\176\051\012\052\043\063\160\064\032" +
    "\074\u0158\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\112\175\113\140\114\042\115\072\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\155" +
    "\u0152\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\ufe0e\000\004\230" +
    "\u02d3\001\002\000\002\001\uff35\000\006\073\uff36\230\uff36" +
    "\001\ufe32\000\004\214\u02d6\001\002\000\006\073\uff34\230" +
    "\uff34\001\ufe2b\000\240\003\124\004\156\005\170\006\115" +
    "\007\010\010\065\011\035\013\063\015\100\020\137\021" +
    "\022\022\131\023\125\024\046\026\034\030\107\032\167" +
    "\035\111\037\141\043\056\044\127\045\074\046\176\050" +
    "\150\051\012\052\043\053\041\055\165\057\231\060\011" +
    "\062\102\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\107\070\112\175" +
    "\113\140\114\042\115\072\116\025\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\150\007\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\044\227\163\231\u02db\232\106\233" +
    "\121\234\062\235\103\241\123\001\002\000\034\011\173" +
    "\013\063\020\137\074\u02d0\075\013\112\175\115\072\117" +
    "\057\155\u02cf\213\u02cd\221\341\227\u014f\232\106\001\002" +
    "\000\004\230\u02da\001\002\000\240\003\124\004\156\005" +
    "\170\006\115\007\010\010\065\011\035\013\063\015\100" +
    "\020\137\021\022\022\131\023\125\024\046\026\034\030" +
    "\107\032\167\035\111\037\141\043\056\044\127\045\074" +
    "\046\176\050\150\051\012\052\043\053\041\055\165\057" +
    "\231\060\011\062\102\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\107" +
    "\070\112\175\113\140\114\042\115\072\116\025\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\150" +
    "\007\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\044\227\163\231\u02db" +
    "\232\106\233\121\234\062\235\103\241\123\001\002\000" +
    "\002\001\uff90\000\002\001\uff31\000\002\001\uff70\000\254" +
    "\003\124\004\156\005\170\006\115\007\010\010\065\011" +
    "\035\013\063\015\100\020\137\021\022\022\131\023\125" +
    "\024\046\026\034\030\107\031\u02df\032\167\035\111\037" +
    "\141\043\056\044\127\045\074\046\116\050\150\051\012" +
    "\052\043\053\041\055\165\057\231\060\011\062\102\063" +
    "\160\064\032\065\232\066\033\067\154\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\107" +
    "\070\112\175\113\140\114\042\115\072\116\025\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\150" +
    "\007\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\044\222\064\223\020" +
    "\227\163\232\106\233\121\234\062\235\103\237\126\241" +
    "\123\001\002\000\004\150\u02e0\001\002\000\002\001\uff30" +
    "\000\002\001\uff71\000\002\001\ufefa\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\076\034\314\110\u02e5\126\304" +
    "\127\324\130\274\147\277\151\273\152\316\153\275\154" +
    "\306\155\315\156\322\157\307\160\270\161\305\162\321" +
    "\163\317\164\301\165\320\166\313\167\310\170\323\171" +
    "\302\172\312\173\300\174\311\175\271\200\276\243\303" +
    "\244\272\001\002\000\002\001\ufef9\000\160\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\001\002\000\160\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\170\113\171\073\176\157\177" +
    "\016\201\054\202\164\203\030\204\144\205\040\206\135" +
    "\207\077\210\145\211\076\212\037\213\053\215\101\221" +
    "\174\227\163\232\106\233\121\234\062\235\103\241\123" +
    "\001\ufe17\000\014\011\173\013\063\107\353\117\057\232" +
    "\106\001\002\000\004\227\u02ea\001\ufe33\000\162\004\156" +
    "\006\115\007\010\010\065\011\173\013\063\020\137\035" +
    "\111\046\176\051\012\052\043\063\160\064\032\074\162" +
    "\075\013\076\021\077\047\100\050\101\143\102\006\103" +
    "\036\112\175\113\140\114\042\115\072\117\057\120\031" +
    "\121\075\122\052\123\133\124\114\131\067\170\113\171" +
    "\073\176\157\177\016\201\054\202\164\203\030\204\144" +
    "\205\040\206\135\207\077\210\145\211\076\212\037\213" +
    "\053\215\101\221\174\227\163\232\106\233\121\234\062" +
    "\235\103\241\123\242\u01ce\001\uff09\000\004\230\u02ec\001" +
    "\002\000\002\001\ufe25\000\004\214\u02ee\001\002\000\002" +
    "\001\ufe28\000\076\034\314\110\u02f0\126\304\127\324\130" +
    "\274\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\243\303\244\272\001" +
    "\002\000\002\001\ufe26\000\006\003\u02f5\107\u02f4\001\002" +
    "\000\002\001\uffad\000\010\003\u02f5\107\u02f4\150\u02f8\001" +
    "\002\000\002\001\uffb7\000\002\001\uffa1\000\002\001\uffa3" +
    "\000\002\001\uffac\000\002\001\uffa4\000\256\003\124\004" +
    "\156\005\170\006\115\007\010\010\065\011\035\013\063" +
    "\015\100\020\137\021\022\022\131\023\125\024\046\026" +
    "\034\030\107\032\167\035\111\037\141\043\056\044\127" +
    "\045\074\046\116\047\146\050\150\051\012\052\043\053" +
    "\041\055\165\057\027\060\011\062\102\063\160\064\032" +
    "\065\060\066\033\067\154\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\107\070\110\u02fa" +
    "\112\104\113\140\114\042\115\072\116\025\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\150\007" +
    "\170\113\171\073\176\157\177\016\201\054\202\164\203" +
    "\030\204\144\205\040\206\135\207\077\210\145\211\076" +
    "\212\037\213\053\215\101\221\044\222\064\223\020\227" +
    "\163\232\106\233\121\234\062\235\103\237\126\241\123" +
    "\001\002\000\002\001\uffa2\000\002\001\uffb8\000\002\001" +
    "\uffaa\000\016\013\u029a\016\u02b4\017\u02b3\105\u029c\106\u029b" +
    "\235\u02fe\001\002\000\002\001\ufe3d\000\030\011\173\013" +
    "\063\020\137\075\013\112\175\115\072\117\057\213\u014d" +
    "\221\341\227\u014f\232\106\001\002\000\002\001\uff5f\000" +
    "\006\125\uff5d\230\uff5d\001\ufe32\000\006\125\u0304\230\u0303" +
    "\001\002\000\004\150\u0306\001\002\000\030\011\173\013" +
    "\063\020\137\075\013\112\175\115\072\117\057\213\u014d" +
    "\221\341\227\u014f\232\106\001\002\000\002\001\uff5e\000" +
    "\002\001\uff72\000\004\227\u030a\001\ufe4d\000\004\227\u030a" +
    "\001\ufe4d\000\004\070\u030e\001\uff43\000\162\004\156\006" +
    "\115\007\010\010\065\011\173\013\063\020\137\035\111" +
    "\046\176\051\012\052\043\063\160\064\032\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\112\175\113\140\114\042\115\072\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\170\113\171\073" +
    "\176\157\177\016\201\054\202\164\203\030\204\144\205" +
    "\040\206\135\207\077\210\145\211\076\212\037\213\053" +
    "\215\101\221\174\227\163\232\106\233\121\234\062\235" +
    "\103\241\123\242\u01ce\001\uff09\000\004\230\u030c\001\002" +
    "\000\002\001\ufe4c\000\002\001\ufeb2\000\014\003\u031a\011" +
    "\173\112\u0230\115\u0233\117\057\001\002\000\004\003\u0311" +
    "\001\uff4a\000\004\071\u0313\001\uff3d\000\002\001\uff4b\000" +
    "\002\001\ufeb5\000\014\003\u0232\011\173\112\u0230\115\u0233" +
    "\117\057\001\002\000\004\125\u0237\001\uff3c\000\004\107" +
    "\u0316\001\002\000\002\001\ufef3\000\036\003\u024a\057\u024d" +
    "\061\u024f\066\033\067\154\110\u0249\116\u0248\221\u024c\222" +
    "\u0241\223\u0242\224\u0246\225\u0240\226\u024b\237\126\001\ufecc" +
    "\000\002\001\ufeb4\000\002\001\uff42\000\002\001\uff41\000" +
    "\002\001\ufeb3\000\002\001\ufe72\000\002\001\ufe70\000\074" +
    "\034\314\126\304\127\324\130\274\147\277\151\273\152" +
    "\316\153\275\154\306\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\243\303\244\272\001\ufdf2\000\004\150\u0320\001" +
    "\002\000\002\001\uff6b\000\014\034\314\172\312\173\300" +
    "\174\311\175\271\001\ufe8a\000\002\001\uffb4\000\002\001" +
    "\uff90\000\254\003\124\004\156\005\170\006\115\007\010" +
    "\010\065\011\035\013\063\015\100\020\137\021\022\022" +
    "\131\023\125\024\046\026\034\030\107\032\167\035\111" +
    "\037\141\043\056\044\127\045\074\046\116\050\150\051" +
    "\012\052\043\053\041\055\165\057\231\060\011\062\102" +
    "\063\160\064\032\065\232\066\033\067\154\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\107\070\110\u0325\112\175\113\140\114\042\115\072\116" +
    "\025\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\150\007\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\044\222" +
    "\064\223\020\227\163\232\106\233\121\234\062\235\103" +
    "\237\126\241\123\001\002\000\002\001\uff86\000\066\034" +
    "\314\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\243\303\244\272\001" +
    "\ufe6b\000\004\234\u032a\001\002\000\014\013\u029a\016\u02b4" +
    "\017\u02b3\105\u029c\106\u029b\001\ufe4e\000\010\013\u029a\105" +
    "\u029c\106\u029b\001\ufe4f\000\002\001\ufe6c\000\216\004\u01bf" +
    "\005\u01c8\011\173\013\063\022\u01b5\023\u01b3\024\u0191\025" +
    "\u0195\026\u018c\027\u01a8\030\u01a5\031\u0192\032\u01c7\033\u01ae" +
    "\034\u0194\035\u01a7\036\u018d\037\u01b9\040\u01a4\041\u0181\042" +
    "\u0197\043\u0196\044\u01b4\045\u019f\046\u01aa\047\u01ba\050\u01bc" +
    "\051\u0183\053\u018e\054\u01c4\055\u01c6\056\u0198\057\u0188\060" +
    "\u0182\061\u01c5\062\u01a1\063\u01c2\064\u018a\066\u018b\067\u01be" +
    "\070\u0187\071\u01a6\074\u01c3\075\u0184\107\u019b\112\u01a2\117" +
    "\057\120\u0189\121\u019e\122\u0193\123\u01b7\124\u01a9\126\u01c0" +
    "\127\u01c1\130\u01bd\131\u019a\215\u01a0\216\u019c\217\u019d\220" +
    "\u01b1\221\u0190\222\u0199\223\u0185\224\u01ad\225\u01ac\226\u01bb" +
    "\232\106\236\u01ab\237\u01b2\240\u0186\001\002\000\004\227" +
    "\ufe15\001\ufe22\000\004\227\u032f\001\002\000\004\227\ufe13" +
    "\001\ufe20\000\162\004\156\006\115\007\010\010\065\011" +
    "\173\013\063\020\137\035\111\046\176\051\012\052\043" +
    "\063\160\064\032\074\162\075\013\076\021\077\047\100" +
    "\050\101\143\102\006\103\036\112\175\113\140\114\042" +
    "\115\072\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\170\113\171\073\176\157\177\016\201\054" +
    "\202\164\203\030\204\144\205\040\206\135\207\077\210" +
    "\145\211\076\212\037\213\053\215\101\221\174\227\163" +
    "\232\106\233\121\234\062\235\103\241\123\242\u01ce\001" +
    "\uff09\000\004\230\u0331\001\002\000\002\001\ufe5d\000\004" +
    "\230\u0333\001\002\000\004\150\u0334\001\002\000\002\001" +
    "\uffae\000\002\001\uff7f\000\076\034\314\126\304\127\324" +
    "\130\274\147\277\150\u0337\151\273\152\316\153\275\154" +
    "\306\155\315\156\322\157\307\160\270\161\305\162\321" +
    "\163\317\164\301\165\320\166\313\167\310\170\323\171" +
    "\302\172\312\173\300\174\311\175\271\200\276\243\303" +
    "\244\272\001\002\000\002\001\uff7e\000\012\072\ufe32\107" +
    "\ufe32\111\ufe32\213\ufe32\001\ufe9f\000\004\214\u033a\001\002" +
    "\000\004\132\u033b\001\ufe2b\000\160\004\156\006\115\007" +
    "\010\010\065\011\173\013\063\020\137\035\111\046\176" +
    "\051\012\052\043\063\160\064\032\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\112\175" +
    "\113\140\114\042\115\072\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\066\034\314\147\277\151\273\152\316" +
    "\153\275\154\306\155\315\156\322\157\307\160\270\161" +
    "\305\162\321\163\317\164\301\165\320\166\313\167\310" +
    "\170\323\171\302\172\312\173\300\174\311\175\271\200" +
    "\276\243\303\244\272\001\ufeb0\000\160\004\156\006\115" +
    "\007\010\010\065\011\173\013\063\020\137\035\111\046" +
    "\176\051\012\052\043\063\160\064\032\074\162\075\013" +
    "\076\021\077\047\100\050\101\143\102\006\103\036\112" +
    "\175\113\140\114\042\115\072\117\057\120\031\121\075" +
    "\122\052\123\133\124\114\131\067\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\002\000\076\034\314\126\304\127\324\130" +
    "\274\147\277\151\273\152\316\153\275\154\306\155\315" +
    "\156\322\157\307\160\270\161\305\162\321\163\317\164" +
    "\301\165\320\166\313\167\310\170\323\171\302\172\312" +
    "\173\300\174\311\175\271\200\276\230\u033f\243\303\244" +
    "\272\001\002\000\002\001\ufdf1\000\002\001\uff50\000\004" +
    "\070\u030e\001\uff43\000\004\003\u0311\001\uff4a\000\004\071" +
    "\u0313\001\uff3d\000\002\001\uff4f\000\004\107\u0346\001\002" +
    "\000\002\001\ufef3\000\036\003\u024a\057\u024d\061\u024f\066" +
    "\033\067\154\110\u0249\116\u0248\221\u024c\222\u0241\223\u0242" +
    "\224\u0246\225\u0240\226\u024b\237\126\001\ufecc\000\002\001" +
    "\uff4e\000\160\004\156\006\115\007\010\010\065\011\173" +
    "\013\063\020\137\035\111\046\176\051\012\052\043\063" +
    "\160\064\032\074\162\075\013\076\021\077\047\100\050" +
    "\101\143\102\006\103\036\112\175\113\140\114\042\115" +
    "\072\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\170\113\171\073\176\157\177\016\201\054\202" +
    "\164\203\030\204\144\205\040\206\135\207\077\210\145" +
    "\211\076\212\037\213\053\215\101\221\174\227\163\232" +
    "\106\233\121\234\062\235\103\241\123\001\002\000\076" +
    "\034\314\126\304\127\324\130\274\147\277\151\273\152" +
    "\316\153\275\154\306\155\315\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\230\u034b\243\303\244\272\001\002\000\240\003" +
    "\124\004\156\005\170\006\115\007\010\010\065\011\035" +
    "\013\063\015\100\020\137\021\022\022\131\023\125\024" +
    "\046\026\034\030\107\032\167\035\111\037\141\043\056" +
    "\044\127\045\074\046\176\050\150\051\012\052\043\053" +
    "\041\055\165\057\231\060\011\062\102\063\160\064\032" +
    "\074\162\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\107\070\112\175\113\140\114\042\115\072" +
    "\116\025\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\150\007\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\044" +
    "\227\163\231\u034c\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\002\001\uff90\000\002\001\uff83\000\002" +
    "\001\uff22\000\254\003\124\004\156\005\170\006\115\007" +
    "\010\010\065\011\035\013\063\015\100\020\137\021\022" +
    "\022\131\023\125\024\046\025\u0350\026\034\030\107\032" +
    "\167\035\111\037\141\043\056\044\127\045\074\046\116" +
    "\050\150\051\012\052\043\053\041\055\165\057\231\060" +
    "\011\062\102\063\160\064\032\065\232\066\033\067\154" +
    "\074\162\075\013\076\021\077\047\100\050\101\143\102" +
    "\006\103\036\107\070\112\175\113\140\114\042\115\072" +
    "\116\025\117\057\120\031\121\075\122\052\123\133\124" +
    "\114\131\067\150\007\170\113\171\073\176\157\177\016" +
    "\201\054\202\164\203\030\204\144\205\040\206\135\207" +
    "\077\210\145\211\076\212\037\213\053\215\101\221\044" +
    "\222\064\223\020\227\163\232\106\233\121\234\062\235" +
    "\103\237\126\241\123\001\002\000\004\150\u0351\001\002" +
    "\000\002\001\uff21\000\004\132\u0358\001\ufef6\000\006\125" +
    "\u0355\150\u0356\001\002\000\002\001\ufef8\000\004\013\u0352" +
    "\001\002\000\002\001\uff77\000\002\001\ufef7\000\160\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\174\227\163\232\106\233\121\234" +
    "\062\235\103\241\123\001\002\000\074\034\314\126\304" +
    "\127\324\130\274\147\277\151\273\152\316\153\275\154" +
    "\306\155\315\156\322\157\307\160\270\161\305\162\321" +
    "\163\317\164\301\165\320\166\313\167\310\170\323\171" +
    "\302\172\312\173\300\174\311\175\271\200\276\243\303" +
    "\244\272\001\ufef5\000\050\034\314\156\322\157\307\160" +
    "\270\161\305\162\321\163\317\164\301\165\320\166\313" +
    "\167\310\170\323\171\302\172\312\173\300\174\311\175" +
    "\271\200\276\243\303\001\ufde7\000\002\001\uff90\000\254" +
    "\003\124\004\156\005\170\006\115\007\010\010\065\011" +
    "\035\013\063\015\100\020\137\021\022\022\131\023\125" +
    "\024\046\026\034\030\107\032\167\035\111\037\141\043" +
    "\056\044\127\045\074\046\116\050\150\051\012\052\043" +
    "\053\041\055\165\057\231\060\011\062\102\063\160\064" +
    "\032\065\232\066\033\067\154\074\162\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\107\070\110" +
    "\u035d\112\175\113\140\114\042\115\072\116\025\117\057" +
    "\120\031\121\075\122\052\123\133\124\114\131\067\150" +
    "\007\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\044\222\064\223\020" +
    "\227\163\232\106\233\121\234\062\235\103\237\126\241" +
    "\123\001\002\000\004\054\u035e\001\uff68\000\004\227\u0369" +
    "\001\002\000\002\001\uff67\000\004\056\u0365\001\uff61\000" +
    "\004\054\u035e\001\uff69\000\002\001\uff66\000\002\001\uff62" +
    "\000\002\001\uff6d\000\004\107\u0366\001\002\000\002\001" +
    "\uff90\000\254\003\124\004\156\005\170\006\115\007\010" +
    "\010\065\011\035\013\063\015\100\020\137\021\022\022" +
    "\131\023\125\024\046\026\034\030\107\032\167\035\111" +
    "\037\141\043\056\044\127\045\074\046\116\050\150\051" +
    "\012\052\043\053\041\055\165\057\231\060\011\062\102" +
    "\063\160\064\032\065\232\066\033\067\154\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\107\070\110\u0368\112\175\113\140\114\042\115\072\116" +
    "\025\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\150\007\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\044\222" +
    "\064\223\020\227\163\232\106\233\121\234\062\235\103" +
    "\237\126\241\123\001\002\000\002\001\uff60\000\012\011" +
    "\173\112\175\115\072\117\057\001\002\000\002\001\uff64" +
    "\000\006\013\u036c\153\u036d\001\002\000\004\230\u036f\001" +
    "\002\000\012\011\173\112\175\115\072\117\057\001\002" +
    "\000\002\001\uff63\000\004\107\u0370\001\002\000\002\001" +
    "\uff90\000\254\003\124\004\156\005\170\006\115\007\010" +
    "\010\065\011\035\013\063\015\100\020\137\021\022\022" +
    "\131\023\125\024\046\026\034\030\107\032\167\035\111" +
    "\037\141\043\056\044\127\045\074\046\116\050\150\051" +
    "\012\052\043\053\041\055\165\057\231\060\011\062\102" +
    "\063\160\064\032\065\232\066\033\067\154\074\162\075" +
    "\013\076\021\077\047\100\050\101\143\102\006\103\036" +
    "\107\070\110\u0372\112\175\113\140\114\042\115\072\116" +
    "\025\117\057\120\031\121\075\122\052\123\133\124\114" +
    "\131\067\150\007\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\044\222" +
    "\064\223\020\227\163\232\106\233\121\234\062\235\103" +
    "\237\126\241\123\001\002\000\002\001\uff65\000\002\001" +
    "\ufe74\000\002\001\ufe6e\000\016\013\u029a\016\u02b4\017\u02b3" +
    "\104\u0379\105\u029c\106\u029b\001\002\000\002\001\ufe3f\000" +
    "\012\013\u029a\104\u0378\105\u029c\106\u029b\001\002\000\002" +
    "\001\ufe40\000\002\001\ufe3c\000\002\001\uff8a\000\160\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\174\227\163\232\106\233\121\234" +
    "\062\235\103\241\123\001\ufeb7\000\074\034\314\126\304" +
    "\127\324\130\274\147\277\151\273\152\316\153\275\154" +
    "\306\155\315\156\322\157\307\160\270\161\305\162\321" +
    "\163\317\164\301\165\320\166\313\167\310\170\323\171" +
    "\302\172\312\173\300\174\311\175\271\200\276\243\303" +
    "\244\272\001\ufebd\000\004\150\u0381\001\002\000\004\125" +
    "\u037f\001\ufeb6\000\160\004\156\006\115\007\010\010\065" +
    "\011\173\013\063\020\137\035\111\046\176\051\012\052" +
    "\043\063\160\064\032\074\162\075\013\076\021\077\047" +
    "\100\050\101\143\102\006\103\036\112\175\113\140\114" +
    "\042\115\072\117\057\120\031\121\075\122\052\123\133" +
    "\124\114\131\067\170\113\171\073\176\157\177\016\201" +
    "\054\202\164\203\030\204\144\205\040\206\135\207\077" +
    "\210\145\211\076\212\037\213\053\215\101\221\174\227" +
    "\163\232\106\233\121\234\062\235\103\241\123\001\002" +
    "\000\074\034\314\126\304\127\324\130\274\147\277\151" +
    "\273\152\316\153\275\154\306\155\315\156\322\157\307" +
    "\160\270\161\305\162\321\163\317\164\301\165\320\166" +
    "\313\167\310\170\323\171\302\172\312\173\300\174\311" +
    "\175\271\200\276\243\303\244\272\001\ufebe\000\160\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\174\227\163\232\106\233\121\234" +
    "\062\235\103\241\123\001\ufeb7\000\004\150\u0383\001\002" +
    "\000\160\004\156\006\115\007\010\010\065\011\173\013" +
    "\063\020\137\035\111\046\176\051\012\052\043\063\160" +
    "\064\032\074\162\075\013\076\021\077\047\100\050\101" +
    "\143\102\006\103\036\112\175\113\140\114\042\115\072" +
    "\117\057\120\031\121\075\122\052\123\133\124\114\131" +
    "\067\170\113\171\073\176\157\177\016\201\054\202\164" +
    "\203\030\204\144\205\040\206\135\207\077\210\145\211" +
    "\076\212\037\213\053\215\101\221\174\227\163\232\106" +
    "\233\121\234\062\235\103\241\123\001\ufeb7\000\004\230" +
    "\u0385\001\002\000\240\003\124\004\156\005\170\006\115" +
    "\007\010\010\065\011\035\013\063\015\100\020\137\021" +
    "\022\022\131\023\125\024\046\026\034\030\107\032\167" +
    "\035\111\037\141\043\056\044\127\045\074\046\176\050" +
    "\150\051\012\052\043\053\041\055\165\057\231\060\011" +
    "\062\102\063\160\064\032\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\107\070\112\175" +
    "\113\140\114\042\115\072\116\025\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\150\007\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\044\227\163\231\u0387\232\106\233" +
    "\121\234\062\235\103\241\123\001\002\000\002\001\uff81" +
    "\000\002\001\uff90\000\002\001\uff33\000\254\003\124\004" +
    "\156\005\170\006\115\007\010\010\065\011\035\013\063" +
    "\015\100\020\137\021\022\022\131\023\125\024\046\026" +
    "\034\027\u038a\030\107\032\167\035\111\037\141\043\056" +
    "\044\127\045\074\046\116\050\150\051\012\052\043\053" +
    "\041\055\165\057\231\060\011\062\102\063\160\064\032" +
    "\065\232\066\033\067\154\074\162\075\013\076\021\077" +
    "\047\100\050\101\143\102\006\103\036\107\070\112\175" +
    "\113\140\114\042\115\072\116\025\117\057\120\031\121" +
    "\075\122\052\123\133\124\114\131\067\150\007\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\044\222\064\223\020\227\163\232" +
    "\106\233\121\234\062\235\103\237\126\241\123\001\002" +
    "\000\004\150\u038b\001\002\000\002\001\uff32\000\160\004" +
    "\156\006\115\007\010\010\065\011\173\013\063\020\137" +
    "\035\111\046\176\051\012\052\043\063\160\064\032\074" +
    "\162\075\013\076\021\077\047\100\050\101\143\102\006" +
    "\103\036\112\175\113\140\114\042\115\072\117\057\120" +
    "\031\121\075\122\052\123\133\124\114\131\067\170\113" +
    "\171\073\176\157\177\016\201\054\202\164\203\030\204" +
    "\144\205\040\206\135\207\077\210\145\211\076\212\037" +
    "\213\053\215\101\221\174\227\163\232\106\233\121\234" +
    "\062\235\103\241\123\001\002\000\076\034\314\126\304" +
    "\127\324\130\274\147\277\151\273\152\316\153\275\154" +
    "\306\155\315\156\322\157\307\160\270\161\305\162\321" +
    "\163\317\164\301\165\320\166\313\167\310\170\323\171" +
    "\302\172\312\173\300\174\311\175\271\200\276\230\u038e" +
    "\243\303\244\272\001\002\000\002\001\ufdf4\000\074\034" +
    "\314\126\304\127\324\130\274\147\277\151\273\152\316" +
    "\153\275\154\306\155\315\156\322\157\307\160\270\161" +
    "\305\162\321\163\317\164\301\165\320\166\313\167\310" +
    "\170\323\171\302\172\312\173\300\174\311\175\271\200" +
    "\276\243\303\244\272\001\ufdf3\000\002\001\ufe76\000\004" +
    "\036\u03b4\001\uff96\000\004\150\u03b3\001\002\000\004\107" +
    "\u03aa\001\002\000\002\001\uffa0\000\004\115\u03a9\001\uffbb" +
    "\000\010\011\173\115\u0399\117\057\001\002\000\002\001" +
    "\uff97\000\002\001\uff9f\000\006\011\173\117\057\001\002" +
    "\000\006\125\u039b\150\u039c\001\002\000\010\011\173\115" +
    "\u0399\117\057\001\002\000\002\001\uffa7\000\002\001\uff98" +
    "\000\004\036\u039f\001\uff94\000\004\011\u03a0\001\002\000" +
    "\002\001\uff93\000\004\107\u03a6\001\002\000\004\150\u03a5" +
    "\001\002\000\006\125\u039b\150\u03a4\001\002\000\002\001" +
    "\uffa6\000\002\001\uffa8\000\010\011\173\115\u0399\117\057" +
    "\001\002\000\006\110\u03a8\125\u039b\001\002\000\002\001" +
    "\uff9e\000\006\011\173\117\057\001\uff92\000\014\011\173" +
    "\046\u0394\047\u0398\115\u0399\117\057\001\002\000\006\110" +
    "\u03b0\125\u03b1\001\002\000\010\011\173\115\u0399\117\057" +
    "\001\002\000\002\001\uff9a\000\002\001\uff9b\000\002\001" +
    "\uff99\000\002\001\uff9d\000\014\011\173\046\u0394\047\u0398" +
    "\115\u0399\117\057\001\002\000\002\001\uff9c\000\002\001" +
    "\uffa9\000\004\011\u03b5\001\002\000\002\001\uff95\000\006" +
    "\125\u021f\150\u03b7\001\002\000\002\001\uff6a\000\002\001" +
    "\uff74\000\002\001\ufe88\000\162\004\156\006\115\007\010" +
    "\010\065\011\173\013\063\020\137\035\111\046\176\051" +
    "\012\052\043\063\160\064\032\074\u0158\075\013\076\021" +
    "\077\047\100\050\101\143\102\006\103\036\112\175\113" +
    "\140\114\042\115\072\117\057\120\031\121\075\122\052" +
    "\123\133\124\114\131\067\155\u0152\170\113\171\073\176" +
    "\157\177\016\201\054\202\164\203\030\204\144\205\040" +
    "\206\135\207\077\210\145\211\076\212\037\213\053\215" +
    "\101\221\174\227\163\232\106\233\121\234\062\235\103" +
    "\241\123\001\ufe0e\000\004\230\u03bc\001\002\000\002\001" +
    "\ufe2c\000\052\034\314\073\u03be\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\243\303\001\ufde9\000\160\004\156\006\115\007" +
    "\010\010\065\011\173\013\063\020\137\035\111\046\176" +
    "\051\012\052\043\063\160\064\032\074\162\075\013\076" +
    "\021\077\047\100\050\101\143\102\006\103\036\112\175" +
    "\113\140\114\042\115\072\117\057\120\031\121\075\122" +
    "\052\123\133\124\114\131\067\170\113\171\073\176\157" +
    "\177\016\201\054\202\164\203\030\204\144\205\040\206" +
    "\135\207\077\210\145\211\076\212\037\213\053\215\101" +
    "\221\174\227\163\232\106\233\121\234\062\235\103\241" +
    "\123\001\002\000\050\034\314\156\322\157\307\160\270" +
    "\161\305\162\321\163\317\164\301\165\320\166\313\167" +
    "\310\170\323\171\302\172\312\173\300\174\311\175\271" +
    "\200\276\243\303\001\ufde8\000\002\001\ufefc\000\006\125" +
    "\u03c2\150\u03c3\001\002\000\006\013\063\232\106\001\002" +
    "\000\002\001\uff78\000\002\001\ufefd\000\002\001\000" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u03c3\000\006\002\003\020\004\001\001\000\002\001" +
    "\001\000\076\006\154\007\152\022\165\023\160\026\117" +
    "\060\127\072\150\073\044\076\014\100\016\101\151\115" +
    "\070\116\133\117\121\121\060\122\107\140\111\141\131" +
    "\142\025\143\116\144\104\145\135\146\054\153\141\154" +
    "\023\155\050\163\065\164\022\211\013\215\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\057\u03c0\060\u03bf\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\u03bc\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\006\154\007\152\060\127\072\150\073\044\076" +
    "\014\100\u03b8\101\151\115\070\116\133\121\060\122\107" +
    "\142\025\143\116\144\104\145\135\146\054\163\065\164" +
    "\022\211\013\215\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\006\154\007\152\060" +
    "\127\066\u03b5\072\150\073\044\076\014\100\u021c\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\u0390\007\u0394\010\u0396" +
    "\011\u0392\012\u0391\016\u0399\017\u0395\031\242\116\133\001" +
    "\001\000\054\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\u038f\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\u038e\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\111\u0374\113\u0298\001\001" +
    "\000\054\006\154\007\152\060\127\072\150\073\044\076" +
    "\014\100\u0373\101\151\115\070\116\133\121\060\122\107" +
    "\142\025\143\116\144\104\145\135\146\054\163\065\164" +
    "\022\211\013\215\146\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\u0372\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u0359\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\006\061\u0352\062\u0353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u0152\101" +
    "\151\105\u0153\106\u0155\107\u0338\110\u0154\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\040" +
    "\006\154\007\152\060\127\073\044\101\151\116\133\121" +
    "\060\122\107\142\u0337\143\116\144\104\145\135\146\u014b" +
    "\163\u014a\164\022\001\001\000\002\001\001\000\054\006" +
    "\154\007\152\060\127\072\150\073\044\076\014\100\u0335" +
    "\101\151\115\070\116\133\121\060\122\107\142\025\143" +
    "\116\144\104\145\135\146\054\163\065\164\022\211\013" +
    "\215\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\111\u0327\112\u0326\113\u0298\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\u0325\101\151\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\004\220" +
    "\u0322\001\001\000\002\001\001\000\010\006\u0321\007\152" +
    "\116\133\001\001\000\054\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\u0320\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\u031d\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u031c\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\054\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\u031b\101\151\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\002\001" +
    "\001\000\022\006\154\007\152\060\341\116\133\121\337" +
    "\122\335\165\336\167\u0306\001\001\000\002\001\001\000" +
    "\006\111\u02fc\113\u0298\001\001\000\012\006\u02f1\007\152" +
    "\116\133\217\u02f0\001\001\000\002\001\001\000\004\060" +
    "\u02e1\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\006\154\007\152\060\127\072\150\073\044\076\014\100" +
    "\u02c4\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\002\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u02c3\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\054\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\u02c2\101\151\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\002\001" +
    "\001\000\004\065\u02b4\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\111\u0297\113\u0298\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\006\154" +
    "\007\152\023\u0224\026\117\060\127\072\150\073\044\076" +
    "\014\100\016\101\151\115\070\116\133\121\060\122\107" +
    "\142\025\143\116\144\104\145\135\146\054\163\065\164" +
    "\022\211\013\215\146\001\001\000\002\001\001\000\054" +
    "\006\154\007\152\060\127\072\150\073\044\076\014\100" +
    "\u0222\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\002\001\001\000\056\006\154" +
    "\007\152\060\127\066\u021d\072\150\073\044\076\014\100" +
    "\u021c\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\002\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u021b\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\u021a\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\u01fb\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\054\006\154\007\152\060" +
    "\127\072\150\073\044\076\014\100\u01fa\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\006\036\u01f8\116\u013a\001\001\000\002\001\001\000" +
    "\054\006\154\007\152\060\127\072\u01d7\073\044\076\014" +
    "\100\u01d5\101\151\115\070\116\133\121\060\122\107\142" +
    "\u01d6\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\074\u0179\001\001\000\054\006\154\007\152\060" +
    "\127\072\150\073\044\076\014\100\u0177\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\u016c\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\040\006\154\007\152\060" +
    "\127\073\044\101\151\116\133\121\060\122\107\142\u014d" +
    "\143\116\144\104\145\135\146\u014b\163\u014a\164\022\001" +
    "\001\000\054\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\u0148\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\171\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\154\007\152\047\212" +
    "\053\207\054\203\116\133\122\213\123\202\124\201\161" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\154\007\152\116\133\122\213\123" +
    "\u0112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\216\001\001\000\002" +
    "\001\001\000\004\125\217\001\001\000\004\233\222\001" +
    "\001\000\016\006\154\007\152\116\133\122\213\123\202" +
    "\124\221\001\001\000\002\001\001\000\004\172\225\001" +
    "\001\000\004\024\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\006\154\007\152\023\235\025\227\026" +
    "\117\060\127\072\150\073\044\076\014\100\016\101\151" +
    "\115\070\116\133\117\121\121\060\122\107\140\232\141" +
    "\234\142\025\143\116\144\104\145\135\146\054\153\141" +
    "\154\023\155\050\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\004\031\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\252\052\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\006\154\007\152\054\261" +
    "\116\133\122\213\123\202\124\201\161\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\266\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\002\001\001" +
    "\000\054\006\154\007\152\060\127\072\150\073\044\076" +
    "\014\100\u010b\101\151\115\070\116\133\121\060\122\107" +
    "\142\025\143\116\144\104\145\135\146\054\163\065\164" +
    "\022\211\013\215\146\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\u010a\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\054\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\u0109\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\u0108\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\u0107\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u0106\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\054\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\u0105\101\151\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\054\006" +
    "\154\007\152\060\127\072\150\073\044\076\014\100\u0100" +
    "\101\151\115\070\116\133\121\060\122\107\142\025\143" +
    "\116\144\104\145\135\146\054\163\065\164\022\211\013" +
    "\215\146\001\001\000\054\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\377\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\054" +
    "\006\154\007\152\060\127\072\150\073\044\076\014\100" +
    "\376\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\054\006\154\007\152\060\127" +
    "\072\150\073\044\076\014\100\375\101\151\115\070\116" +
    "\133\121\060\122\107\142\025\143\116\144\104\145\135" +
    "\146\054\163\065\164\022\211\013\215\146\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\374\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\054\006\154\007\152\060" +
    "\127\072\150\073\044\076\014\100\373\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\054\006\154\007\152\060\127\072\150\073\044\076" +
    "\014\100\372\101\151\115\070\116\133\121\060\122\107" +
    "\142\025\143\116\144\104\145\135\146\054\163\065\164" +
    "\022\211\013\215\146\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\371\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\054\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\370\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\367\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\366\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\365\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\054\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\364\101\151\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\022\006" +
    "\154\007\152\060\341\116\133\121\337\122\335\165\336" +
    "\167\334\001\001\000\054\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\333\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\054" +
    "\006\154\007\152\060\127\072\150\073\044\076\014\100" +
    "\332\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\054\006\154\007\152\060\127" +
    "\072\150\073\044\076\014\100\331\101\151\115\070\116" +
    "\133\121\060\122\107\142\025\143\116\144\104\145\135" +
    "\146\054\163\065\164\022\211\013\215\146\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\330\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\054\006\154\007\152\060" +
    "\127\072\150\073\044\076\014\100\327\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\054\006\154\007\152\060\127\072\150\073\044\076" +
    "\014\100\326\101\151\115\070\116\133\121\060\122\107" +
    "\142\025\143\116\144\104\145\135\146\054\163\065\164" +
    "\022\211\013\215\146\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\325\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\054\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\324\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\343\001\001\000\002\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\362\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\056\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\357\101\151\102\360\115\070\116" +
    "\133\121\060\122\107\142\025\143\116\144\104\145\135" +
    "\146\054\163\065\164\022\211\013\215\146\001\001\000" +
    "\004\060\356\001\001\000\010\060\351\104\350\116\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\006" +
    "\154\007\152\060\127\072\150\073\044\076\014\100\354" +
    "\101\151\115\070\116\133\121\060\122\107\142\025\143" +
    "\116\144\104\145\135\146\054\163\065\164\022\211\013" +
    "\215\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\u0102\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\002\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\u0104\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\u010f\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\u0114\007\152\116\133\001" +
    "\001\000\002\001\001\000\004\065\u0116\001\001\000\002" +
    "\001\001\000\026\006\154\007\152\047\u0118\053\207\054" +
    "\203\116\133\122\213\123\202\124\201\161\205\001\001" +
    "\000\002\001\001\000\004\050\u011a\001\001\000\004\125" +
    "\u011b\001\001\000\004\234\u011c\001\001\000\004\172\u011d" +
    "\001\001\000\002\001\001\000\060\006\154\007\152\023" +
    "\u0120\026\117\060\127\072\150\073\044\076\014\100\016" +
    "\101\151\115\070\116\133\121\060\122\107\142\025\143" +
    "\116\144\104\145\135\146\054\163\065\164\022\211\013" +
    "\215\146\001\001\000\004\024\u012a\001\001\000\004\043" +
    "\u0121\001\001\000\004\045\u0122\001\001\000\002\001\001" +
    "\000\060\006\154\007\152\023\u0129\026\117\060\127\072" +
    "\150\073\044\076\014\100\016\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\u0126\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\002\001\001" +
    "\000\060\006\154\007\152\023\u0128\026\117\060\127\072" +
    "\150\073\044\076\014\100\016\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\006\154\007\152\023" +
    "\235\025\227\026\117\044\u012b\060\127\072\150\073\044" +
    "\076\014\100\016\101\151\115\070\116\133\117\121\121" +
    "\060\122\107\140\232\141\234\142\025\143\116\144\104" +
    "\145\135\146\054\153\141\154\023\155\050\163\065\164" +
    "\022\211\013\215\146\001\001\000\004\046\u012c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\u0130\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u0133\001\001\000\076\006\154\007\152" +
    "\023\235\025\227\026\117\060\127\072\150\073\044\076" +
    "\014\100\016\101\151\115\070\116\133\117\121\121\060" +
    "\122\107\140\232\141\234\142\025\143\116\144\104\145" +
    "\135\146\054\153\141\154\023\155\050\163\065\164\022" +
    "\211\013\215\146\001\001\000\004\024\u0135\001\001\000" +
    "\076\006\154\007\152\023\235\025\227\026\117\060\127" +
    "\072\150\073\044\076\014\100\016\101\151\115\070\116" +
    "\133\117\121\121\060\122\107\140\232\141\234\142\025" +
    "\143\116\144\104\145\135\146\054\153\141\154\023\155" +
    "\050\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\036\u0139\116\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u013c\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\062\006\154\007\152" +
    "\023\u0144\026\117\035\u0142\060\127\072\150\073\044\076" +
    "\014\100\016\101\151\115\070\116\133\121\060\122\107" +
    "\142\025\143\116\144\104\145\135\146\054\163\065\164" +
    "\022\211\013\215\146\001\001\000\004\116\u013f\001\001" +
    "\000\002\001\001\000\054\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\u0141\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\u0145\001\001\000" +
    "\002\001\001\000\076\006\154\007\152\023\235\025\227" +
    "\026\117\060\127\072\150\073\044\076\014\100\016\101" +
    "\151\115\070\116\133\117\121\121\060\122\107\140\232" +
    "\141\234\142\025\143\116\144\104\145\135\146\054\153" +
    "\141\154\023\155\050\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\006\154\007\152\060\127\072\150\073\044\076" +
    "\014\100\u0152\101\151\105\u0153\106\u0155\107\u0156\110\u0154" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\054\006\154\007\152\060" +
    "\127\072\150\073\044\076\014\100\u014f\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\154\007" +
    "\152\060\127\073\044\101\151\116\133\121\060\122\107" +
    "\142\u0168\143\116\144\104\145\135\146\u014b\163\u014a\164" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\u0152\101\151\105\u0153\106\u0155\107\u0159\110" +
    "\u0154\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\006\154\007\152\060\127\072\150\073\044\076\014\100" +
    "\u015c\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\006\154\007\152\060\127\072\150\073\044\076" +
    "\014\100\u0152\101\151\105\u015f\106\u0155\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\u0162\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\040\006\154" +
    "\007\152\060\127\073\044\101\151\116\133\121\060\122" +
    "\107\142\u0167\143\116\144\104\145\135\146\u014b\163\u014a" +
    "\164\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\u0152\101\151\105\u0153\106\u0155\107\u0165\110\u0154\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\357\101\151\102\u016a\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\u0152\101\151\105\u0153\106\u0155\107" +
    "\u016f\110\u0154\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\006\154\007\152\060\127\073\044\101\151\116" +
    "\133\121\060\122\107\142\u0172\143\116\144\104\145\135" +
    "\146\u014b\163\u014a\164\022\166\u0173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\154" +
    "\007\152\060\127\073\044\101\151\116\133\121\060\122" +
    "\107\142\u0176\143\116\144\104\145\135\146\u014b\163\u014a" +
    "\164\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\u017a\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\u017e" +
    "\001\001\000\002\001\001\000\016\003\u01ae\004\u018e\005" +
    "\u01a2\060\u01b5\103\u01af\116\u01b7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u01d2\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\006\154\007\152\055\u01c9\056\u01cc\060\127" +
    "\071\u01cb\072\150\073\044\076\014\100\u01ca\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\u01ce\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\056\006\154\007\152\060\127\071\u01d0\072" +
    "\150\073\044\076\014\100\u01ca\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\u01f7\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\u01f5\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u01f3\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\054\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\u01f2\101\151\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\054\006" +
    "\154\007\152\060\127\072\150\073\044\076\014\100\u01f1" +
    "\101\151\115\070\116\133\121\060\122\107\142\025\143" +
    "\116\144\104\145\135\146\054\163\065\164\022\211\013" +
    "\215\146\001\001\000\054\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\u01f0\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\054" +
    "\006\154\007\152\060\127\072\150\073\044\076\014\100" +
    "\u01ef\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\054\006\154\007\152\060\127" +
    "\072\150\073\044\076\014\100\u01ee\101\151\115\070\116" +
    "\133\121\060\122\107\142\025\143\116\144\104\145\135" +
    "\146\054\163\065\164\022\211\013\215\146\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\u01ed\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\054\006\154\007\152\060" +
    "\127\072\150\073\044\076\014\100\u01ec\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\002\001\001\000\054\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\u01eb\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\u01ea\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u01e9\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\154\007\152\060\127\073\044\101\151\116\133" +
    "\121\060\122\107\142\u01f6\143\116\144\104\145\135\146" +
    "\u014b\163\u014a\164\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u01fd\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\004\037\u01ff\001\001" +
    "\000\002\001\001\000\004\040\u0212\001\001\000\004\040" +
    "\u0202\001\001\000\002\001\001\000\004\040\u0204\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\u020c\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\004\041\u0208\001\001\000\004\024\u020b\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\006\154" +
    "\007\152\023\235\025\227\026\117\060\127\072\150\073" +
    "\044\076\014\100\016\101\151\115\070\116\133\117\121" +
    "\121\060\122\107\140\232\141\234\142\025\143\116\144" +
    "\104\145\135\146\054\153\141\154\023\155\050\163\065" +
    "\164\022\211\013\215\146\001\001\000\004\041\u020d\001" +
    "\001\000\004\024\u020e\001\001\000\076\006\154\007\152" +
    "\023\235\025\227\026\117\060\127\072\150\073\044\076" +
    "\014\100\016\101\151\115\070\116\133\117\121\121\060" +
    "\122\107\140\232\141\234\142\025\143\116\144\104\145" +
    "\135\146\054\153\141\154\023\155\050\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u0214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\006\154\007\152\055\u0218\056\u01cc\060\127" +
    "\071\u01cb\072\150\073\044\076\014\100\u01ca\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\154\007\152\060\127\072\150\073\044\076\014" +
    "\100\u0220\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\u0227\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\120\u022b\001\001\000\004\226\u0239\001\001" +
    "\000\014\006\u022d\007\152\116\133\126\u0230\160\u022e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\u0233\007" +
    "\152\116\133\001\001\000\002\001\001\000\010\006\u0235" +
    "\007\152\116\133\001\001\000\002\001\001\000\012\006" +
    "\u022d\007\152\116\133\126\u0237\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u023b\001" +
    "\001\000\030\064\u0242\117\121\132\u023e\136\u0243\137\u0246" +
    "\141\u023c\154\023\155\050\162\u024d\170\u0244\174\u023d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\137\u027a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\u022d\007\152\116\133\126\u0259\175" +
    "\u0258\001\001\000\004\127\u024f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\u0252\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\006\154\007\152\060\127" +
    "\072\150\073\044\076\014\100\u0257\101\151\115\070\116" +
    "\133\121\060\122\107\142\025\143\116\144\104\145\135" +
    "\146\054\163\065\164\022\211\013\215\146\001\001\000" +
    "\002\001\001\000\004\176\u025c\001\001\000\002\001\001" +
    "\000\012\006\u022d\007\152\116\133\126\u0279\001\001\000" +
    "\030\006\u022d\007\152\116\133\126\u0263\177\u0261\200\u0260" +
    "\201\u0265\202\u0264\204\u025e\205\u0262\206\u025f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\u022d\007\152\116\133\126\u0263\201" +
    "\u0270\202\u0264\204\u025e\205\u0262\206\u025f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\u022d\007" +
    "\152\116\133\126\u026c\203\u026b\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\u022d\007\152\116\133\126" +
    "\u026e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\207\u0274\210\u0277\001" +
    "\001\000\002\001\001\000\012\003\u01ae\004\u018e\005\u0278" +
    "\116\u01b7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\u0289\001\001\000\016" +
    "\003\u01ae\004\u018e\005\u0282\116\u01b7\130\u0283\131\u0281\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\u01ae\004\u018e\005\u0282\116\u01b7\131\u0286\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\006\154" +
    "\007\152\060\127\072\150\073\044\076\014\100\u0288\101" +
    "\151\115\070\116\133\121\060\122\107\142\025\143\116" +
    "\144\104\145\135\146\054\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\012\003\u01ae\004\u018e" +
    "\005\u028a\116\u01b7\001\001\000\004\227\u028b\001\001\000" +
    "\002\001\001\000\026\006\154\007\152\047\u028d\053\207" +
    "\054\203\116\133\122\213\123\202\124\201\161\205\001" +
    "\001\000\002\001\001\000\004\230\u028f\001\001\000\004" +
    "\125\u0290\001\001\000\004\231\u0291\001\001\000\004\133" +
    "\u0292\001\001\000\002\001\001\000\004\024\u0295\001\001" +
    "\000\002\001\001\000\076\006\154\007\152\023\235\025" +
    "\227\026\117\060\127\072\150\073\044\076\014\100\016" +
    "\101\151\115\070\116\133\117\121\121\060\122\107\140" +
    "\232\141\234\142\025\143\116\144\104\145\135\146\054" +
    "\153\141\154\023\155\050\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\004\113\u02b0\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\154\007" +
    "\152\060\127\073\044\101\151\116\133\121\060\122\107" +
    "\142\u02a6\143\116\144\104\145\135\146\u014b\163\u014a\164" +
    "\022\001\001\000\054\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\u029e\101\151\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\004\113" +
    "\u029d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\006\154\007\152\060" +
    "\127\072\150\073\044\076\014\100\u02a2\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\114\u02ab\116\u02ad\001\001\000\004\116\u02aa\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\116\u02b5\001\001\000\004\221\u02b6\001\001\000" +
    "\002\001\001\000\026\006\154\007\152\047\u02b8\053\207" +
    "\054\203\116\133\122\213\123\202\124\201\161\205\001" +
    "\001\000\002\001\001\000\004\222\u02ba\001\001\000\004" +
    "\125\u02bb\001\001\000\004\223\u02bc\001\001\000\004\171" +
    "\u02bf\001\001\000\002\001\001\000\004\024\u02c0\001\001" +
    "\000\002\001\001\000\076\006\154\007\152\023\235\025" +
    "\227\026\117\060\127\072\150\073\044\076\014\100\016" +
    "\101\151\115\070\116\133\117\121\121\060\122\107\140" +
    "\232\141\234\142\025\143\116\144\104\145\135\146\054" +
    "\153\141\154\023\155\050\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\006\154\007\152\055" +
    "\u02c6\056\u01cc\060\127\071\u01cb\072\150\073\044\076\014" +
    "\100\u01ca\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\u02c9\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\002\001\001\000" +
    "\042\006\154\007\152\032\u02cb\060\127\073\044\101\151" +
    "\116\133\121\060\122\107\142\u02cd\143\116\144\104\145" +
    "\135\146\u014b\163\u014a\164\022\001\001\000\002\001\001" +
    "\000\064\006\154\007\152\060\127\072\150\073\044\076" +
    "\014\100\u0152\101\151\105\u0153\106\u0155\107\u02d4\110\u0154" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\040\006\154\007\152\060" +
    "\127\073\044\101\151\116\133\121\060\122\107\142\u02d3" +
    "\143\116\144\104\145\135\146\u014b\163\u014a\164\022\001" +
    "\001\000\002\001\001\000\064\006\154\007\152\060\127" +
    "\072\150\073\044\076\014\100\u0152\101\151\105\u0153\106" +
    "\u0155\107\u02d1\110\u0154\115\070\116\133\121\060\122\107" +
    "\142\025\143\116\144\104\145\135\146\054\163\065\164" +
    "\022\211\013\215\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\006\154\007\152\023\u02db\026\117\034\u02e0" +
    "\060\127\072\150\073\044\076\014\100\016\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\042\006\154\007\152\032\u02d8\060\127\073\044" +
    "\101\151\116\133\121\060\122\107\142\u02cd\143\116\144" +
    "\104\145\135\146\u014b\163\u014a\164\022\001\001\000\002" +
    "\001\001\000\062\006\154\007\152\023\u02db\026\117\034" +
    "\u02dc\060\127\072\150\073\044\076\014\100\016\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\004\024\u02dd\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\006\154\007\152\023\235\025\227" +
    "\026\117\060\127\072\150\073\044\076\014\100\016\101" +
    "\151\115\070\116\133\117\121\121\060\122\107\140\232" +
    "\141\234\142\025\143\116\144\104\145\135\146\054\153" +
    "\141\154\023\155\050\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\006\154\007\152\060\127" +
    "\072\150\073\044\076\014\100\u02e3\101\151\115\070\116" +
    "\133\121\060\122\107\142\025\143\116\144\104\145\135" +
    "\146\054\163\065\164\022\211\013\215\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\006\154\007\152" +
    "\060\127\072\150\073\044\076\014\100\u02ee\101\151\115" +
    "\070\116\133\121\060\122\107\142\025\143\116\144\104" +
    "\145\135\146\054\163\065\164\022\211\013\215\146\001" +
    "\001\000\056\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\357\101\151\102\u02ec\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\010\060" +
    "\351\104\u02e8\116\353\001\001\000\002\001\001\000\062" +
    "\006\154\007\152\055\u02ea\056\u01cc\060\127\071\u01cb\072" +
    "\150\073\044\076\014\100\u01ca\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\135\u02fb" +
    "\001\001\000\004\216\u02f2\001\001\000\006\134\u02f6\135" +
    "\u02f5\001\001\000\004\021\u02f8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\006\154\007\152\022\u02fa\023\160\026\117\060\127" +
    "\072\150\073\044\076\014\100\016\101\151\115\070\116" +
    "\133\117\121\121\060\122\107\140\111\141\131\142\025" +
    "\143\116\144\104\145\135\146\054\153\141\154\023\155" +
    "\050\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\u02b0\001\001\000\002\001\001\000\044\006\154\007\152" +
    "\027\u0301\030\u02ff\060\127\073\044\101\151\116\133\121" +
    "\060\122\107\142\u0300\143\116\144\104\145\135\146\u014b" +
    "\163\u014a\164\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\006\154" +
    "\007\152\030\u0304\060\127\073\044\101\151\116\133\121" +
    "\060\122\107\142\u0300\143\116\144\104\145\135\146\u014b" +
    "\163\u014a\164\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u031a\001\001\000\004\075\u0308\001\001" +
    "\000\006\156\u030e\212\u030c\001\001\000\062\006\154\007" +
    "\152\055\u030a\056\u01cc\060\127\071\u01cb\072\150\073\044" +
    "\076\014\100\u01ca\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\u022d\007\152" +
    "\116\133\126\u0318\001\001\000\004\173\u030f\001\001\000" +
    "\004\157\u0311\001\001\000\002\001\001\000\004\232\u0314" +
    "\001\001\000\014\006\u022d\007\152\116\133\126\u0230\160" +
    "\u0313\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\u0316\001\001\000\030\064\u0242\117\121\132\u023e\136" +
    "\u0243\137\u0246\141\u023c\154\023\155\050\162\u024d\170\u0317" +
    "\174\u023d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\u0323" +
    "\001\001\000\076\006\154\007\152\023\235\025\227\026" +
    "\117\060\127\072\150\073\044\076\014\100\016\101\151" +
    "\115\070\116\133\117\121\121\060\122\107\140\232\141" +
    "\234\142\025\143\116\144\104\145\135\146\054\153\141" +
    "\154\023\155\050\163\065\164\022\211\013\215\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u02b0\001\001\000\004\113\u029d\001\001\000" +
    "\002\001\001\000\016\003\u01ae\004\u018e\005\u032b\060\u032d" +
    "\103\u032c\116\u01b7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\006\154\007\152\055\u032f" +
    "\056\u01cc\060\127\071\u01cb\072\150\073\044\076\014\100" +
    "\u01ca\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\006" +
    "\154\007\152\060\127\072\150\073\044\076\014\100\u033b" +
    "\101\151\115\070\116\133\121\060\122\107\142\025\143" +
    "\116\144\104\145\135\146\054\163\065\164\022\211\013" +
    "\215\146\001\001\000\002\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\u033d\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\224" +
    "\u0340\001\001\000\004\156\u0341\001\001\000\004\173\u0342" +
    "\001\001\000\004\157\u0343\001\001\000\004\225\u0344\001" +
    "\001\000\002\001\001\000\004\063\u0346\001\001\000\030" +
    "\064\u0242\117\121\132\u023e\136\u0243\137\u0246\141\u023c\154" +
    "\023\155\050\162\u024d\170\u0347\174\u023d\001\001\000\002" +
    "\001\001\000\054\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\u0349\101\151\115\070\116\133\121\060" +
    "\122\107\142\025\143\116\144\104\145\135\146\054\163" +
    "\065\164\022\211\013\215\146\001\001\000\002\001\001" +
    "\000\062\006\154\007\152\023\u034d\026\117\042\u034c\060" +
    "\127\072\150\073\044\076\014\100\016\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\004\024\u034e\001\001\000\002\001\001\000\002\001" +
    "\001\000\076\006\154\007\152\023\235\025\227\026\117" +
    "\060\127\072\150\073\044\076\014\100\016\101\151\115" +
    "\070\116\133\117\121\121\060\122\107\140\232\141\234" +
    "\142\025\143\116\144\104\145\135\146\054\153\141\154" +
    "\023\155\050\163\065\164\022\211\013\215\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u0356\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\006\154\007" +
    "\152\060\127\072\150\073\044\076\014\100\u0358\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\u035b\001\001\000\076\006\154\007\152\023\235\025\227" +
    "\026\117\060\127\072\150\073\044\076\014\100\016\101" +
    "\151\115\070\116\133\117\121\121\060\122\107\140\232" +
    "\141\234\142\025\143\116\144\104\145\135\146\054\153" +
    "\141\154\023\155\050\163\065\164\022\211\013\215\146" +
    "\001\001\000\010\147\u035f\150\u0360\151\u035e\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\213\u0363\214\u0362" +
    "\001\001\000\004\151\u0361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u0366\001\001\000\076\006\154\007\152\023\235\025" +
    "\227\026\117\060\127\072\150\073\044\076\014\100\016" +
    "\101\151\115\070\116\133\117\121\121\060\122\107\140" +
    "\232\141\234\142\025\143\116\144\104\145\135\146\054" +
    "\153\141\154\023\155\050\163\065\164\022\211\013\215" +
    "\146\001\001\000\002\001\001\000\014\006\154\007\152" +
    "\116\133\122\u0369\152\u036a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\154\007\152" +
    "\116\133\122\u036d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\u0370\001\001\000\076\006\154\007\152" +
    "\023\235\025\227\026\117\060\127\072\150\073\044\076" +
    "\014\100\016\101\151\115\070\116\133\117\121\121\060" +
    "\122\107\140\232\141\234\142\025\143\116\144\104\145" +
    "\135\146\054\153\141\154\023\155\050\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\113\u02b0\001\001\000\002" +
    "\001\001\000\004\113\u029d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\006\154\007\152" +
    "\060\127\067\u037c\070\u037d\072\150\073\044\076\014\100" +
    "\u037b\101\151\115\070\116\133\121\060\122\107\142\025" +
    "\143\116\144\104\145\135\146\054\163\065\164\022\211" +
    "\013\215\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\006\154\007\152\060\127\072" +
    "\150\073\044\076\014\100\u037f\101\151\115\070\116\133" +
    "\121\060\122\107\142\025\143\116\144\104\145\135\146" +
    "\054\163\065\164\022\211\013\215\146\001\001\000\002" +
    "\001\001\000\060\006\154\007\152\060\127\067\u0381\070" +
    "\u037d\072\150\073\044\076\014\100\u037b\101\151\115\070" +
    "\116\133\121\060\122\107\142\025\143\116\144\104\145" +
    "\135\146\054\163\065\164\022\211\013\215\146\001\001" +
    "\000\002\001\001\000\060\006\154\007\152\060\127\067" +
    "\u0383\070\u037d\072\150\073\044\076\014\100\u037b\101\151" +
    "\115\070\116\133\121\060\122\107\142\025\143\116\144" +
    "\104\145\135\146\054\163\065\164\022\211\013\215\146" +
    "\001\001\000\002\001\001\000\062\006\154\007\152\023" +
    "\u0387\026\117\033\u0385\060\127\072\150\073\044\076\014" +
    "\100\016\101\151\115\070\116\133\121\060\122\107\142" +
    "\025\143\116\144\104\145\135\146\054\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\004\024" +
    "\u0388\001\001\000\002\001\001\000\076\006\154\007\152" +
    "\023\235\025\227\026\117\060\127\072\150\073\044\076" +
    "\014\100\016\101\151\115\070\116\133\117\121\121\060" +
    "\122\107\140\232\141\234\142\025\143\116\144\104\145" +
    "\135\146\054\153\141\154\023\155\050\163\065\164\022" +
    "\211\013\215\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\006\154\007\152\060\127\072\150\073\044" +
    "\076\014\100\u038c\101\151\115\070\116\133\121\060\122" +
    "\107\142\025\143\116\144\104\145\135\146\054\163\065" +
    "\164\022\211\013\215\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\u0390\007\u0394\010\u0396" +
    "\011\u03a0\013\u03a1\016\u03a2\116\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\u039d\007\152\116\133" +
    "\001\001\000\002\001\001\000\012\006\u0390\007\152\010" +
    "\u039c\116\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\u0390\007\152\010" +
    "\u0396\016\u03a6\116\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\116\u017e\001\001\000\020\006\u0390\007" +
    "\152\010\u03ac\014\u03aa\015\u03ad\017\u03ab\116\133\001\001" +
    "\000\002\001\001\000\012\006\u0390\007\152\010\u03ae\116" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\u0390\007\152\010" +
    "\u03ac\015\u03b1\017\u03ab\116\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\006\154\007\152\060\127\072\150\073" +
    "\044\076\014\100\u0152\101\151\105\u0153\106\u0155\107\u03ba" +
    "\110\u0154\115\070\116\133\121\060\122\107\142\025\143" +
    "\116\144\104\145\135\146\054\163\065\164\022\211\013" +
    "\215\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\006\154\007\152\060\127\072\150" +
    "\073\044\076\014\100\u03be\101\151\115\070\116\133\121" +
    "\060\122\107\142\025\143\116\144\104\145\135\146\054" +
    "\163\065\164\022\211\013\215\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\u03c3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompilerAstParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompilerAstParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompilerAstParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	class ModifierDocPair {
		public int modifier;
		public PHPDocBlock doc;

		public ModifierDocPair(int modifier, PHPDocBlock doc) {
			this.modifier = modifier;
			this.doc = doc;
		}
	}

	protected Expression detectScalar(Expression expr) {
		if (expr instanceof FullyQualifiedReference) {
			FullyQualifiedReference name = (FullyQualifiedReference) expr;
			if (name.getNamespace() == null) {
				return new Scalar(name.start(), name.end(), name.getName(), Scalar.TYPE_STRING);
			}
		}
		return expr;
	}

	protected String getTokenName(int token) {
		return PhpTokenNames.getName(token);
	}

	protected void report_expected_token_ids()
	{
		// XXX : really verbose, disable it completely for now
		// if (DLTKCore.DEBUG) {
		//     super.report_expected_token_ids();
		// }
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CompilerAstParser$actions {
  private final CompilerAstParser parser;

  /** Constructor */
  CUP$CompilerAstParser$actions(CompilerAstParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000000(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              ModuleDeclaration RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPModuleDeclaration program = parser.getModuleDeclaration();

	PhpAstLexer phpAstLexer = (PhpAstLexer) parser.getScanner();
	List commentList = phpAstLexer.getCommentList();
	Iterator i = commentList.iterator();
	while (i.hasNext()) {
		Object c = i.next();
		if (c instanceof VarComment) {
			program.getVarComments().add((VarComment) c);
		} else if (c instanceof PHPDocBlock) {
			program.getPhpDocBlocks().add((PHPDocBlock) c);
		}
		if (c instanceof Comment) {
			program.getCommentList().add((Comment) c);
		}
	}

	program.setStart(statementListleft);
	program.setEnd(statementListright + 1);
	RESULT = program;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		ModuleDeclaration start_val = (ModuleDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		RESULT = start_val;
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CompilerAstParser$parser.done_parsing();
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // reserved_non_modifiers ::= T_INCLUDE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // reserved_non_modifiers ::= T_INCLUDE_ONCE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // reserved_non_modifiers ::= T_EVAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // reserved_non_modifiers ::= T_REQUIRE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // reserved_non_modifiers ::= T_REQUIRE_ONCE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // reserved_non_modifiers ::= T_LOGICAL_OR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // reserved_non_modifiers ::= T_LOGICAL_XOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // reserved_non_modifiers ::= T_LOGICAL_AND 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reserved_non_modifiers ::= T_INSTANCEOF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reserved_non_modifiers ::= T_NEW 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reserved_non_modifiers ::= T_CLONE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // reserved_non_modifiers ::= T_EXIT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reserved_non_modifiers ::= T_IF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reserved_non_modifiers ::= T_ELSEIF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reserved_non_modifiers ::= T_ELSE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // reserved_non_modifiers ::= T_ENDIF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // reserved_non_modifiers ::= T_ECHO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // reserved_non_modifiers ::= T_DO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // reserved_non_modifiers ::= T_WHILE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // reserved_non_modifiers ::= T_ENDWHILE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reserved_non_modifiers ::= T_FOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // reserved_non_modifiers ::= T_ENDFOR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // reserved_non_modifiers ::= T_FOREACH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // reserved_non_modifiers ::= T_ENDFOREACH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // reserved_non_modifiers ::= T_DECLARE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // reserved_non_modifiers ::= T_ENDDECLARE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // reserved_non_modifiers ::= T_AS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reserved_non_modifiers ::= T_TRY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // reserved_non_modifiers ::= T_CATCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // reserved_non_modifiers ::= T_FINALLY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // reserved_non_modifiers ::= T_THROW 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // reserved_non_modifiers ::= T_USE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // reserved_non_modifiers ::= T_INSTEADOF 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // reserved_non_modifiers ::= T_GLOBAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // reserved_non_modifiers ::= T_VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // reserved_non_modifiers ::= T_UNSET 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // reserved_non_modifiers ::= T_ISSET 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // reserved_non_modifiers ::= T_EMPTY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // reserved_non_modifiers ::= T_CONTINUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // reserved_non_modifiers ::= T_GOTO 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // reserved_non_modifiers ::= T_FUNCTION 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // reserved_non_modifiers ::= T_CONST 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // reserved_non_modifiers ::= T_RETURN 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // reserved_non_modifiers ::= T_PRINT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // reserved_non_modifiers ::= T_YIELD 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // reserved_non_modifiers ::= T_LIST 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // reserved_non_modifiers ::= T_SWITCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // reserved_non_modifiers ::= T_ENDSWITCH 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // reserved_non_modifiers ::= T_CASE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // reserved_non_modifiers ::= T_DEFAULT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // reserved_non_modifiers ::= T_BREAK 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // reserved_non_modifiers ::= T_ARRAY 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // reserved_non_modifiers ::= T_CALLABLE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // reserved_non_modifiers ::= T_EXTENDS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // reserved_non_modifiers ::= T_IMPLEMENTS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // reserved_non_modifiers ::= T_NAMESPACE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // reserved_non_modifiers ::= T_TRAIT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // reserved_non_modifiers ::= T_INTERFACE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // reserved_non_modifiers ::= T_CLASS 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("reserved_non_modifiers",1, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // semi_reserved ::= reserved_non_modifiers 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // semi_reserved ::= T_STATIC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // semi_reserved ::= T_ABSTRACT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // semi_reserved ::= T_FINAL 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // semi_reserved ::= T_PRIVATE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // semi_reserved ::= T_PROTECTED 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // semi_reserved ::= T_PUBLIC 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair v = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v.value;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("semi_reserved",2, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // identifier ::= string_st 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("identifier",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // identifier ::= semi_reserved 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("identifier",3, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // namespace_name ::= namespace_name_list 
            {
              FullyQualifiedReference RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ?
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, listright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name",4, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // namespace_name_list ::= string_st 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // namespace_name_list ::= namespace_name_list T_NS_SEPARATOR string_st 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_name_list",5, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // namespace_statement_list ::= namespace_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	if (!(parser.declarations.peek() instanceof NamespaceDeclaration)) {
		statementList.add(parser.declarations.pop());
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // namespace_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_statement_list",15, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // name ::= namespace_name 
            {
              FullyQualifiedReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              FullyQualifiedReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		name.setNamespace(new NamespaceReference(nameleft, nameleft, ""));
	}
	name.getNamespace().setLocal(true);

	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // name ::= T_NS_SEPARATOR namespace_name 
            {
              FullyQualifiedReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("name",80, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // top_statement_list ::= top_statement_list top_statement 
            {
              Object RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (statement != null) {
		parser.addStatement(statement);
		if (parser.pendingStatement != null) {
			parser.addStatement(parser.pendingStatement);
			parser.pendingStatement = null;
		}
	}
	while (!parser.declarations.isEmpty()) {
		parser.addStatement(parser.declarations.pop());
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // top_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement_list",14, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$0 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, nameright, nameleft, nameright, name.getFullyQualifiedName(), null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$0",140, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // top_statement ::= T_NAMESPACE namespace_name NT$0 named_namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$1 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	NamespaceDeclaration namespace = new NamespaceDeclaration(startleft, startright, startright, startright, NamespaceDeclaration.GLOBAL, null, null);
	parser.addDeclarationStatement(namespace);
	parser.declarations.push(namespace);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$1",141, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // top_statement ::= T_NAMESPACE NT$1 namespace_body 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // top_statement ::= T_USE mixed_group_use_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		UseStatement useStatement = (UseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useStatement.setStart(startleft);
	useStatement.setEnd(endright);
	parser.declarations.push(useStatement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // top_statement ::= T_USE use_type group_use_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		UseStatement useStatement = (UseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useStatement.setStart(startleft);
	useStatement.setEnd(endright);
	useStatement.setStatementType(useType);
	parser.declarations.push(useStatement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // top_statement ::= T_USE use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // top_statement ::= T_USE use_type use_declarations T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.declarations.push(new UseStatement(startleft, endright, useDeclList, useType));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // top_statement ::= T_CONST const_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] decList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList[0].iterator();
	int pos = 0;
	while (i.hasNext()) {
		ConstantReference constant = (ConstantReference) i.next();
		Expression initializer = (Expression) decList[1].get(pos);

		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.declarations.push(new ConstantDeclaration(constant, initializer, sleft, end, pos == 0 ? s.doc : null));
		pos++;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("top_statement",16, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // named_namespace_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.setEnd(endright);
	namespaceDeclaration.setBracketed(false);

	parser.currentNamespace = namespaceDeclaration;

	parser.metUnbracketedNSDecl = true;
	if (parser.metBracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // named_namespace_body ::= namespace_body 
            {
              Statement RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("named_namespace_body",90, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // namespace_body ::= T_CURLY_OPEN namespace_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceDeclaration namespaceDeclaration = (NamespaceDeclaration) parser.declarations.pop();
	namespaceDeclaration.getBody().setStart(startleft);
	namespaceDeclaration.getBody().setEnd(endright);
	namespaceDeclaration.getBody().getStatements().clear();
	namespaceDeclaration.getBody().acceptStatements(statementList);
	namespaceDeclaration.setEnd(endright);

	parser.metBracketedNSDecl = true;
	if (parser.metUnbracketedNSDecl) {
		parser.reportError(new ASTError(namespaceDeclaration.sourceStart(), endright), "Cannot mix bracketed namespace declarations with unbracketed namespace declarations");
	}

	RESULT = namespaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // namespace_body ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (NamespaceDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("namespace_body",91, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // use_type ::= T_FUNCTION 
            {
              Integer RESULT =null;
		
	RESULT = UseStatement.T_FUNCTION;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_type",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // use_type ::= T_CONST 
            {
              Integer RESULT =null;
		
	RESULT = UseStatement.T_CONST;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_type",13, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // group_use_declaration ::= use_namespace_name T_CURLY_OPEN use_declarations T_CURLY_CLOSE 
            {
              UseStatement RESULT =null;
		int namespaceNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int namespaceNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference namespaceName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(namespaceNameleft, endright, namespaceName, useDeclList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("group_use_declaration",9, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // mixed_group_use_declaration ::= use_namespace_name T_CURLY_OPEN inline_use_declarations T_CURLY_CLOSE 
            {
              UseStatement RESULT =null;
		int namespaceNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int namespaceNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference namespaceName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UseStatement(namespaceNameleft, endright, namespaceName, useDeclList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("mixed_group_use_declaration",8, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // inline_use_declarations ::= inline_use_declarations T_COMMA inline_use_declaration 
            {
              List RESULT =null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declarations",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // inline_use_declarations ::= inline_use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declarations",10, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // inline_use_declaration ::= use_declaration 
            {
              UsePart RESULT =null;
		int useDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDeclaration = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = useDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declaration",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // inline_use_declaration ::= use_type use_declaration 
            {
              UsePart RESULT =null;
		int useTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int useTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Integer useType = (Integer)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int useDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDeclaration = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclaration.setStatementType(useType);
	RESULT = useDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inline_use_declaration",11, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // use_declarations ::= use_declarations T_COMMA use_declaration 
            {
              List RESULT =null;
		int useDeclListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int useDeclListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List useDeclList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // use_declarations ::= use_declaration 
            {
              List RESULT =null;
		int useDeclleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int useDeclright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		UsePart useDecl = (UsePart)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List useDeclList = new LinkedList();
	useDeclList.add(useDecl);
	RESULT = useDeclList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declarations",12, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // use_declaration ::= namespace_name 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // use_declaration ::= namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // use_declaration ::= T_NS_SEPARATOR namespace_name 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name, null);
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // use_declaration ::= T_NS_SEPARATOR namespace_name T_AS T_STRING 
            {
              UsePart RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int aliasNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int aliasNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String aliasName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);

	UsePart usePart = new UsePart(name,
		new SimpleReference(aliasNameleft, aliasNameright, aliasName));
	RESULT = usePart;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_declaration",6, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // use_namespace_name ::= namespace_name_list T_NS_SEPARATOR 
            {
              FullyQualifiedReference RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	StringBuilder namespaceNameBuf = new StringBuilder();
	FullyQualifiedReference fullyQualifiedName = null;
	Iterator i = list.iterator();
	while (i.hasNext()) {
		String s = (String) i.next();
		if (i.hasNext()) {
			if (namespaceNameBuf.length() != 0) {
				namespaceNameBuf.append('\\');
			}
			namespaceNameBuf.append(s);
		} else {
			NamespaceReference namespaceRef = (namespaceNameBuf.length() != 0) ?
				new NamespaceReference(listleft, listright - s.length() - 1, namespaceNameBuf.toString()) : null;
			fullyQualifiedName = new FullyQualifiedReference(listleft, endright, s, namespaceRef);
		}
	}
	RESULT = fullyQualifiedName;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_namespace_name",7, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	// Ignore null statements
	if (statement != null) {
		statementList.add(statement);
		if (statement.getKind() == ASTNodeKinds.AST_ERROR) {
			if (!parser.declarations.isEmpty()) {
				Statement node = parser.declarations.peek();
				if (node.sourceStart() == statement.sourceStart() && node.sourceEnd() == statement.sourceEnd()) {
					statementList.add(parser.declarations.pop());
				}
			}
		}
	}
	RESULT = statementList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // inner_statement_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",18, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration statement = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	// Note: we never generate K_HALT_COMPILER
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("inner_statement",19, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // statement ::= T_STRING T_NEKUDOTAIM 
            {
              Statement RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoLabel(labelleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	RESULT = error;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$2 ::= 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	Block block = new Block(tokenleft, tokenleft, new LinkedList());
	parser.declarations.push(block);


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$2",142, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // unticked_statement ::= T_CURLY_OPEN NT$2 inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = (Block) parser.declarations.pop();
	block.setEnd(endright);
	block.getStatements().clear();
	block.acceptStatements(statementList);

	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, condition, iftrue, falseStatement);

	RESULT = ifStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression innerCondition = null;
	Statement trueStatement = null;
	Statement falseStatement = iffalse;

	for (int i = 0; i < elseif[0].size(); i++) {
		innerCondition = (Expression) elseif[0].get(i);
		trueStatement = (Statement) elseif[1].get(i);
		int start = ((Integer) elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, ifTrueStatementList);

	RESULT = new IfStatement(tokenleft, iffalseright, condition, block, falseStatement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, expr, statement);
	RESULT = whileStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, expr, statement);
	RESULT = doStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForStatement(tokenleft, statementright, initializations, conditions, increasements, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, expr, caseBlock);
	RESULT = switchStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new BreakStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ContinueStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReturnStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // unticked_statement ::= T_GLOBAL simple_variable_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GlobalStatement(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticStatement(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(startleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ExpressionStatement(exprleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList(expr.sourceStart(), expr.sourceEnd());
	list.addNode(expr);
	SimpleReference functionName = new SimpleReference(startleft, startright, "use");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = new ExpressionStatement(startleft, endright, functionInvocation);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.setStart(openParright);
	list.setEnd(closeParleft);
	SimpleReference functionName = new SimpleReference(startleft, startright, "unset");
	PHPCallExpression functionInvocation = new PHPCallExpression(startleft, closeParright, null, functionName, list);
	RESULT = new ExpressionStatement(startleft, endright, functionInvocation);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr T_AS foreach_variable T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, expr, var, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr T_AS foreach_variable T_DOUBLE_ARROW foreach_variable T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ForEachStatement(tokenleft, statementright, expr, key, value, statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE const_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List names = new LinkedList();
	for (Object v : lists[0]) {
		names.add(((ConstantReference) v).getName());
	}
	RESULT = new DeclareStatement(startleft, statementright, names, lists[1], statement);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EmptyStatement(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE catches_list finally_clause 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int finallyClauseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int finallyClauseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FinallyClause finallyClause = (FinallyClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TryStatement s = new TryStatement(startleft, finallyClause != null ? finallyClauseright : catchesListright, new Block(tryBlockStartleft, tryBlockEndright, tryList), catchesList, finallyClause);
	if (finallyClause == null && catchesList.size() == 0) {
		parser.reportError(new ASTError(tryBlockEndleft, tryBlockEndright), "syntax error, catch or finally clause expected");
		parser.pendingStatement = s;
	}

	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ThrowStatement(tokenleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // unticked_statement ::= T_GOTO T_STRING T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new GotoStatement(startleft, endright, label);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // unticked_statement ::= T_OPEN_TAG_WITH_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new EchoStatement(exprListleft, endright, exprList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_statement",20, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // catches_list ::= non_empty_catches_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // catches_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catches_list",101, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // non_empty_catches_list ::= catch_clause 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // non_empty_catches_list ::= non_empty_catches_list catch_clause 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_catches_list",102, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // catch_clause ::= T_CATCH T_OPEN_PARENTHESE catch_name_list T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		String catch_word = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int catch_name_listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int catch_name_listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List<TypeReference> catch_name_list = (List<TypeReference>)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, catchList);
	VariableReference variable = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	RESULT = new CatchClause(catch_wordleft, catchBlockEndright, catch_name_list, variable, catchBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catch_clause",103, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // catch_name_list ::= name 
            {
              List<TypeReference> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList<TypeReference>();
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catch_name_list",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // catch_name_list ::= catch_name_list T_OR name 
            {
              List<TypeReference> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List<TypeReference> list = (List<TypeReference>)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(name);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("catch_name_list",104, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // finally_clause ::= non_empty_finally_clause 
            {
              FinallyClause RESULT =null;
		int clauseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int clauseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FinallyClause clause = (FinallyClause)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = clause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",137, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // finally_clause ::= 
            {
              FinallyClause RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("finally_clause",137, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // non_empty_finally_clause ::= T_FINALLY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FinallyClause RESULT =null;
		int finally_wordleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int finally_wordright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String finally_word = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int finallyBlockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int finallyBlockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object finallyBlockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int finallyListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int finallyListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List finallyList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int finallyBlockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int finallyBlockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object finallyBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block finallyBlock = new Block(finallyBlockStartleft, finallyBlockEndright, finallyList);
	FinallyClause finallyClause = new FinallyClause(finally_wordleft, finallyBlockEndright, finallyBlock);
	RESULT = finallyClause;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_finally_clause",138, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // unset_variables ::= unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              PHPCallArgumentsList RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList list = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variables",21, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // unset_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unset_variable",22, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, scalar, Scalar.TYPE_STRING);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("use_filename",23, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              PHPMethodDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",94, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",95, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("is_reference",51, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NT$3 ::= 
            {
              PHPMethodDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = new PHPMethodDeclaration(startleft, functionNameright, functionNameleft, functionNameright, functionName, 0, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), start.doc);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$3",143, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$4 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$4",144, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$5 ::= 
            {
              PHPMethodDeclaration RESULT =(PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.setReturnType(returnType);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$5",145, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st NT$3 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$4 return_type NT$5 function_body 
            {
              PHPMethodDeclaration RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (PHPMethodDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPMethodDeclaration body = (PHPMethodDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",105, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              PHPMethodDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",119, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // function_body ::= error 
            {
              PHPMethodDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (PHPMethodDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_body",119, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$6 ::= 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration;
	if (modifier.modifier == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) {
		classDeclaration = new TraitDeclaration(modifierleft, classNameright,
			classNameleft, classNameright, modifier.modifier, className, null, null,
			new Block(classNameright, classNameright, null), modifier.doc);
	}else{
		classDeclaration = new ClassDeclaration(modifierleft, classNameright,
			classNameleft, classNameright, modifier.modifier, className, null, null,
			new Block(classNameright, classNameright, null), modifier.doc);
	}
	classDeclaration.setRecovered(true);
	parser.addDeclarationStatement(classDeclaration);
	parser.declarations.push(classDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$6",146, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$7 ::= 
            {
              Statement RESULT =(Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.peek();
	if (superClass != null) {
		if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) {
			parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd()), String.format("A trait (%s) cannot extend a class. Traits can only be composed from other traits with the 'use' keyword", classDeclaration.getName()));
		} else {
			classDeclaration.setSuperClass(superClass);
		}
	}
	if (interfaces != null) {
		if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait && interfaces.size() > 0) {
		SimpleReference node = (SimpleReference) interfaces.get(0);
			parser.reportError(new ASTError(node.sourceStart(), node.sourceEnd()), String.format("Cannot use '%s' as interface on '%s' since it is a Trait", node.getName(), classDeclaration.getName()));
		} else {
			classDeclaration.setInterfaceList(interfaces);
		}
	}
	classDeclaration.setEnd(interfacesright);
	classDeclaration.getBody().setStart(interfacesright);
	classDeclaration.getBody().setEnd(interfacesright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$7",147, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // unticked_class_declaration_statement ::= class_entry_type T_STRING NT$6 extends_from errorOrNot implements_list NT$7 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}
	ClassDeclaration classDeclaration = (ClassDeclaration) parser.declarations.pop();
	classDeclaration.setRecovered(false);
	classDeclaration.setEnd(blockEndright);
	classDeclaration.getBody().setStart(blockStartleft);
	classDeclaration.getBody().setEnd(blockEndright);
	RESULT = classDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$8 ::= 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft, interfacesright, classNameleft, classNameright, className, interfaces, new Block(interfacesright, interfacesright, null), start);
	interfaceDeclaration.setRecovered(true);
	parser.declarations.push(interfaceDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$8",148, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list NT$8 T_CURLY_OPEN class_statement_list class_closure 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		PHPDocBlock start = (PHPDocBlock)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (blockEnd != null) {
		parser.reportError(new ASTError(statementListright - 1, statementListright), "syntax error, unfinished class declaration");
		parser.pendingStatement = blockEnd;
	}

	InterfaceDeclaration interfaceDeclaration = (InterfaceDeclaration) parser.declarations.pop();
	interfaceDeclaration.setRecovered(false);
	interfaceDeclaration.setEnd(blockEndright);
	interfaceDeclaration.getBody().setStart(blockStartleft);
	interfaceDeclaration.getBody().setEnd(blockEndright);
	RESULT = interfaceDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",106, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // errorOrNot ::= error 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",121, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // errorOrNot ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("errorOrNot",121, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // class_closure ::= T_CURLY_CLOSE 
            {
              Statement RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // class_closure ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_closure",118, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // class_entry_type ::= T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccDefault, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // class_entry_type ::= T_FINAL T_CLASS 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // class_entry_type ::= T_TRAIT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(org.eclipse.php.core.compiler.IPHPModifiers.AccTrait, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_entry_type",107, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // extends_from ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              TypeReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // extends_from ::= T_EXTENDS error 
            {
              TypeReference RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("extends_from",108, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // interface_entry ::= T_INTERFACE 
            {
              PHPDocBlock RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = value.doc;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_entry",77, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",78, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("implements_list",109, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (className != null) {
		list.add(className);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // interface_list ::= interface_list T_COMMA error 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // interface_list ::= error 
            {
              List RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("interface_list",110, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReferenceExpression (startleft, varright, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // foreach_variable ::= T_LIST T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ListVariable(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // foreach_variable ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_variable",24, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_statement",25, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("foreach_statement",26, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	RESULT = new Block(startleft, statementListright, statementList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("declare_statement",27, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // const_list ::= string_st T_EQUAL expr 
            {
              List[] RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();

	listKeys.add(new ConstantReference(constNameleft, constNameright, constName));
	listValues.add(expr);

	RESULT = new List[] { listKeys, listValues };

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("const_list",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // const_list ::= const_list T_COMMA string_st T_EQUAL expr 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	lists[0].add(new ConstantReference(constNameleft, constNameright, constName));
	lists[1].add(expr);
	RESULT = lists;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("const_list",28, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Block(startleft, endright, caseList);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("switch_case_list",29, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_list",30, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("case_separator",31, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("while_statement",32, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(iftrue);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("elseif_list",33, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();

	List[] returnList = new List[] { listConditions, listStatements, listTokens };

	RESULT = returnList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	((LinkedList) elseifList[0]).addFirst(condition);
	((LinkedList) elseifList[1]).addFirst(block);
	((LinkedList) elseifList[2]).addFirst(Integer.valueOf(tokenleft));

	RESULT = elseifList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",34, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("else_single",35, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, statementList);
	RESULT = block;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_else_single",36, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter_list",37, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (parameter != null) {
		list.add(parameter);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (parameter != null) {
		list.add(parameter);
	}

	if (list.size() >= 2) {
		FormalParameter previousFormalParameter = (FormalParameter) list.get(list.size() - 2);
		if (previousFormalParameter.isVariadic()) {
			parser.reportError(new ASTError(previousFormalParameter.start(), previousFormalParameter.end()), "Only the last parameter can be variadic");
		}
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int commaleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int commaright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object comma = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(commaleft, commaright), "syntax error, unexpected ','");
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",41, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // parameter ::= optional_class_type T_ELLIPSIS T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, varright, classType, v, null, false, true);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // parameter ::= optional_class_type T_REFERENCE T_ELLIPSIS T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, varright, classType, v, null, false, true);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // parameter ::= optional_class_type T_VARIABLE T_EQUAL expr 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameter(start, exprright, classType, v, expr);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL expr 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		TypeReference classType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	VariableReference v = new VariableReference(varleft, varright, var, PHPVariableKind.LOCAL);
	FormalParameter parameter = new FormalParameterByReference(start, exprright, classType, v, expr);
	RESULT = parameter;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // parameter ::= error 
            {
              FormalParameter RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError(new ASTError(theErrorleft, theErrorright));
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("parameter",42, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // optional_class_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // optional_class_type ::= type_expr 
            {
              TypeReference RESULT =null;
		int type_exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int type_exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference type_expr = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = type_expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_class_type",111, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // function_call_parameter_list ::= non_empty_argument_list 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // function_call_parameter_list ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",43, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // non_empty_argument_list ::= argument 
            {
              PHPCallArgumentsList RESULT =null;
		int argumentleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int argumentright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression argument = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList paramsList = new PHPCallArgumentsList();
	paramsList.addNode(argument);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_argument_list",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // non_empty_argument_list ::= non_empty_argument_list T_COMMA argument 
            {
              PHPCallArgumentsList RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.addNode(var);
	if (paramsList.getChilds().size() > 1) {
		ASTNode previousNode = paramsList.getChilds().get((paramsList.getChilds().size() - 2));
		if (!(var instanceof PrefixExpression) && previousNode instanceof PrefixExpression) {
			PrefixExpression pExpression = (PrefixExpression) previousNode;
			if (pExpression.getOperatorType() == PrefixExpression.OP_UNPACK) {
				parser.reportError(new ASTError(var.start(), var.end()), "Cannot use positional argument after argument unpacking");
			}
		}
	}
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_argument_list",44, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // argument ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("argument",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // argument ::= T_ELLIPSIS expr 
            {
              Expression RESULT =null;
		int ellleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ellright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ell = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(ellleft, exprright, expr, PrefixExpression.OP_UNPACK);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("argument",55, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // type_expr ::= type 
            {
              TypeReference RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference type = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = type;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("type_expr",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // type_expr ::= T_QUESTION_MARK type 
            {
              TypeReference RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference type = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	type.setNullable(true);
	RESULT = type;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("type_expr",82, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // type ::= T_ARRAY 
            {
              FullyQualifiedReference RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String array = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FullyQualifiedReference(arrayleft, arrayright, "array", null);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("type",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // type ::= T_CALLABLE 
            {
              FullyQualifiedReference RESULT =null;
		int callableleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int callableright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String callable = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FullyQualifiedReference(callableleft, callableright, "callable", null);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("type",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // type ::= name 
            {
              FullyQualifiedReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("type",81, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // return_type ::= 
            {
              TypeReference RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("return_type",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // return_type ::= T_NEKUDOTAIM type_expr 
            {
              TypeReference RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference type = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = type;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("return_type",83, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // simple_variable_list ::= simple_variable_list T_COMMA simple_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable_list",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // simple_variable_list ::= simple_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable_list",45, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // simple_variable ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference variable = new VariableReference(varleft, varright, var);
	RESULT = variable;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // simple_variable ::= T_DOLLAR simple_variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, varright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // simple_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference var = new ReflectionVariableReference(startleft, endright, varName);
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("simple_variable",46, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // static_var_list ::= static_var 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // static_var_list ::= static_var_list T_COMMA static_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(v);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var_list",47, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // static_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varleft, varright, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // static_var ::= T_VARIABLE T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference v = new VariableReference(varleft, varright, var);
	RESULT = new Assignment(varleft, exprright, v, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_var",48, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // class_statement_list ::= class_statement_list class_statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object classStatement = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (!(parser.declarations.peek() instanceof TypeDeclaration || parser.declarations.peek() instanceof AnonymousClassDeclaration)) {
		parser.declarations.pop();
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // class_statement_list ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement_list",49, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // class_statement ::= variable_modifiers property_list T_SEMICOLON 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	Iterator i = decList.iterator();
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		VariableReference variable = (VariableReference) decl[0];
		Expression initializer = (Expression) decl[1];
		int start = variable.sourceStart();
		int end = (initializer == null ? variable.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new PHPFieldDeclaration(variable, initializer, start, end, modifier.modifier, modifierleft, modifier.doc));
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // class_statement ::= method_modifiers T_CONST class_const_list T_SEMICOLON 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List lists = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	int methodStart = modifier == null ? sleft : modifierleft;
	int modifierValue = modifier == null ? 0 : modifier.modifier;
	Iterator i = lists.iterator();
	PHPDocBlock docBlock = s.doc;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	while (i.hasNext()) {
		ASTNode[] decl = (ASTNode[]) i.next();
		ConstantReference constant = (ConstantReference) decl[0];
		Expression initializer = (Expression) decl[1];

		int start = constant.sourceStart();
		int end = (initializer == null ? constant.sourceEnd() : initializer.sourceEnd());
		parser.addDeclarationStatement(new ConstantDeclaration(constant, initializer, modifierValue, sleft, end, docBlock));
		docBlock = null;
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // NT$9 ::= 
            {
              Object RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	int methodStart = modifier == null ? startleft : modifierleft;
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	PHPDocBlock docBlock = start.doc;
	if (modifier != null && modifier.doc != null) {
		docBlock = modifier.doc;
	}
	PHPMethodDeclaration methodDeclaration = new PHPMethodDeclaration(methodStart, functionNameright, functionNameleft, functionNameright, functionName, modifierValue, null, new Block(functionNameright, functionNameright, null), isReference.booleanValue(), docBlock);
	parser.addDeclarationStatement(methodDeclaration);
	parser.declarations.push(methodDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$9",149, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.acceptArguments(paramList);
	functionDeclaration.setEnd(closeParentheseright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$10",150, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	PHPMethodDeclaration functionDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	functionDeclaration.setReturnType(returnType);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$11",151, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // class_statement ::= method_modifiers T_FUNCTION is_reference identifier NT$9 T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE NT$10 return_type NT$11 method_body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair start = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-10)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int closeParentheseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int closeParentheseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object closeParenthese = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.pop();
	if (body instanceof ASTError) {
		parser.reportError(new ASTError(methodDeclaration.sourceEnd() - 1, methodDeclaration.sourceEnd()), "syntax error, unfinished method declaration");
	}
	if (parser.declarations.peek() instanceof TypeDeclaration) {
		TypeDeclaration type = (TypeDeclaration) parser.declarations.peek();
		methodDeclaration.setDeclaringTypeName(type.getName());
	}
	if (body instanceof EmptyStatement) { /* method without body part */
		Statement statement = parser.declarations.peek();
		if (statement instanceof ClassDeclaration) {
			ClassDeclaration classDeclaration = (ClassDeclaration) statement;
			if (classDeclaration.getModifiers() == org.eclipse.php.core.compiler.IPHPModifiers.AccTrait) { /* handle traits */
				if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
					parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
				}
			} else { /* handle classes */
				if ((classDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
					if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
					}
				} else {
					if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) == 0) {
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.MethodRequiresBody), Messages.MethodRequiresBody);
					} else {
						String message = Messages.getString("AbstractMethodInAbstractClass", methodDeclaration.getName(), classDeclaration.getName());
						parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodInAbstractClass), message);

						message = Messages.getString("AbstractMethodsInConcreteClass", classDeclaration.getName());
						parser.reportError(new ASTError(classDeclaration.getNameStart(), classDeclaration.getNameEnd(), PhpProblemIdentifier.AbstractMethodsInConcreteClass), message);
					}
				}
			}
		}
	} else if (body == null) { /* method with body part */
		Statement statement = parser.declarations.peek();
		if (statement instanceof ClassDeclaration) { /* handle classes and traits */
			if ((methodDeclaration.getModifiers() & Modifiers.AccAbstract) != 0) {
				parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
			}
		} else if (statement instanceof InterfaceDeclaration) {
			parser.reportError(new ASTError(methodDeclaration.getNameStart(), methodDeclaration.getNameEnd(), PhpProblemIdentifier.BodyForAbstractMethod), Messages.BodyForAbstractMethod);
		}
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-11)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // class_statement ::= T_VAR_COMMENT 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // class_statement ::= error 
            {
              Object RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parser.reportError();
	ASTError error = new ASTError(theErrorleft, theErrorright);
	parser.addDeclarationStatement(error);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // class_statement ::= trait_use_statement 
            {
              Object RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitUseStatement statement = (TraitUseStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = statement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_statement",50, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // trait_use_statement ::= T_USE trait_list trait_adaptations 
            {
              TraitUseStatement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int adaptationsleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int adaptationsright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List adaptations = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitUseStatement traitUseStatement = new TraitUseStatement(startleft, adaptationsright, list, adaptations);
	parser.addDeclarationStatement(traitUseStatement);
	parser.declarations.push(traitUseStatement);
	RESULT = traitUseStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_use_statement",122, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // trait_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TypeReference> traitList = new LinkedList<TypeReference>();
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // trait_list ::= trait_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int traitListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int traitListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List traitList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference name = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	traitList.add(name);
	RESULT = traitList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_list",123, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // trait_adaptations ::= T_SEMICOLON 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // trait_adaptations ::= T_CURLY_OPEN trait_adaptation_list T_CURLY_CLOSE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptations",124, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // trait_adaptation_list ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",125, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // trait_adaptation_list ::= non_empty_trait_adaptation_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_list",125, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // non_empty_trait_adaptation_list ::= trait_adaptation_statement 
            {
              List RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TraitStatement> taList = new LinkedList<TraitStatement>();
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // non_empty_trait_adaptation_list ::= non_empty_trait_adaptation_list trait_adaptation_statement 
            {
              List RESULT =null;
		int taListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int taListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List taList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TraitStatement statement = (TraitStatement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	taList.add(statement);
	RESULT = taList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_adaptation_list",126, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // trait_adaptation_statement ::= trait_precedence T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int precedenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int precedenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitPrecedence precedence = (TraitPrecedence)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitPrecedenceStatement traitPrecedenceStatement = new TraitPrecedenceStatement(precedenceleft, endright, precedence);
	RESULT = traitPrecedenceStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",127, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // trait_adaptation_statement ::= trait_alias T_SEMICOLON 
            {
              TraitStatement RESULT =null;
		int aliasleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int aliasright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		TraitAlias alias = (TraitAlias)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitAliasStatement traitAliasStatement = new TraitAliasStatement(aliasleft, endright, alias);
	RESULT = traitAliasStatement;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_adaptation_statement",127, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // trait_precedence ::= trait_method_reference_fully_qualified T_INSTEADOF trait_reference_list 
            {
              TraitPrecedence RESULT =null;
		int methodReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int methodReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		FullyQualifiedTraitMethodReference methodReference = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	TraitPrecedence traitPrecedence = new TraitPrecedence(methodReferenceleft, trListright, methodReference, trList);
	RESULT = traitPrecedence;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_precedence",128, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // trait_reference_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List<TypeReference> trList = new LinkedList<TypeReference>();
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",129, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // trait_reference_list ::= trait_reference_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int trListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int trListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List trList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	trList.add(className);
	RESULT = trList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_reference_list",129, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // trait_method_reference ::= T_STRING 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",130, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // trait_method_reference ::= trait_method_reference_fully_qualified 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedTraitMethodReference className = (FullyQualifiedTraitMethodReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference",130, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // trait_method_reference_fully_qualified ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              FullyQualifiedTraitMethodReference RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference className = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(functionNameleft, functionNameright, functionName);
	FullyQualifiedTraitMethodReference methodReference = new FullyQualifiedTraitMethodReference(classNameleft, functionNameright, className, functionName);
	RESULT = methodReference;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_method_reference_fully_qualified",131, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // trait_alias ::= trait_method_reference T_AS trait_modifiers identifier 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference, modifierValue,
		new SimpleReference(functionNameleft, functionNameright, functionName));
	RESULT = alias;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // trait_alias ::= trait_method_reference T_AS non_empty_trait_modifiers 
            {
              TraitAlias RESULT =null;
		int referenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int referenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression reference = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int modifierValue = modifier == null ? Modifiers.AccPublic : modifier.modifier;
	TraitAlias alias = new TraitAlias(reference, modifierValue, null);
	RESULT = alias;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_alias",132, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // non_empty_trait_modifiers ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */
  /** Method 1 with the actual generated action code for actions 300 to 600. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action_part00000001(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CompilerAstParser$result;

      /* select the action based on the action number */
      switch (CUP$CompilerAstParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // non_empty_trait_modifiers ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // non_empty_trait_modifiers ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_trait_modifiers",134, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // trait_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // trait_modifiers ::= non_empty_trait_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = modifier;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("trait_modifiers",133, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // method_body ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(endleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.setEnd(endright);
	// return an EmptyStatement object to make distinction between an abstract method and a method with an empty body
	RESULT = new EmptyStatement(endleft, endright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPMethodDeclaration methodDeclaration = (PHPMethodDeclaration) parser.declarations.peek();
	methodDeclaration.getBody().setStart(startleft);
	methodDeclaration.getBody().setEnd(endright);
	methodDeclaration.getBody().getStatements().clear();
	methodDeclaration.getBody().acceptStatements(statementList);
	methodDeclaration.setEnd(endright);
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // method_body ::= 
            {
              Statement RESULT =null;
		
	parser.reportError();
	RESULT = new ASTError(0, 0);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_body",89, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // variable_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendPropertyModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // variable_modifiers ::= T_VAR 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair var = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, var.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",112, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // method_modifiers ::= 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // method_modifiers ::= non_empty_member_modifiers 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	int result = 0;
	PHPDocBlock docBlock = null;
	for (Iterator it = list.iterator(); it.hasNext();) {
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair) it.next();
		if (modifier.doc != null) {
			docBlock = modifier.doc;
		}
		result = appendMethodModifier(listleft, listright, result, modifier.modifier);
	}
	RESULT = parser.new ModifierDocPair(result, docBlock);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("method_modifiers",88, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstParser.ModifierDocPair modifier = (CompilerAstParser.ModifierDocPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",92, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // member_modifier ::= T_PUBLIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPublic, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // member_modifier ::= T_PROTECTED 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccProtected, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // member_modifier ::= T_PRIVATE 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccPrivate, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // member_modifier ::= T_STATIC 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccStatic, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // member_modifier ::= T_ABSTRACT 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccAbstract, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // member_modifier ::= T_FINAL 
            {
              CompilerAstParser.ModifierDocPair RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair value = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = parser.new ModifierDocPair(Modifiers.AccFinal, value.doc);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_modifier",93, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // property_list ::= property_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // property_list ::= property_list T_COMMA T_VARIABLE T_EQUAL expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // property_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // property_list ::= T_VARIABLE T_EQUAL expr 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	VariableReference varId = new VariableReference(varleft, varright, var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_list",85, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",54, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // class_const_list ::= class_const_list T_COMMA class_const_decl 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ASTNode[] decl = (ASTNode[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(decl);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_const_list",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // class_const_list ::= class_const_decl 
            {
              List RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ASTNode[] decl = (ASTNode[])((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(decl);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_const_list",86, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // class_const_decl ::= identifier T_EQUAL expr 
            {
              ASTNode[] RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ASTNode[] { new ConstantReference(constNameleft, constNameright, constName), expr};

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_const_decl",87, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",52, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("for_expr",53, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // NT$12 ::= 
            {
              AnonymousClassDeclaration RESULT =null;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	Block block = new Block(0, 0, null);
	AnonymousClassDeclaration acd = new AnonymousClassDeclaration(superClassleft, superClassleft, superClass, interfaces, block);
	acd.setRecovered(true);
	parser.addDeclarationStatement(acd);
	parser.declarations.push(acd);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$12",152, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // anonymous_class ::= extends_from errorOrNot implements_list NT$12 T_CURLY_OPEN class_statement_list class_closure 
            {
              AnonymousClassDeclaration RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (AnonymousClassDeclaration) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		TypeReference superClass = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object statementList = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Statement blockEnd = (Statement)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	AnonymousClassDeclaration acd = (AnonymousClassDeclaration) parser.declarations.pop();

	acd.setEnd(blockEndright);
	acd.setRecovered(false);
	acd.getBody().setStart(blockStartleft);
	acd.getBody().setEnd(blockEndright);
	RESULT = acd;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("anonymous_class",136, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // new_expr ::= T_NEW class_name_reference ctor_arguments 
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (ctor.sourceStart() == 0) {
		ctor.setStart(classNameright);
		ctor.setEnd(classNameright);
	}
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, className, ctor);
	RESULT = classInstanceCreation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",135, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // new_expr ::= T_NEW T_CLASS ctor_arguments anonymous_class 
            {
              ClassInstanceCreation RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int tclassleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int tclassright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair tclass = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList ctor = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		AnonymousClassDeclaration ac = (AnonymousClassDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Expression className = new SimpleReference(tclassleft, tclassright, "class");
	RESULT = new ClassInstanceCreation(startleft, acright, className, ctor, ac);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_expr",135, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ListVariable listVariable = new ListVariable(startleft, endright, list);
	RESULT = new Assignment(startleft, exprright, listVariable, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // expr_without_variable ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ArrayCreation arrayCreation = new ArrayCreation(startleft, endright, list);
	RESULT = new Assignment(startleft, exprright, arrayCreation, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression refvar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, refvarright, var, Assignment.OP_REF_EQUAL, refvar);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CloneExpression(startleft, exprright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_PLUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MINUS_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MUL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // expr_without_variable ::= variable T_POW_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_POW_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_DIV_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_CONCAT_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_MOD_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_AND_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_OR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_XOR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SL_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Assignment(varleft, exprright, var, Assignment.OP_SR_EQUAL, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // expr_without_variable ::= variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // expr_without_variable ::= T_INC variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_INC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // expr_without_variable ::= variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PostfixExpression(varleft, tokenright, var, PostfixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // expr_without_variable ::= T_DEC variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new PrefixExpression(tokenleft, varright, var, PrefixExpression.OP_DEC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_BOOL_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_STRING_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_OR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_AND, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_XOR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_CONCAT, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_PLUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MINUS, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MUL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // expr_without_variable ::= expr T_POW expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_POW, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_DIV, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_MOD, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SR, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_PLUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_MINUS);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_NOT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new UnaryOperation(tokenleft, exprright, expr, UnaryOperation.OP_TILDA);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_IDENTICAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_NOT_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_RGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_SMALLER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_LGREATER, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_IS_GREATER_OR_EQUAL, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // expr_without_variable ::= expr T_SPACESHIP expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InfixExpression(expr1left, expr2right, expr1, InfixExpression.OP_SPACESHIP, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new InstanceOfExpression(exprleft, classNameright, expr, className);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // expr_without_variable ::= new_expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		ClassInstanceCreation expr = (ClassInstanceCreation)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // expr_without_variable ::= yield_expr 
            {
              Expression RESULT =null;
		int yieldleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int yieldright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		YieldExpression yield = (YieldExpression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	boolean found = false;
	ListIterator<Statement> it = parser.declarations.listIterator(parser.declarations.size());
	while (!found && it.hasPrevious()) {
		Statement prev = it.previous();
		found = (prev instanceof PHPMethodDeclaration) || (prev instanceof LambdaFunctionDeclaration);
	}
	if (parser.declarations.isEmpty() || !found) {
		parser.reportError(new ASTError(yieldleft, yieldright), "syntax error, the yield expression can only be used inside a function");
		parser.pendingStatement = yield;
	}
	RESULT = yield;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, ifTrue, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // expr_without_variable ::= expr T_QUESTION_MARK T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, condition, null, ifFalse);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // expr_without_variable ::= expr T_COALESCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ConditionalExpression(expr1left, expr2right, expr1, expr2);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_INT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_REAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_OBJECT);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_BOOL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new CastExpression(tokenleft, exprright, expr, CastExpression.TYPE_UNSET);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference functionName = new SimpleReference(startleft, startright, start);
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, functionName, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, expr);
	RESULT = ignoreError;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // expr_without_variable ::= T_BACKQUATE backticks_expr T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, list);
	RESULT = backTickExpression;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	if (expr != null) {
		list.addNode(expr);
		list.setStart(expr.sourceStart());
		list.setEnd(expr.sourceEnd());
	} else {
		list.setStart(startright);
		list.setEnd(startright);
	}
	SimpleReference name = new SimpleReference(startleft, startright, "print");
	PHPCallExpression result = new PHPCallExpression(startleft, exprright, null, name, list);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // NT$13 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	LambdaFunctionDeclaration functionDeclaration = new LambdaFunctionDeclaration(sleft, varsListright, paramList, varsList,
		new Block(varsListright, varsListright, null), isReference.booleanValue(), false, returnType);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$13",153, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // expr_without_variable ::= T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars return_type NT$13 lambda_function_body 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		LambdaFunctionDeclaration body = (LambdaFunctionDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // NT$14 ::= 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;

	LambdaFunctionDeclaration functionDeclaration = new LambdaFunctionDeclaration(sleft, varsListright, paramList, varsList,
		new Block(varsListright, varsListright, null), isReference.booleanValue(), true, returnType);
	parser.addDeclarationStatement(functionDeclaration);
	parser.declarations.push(functionDeclaration);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("NT$14",154, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // expr_without_variable ::= T_STATIC T_FUNCTION is_reference T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE lexical_vars return_type NT$14 lambda_function_body 
            {
              Expression RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Expression) ((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-7)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		List varsList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		TypeReference returnType = (TypeReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		LambdaFunctionDeclaration body = (LambdaFunctionDeclaration)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = body;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",56, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-9)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // lambda_function_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              LambdaFunctionDeclaration RESULT =null;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	LambdaFunctionDeclaration functionDeclaration = (LambdaFunctionDeclaration) parser.declarations.pop();
	Block block = functionDeclaration.getBody();
	block.setStart(blockStartleft);
	block.setEnd(blockEndright);
	block.getStatements().clear();
	block.acceptStatements(statementList);
	functionDeclaration.setEnd(blockEndright);
	RESULT = functionDeclaration;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lambda_function_body",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // lambda_function_body ::= error 
            {
              LambdaFunctionDeclaration RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = (LambdaFunctionDeclaration) parser.declarations.pop();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lambda_function_body",120, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // lexical_vars ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // lexical_vars ::= T_USE T_OPEN_PARENTHESE lexical_var_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_vars",38, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // lexical_var_list ::= lexical_var_list T_COMMA lexical_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // lexical_var_list ::= lexical_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var_list",39, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // lexical_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varleft, varright, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // lexical_var ::= T_REFERENCE T_VARIABLE 
            {
              Expression RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReferenceExpression(refleft, varright, new VariableReference(varleft, varright, var));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("lexical_var",40, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // function_call ::= name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		FullyQualifiedReference functionName = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new PHPCallExpression(functionNameleft, endright, null, functionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // function_call ::= class_name T_PAAMAYIM_NEKUDOTAYIM member_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression functionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	if (functionName.getClass() == SimpleReference.class) {
		RESULT = new StaticMethodInvocation(classNameleft, endright, className, functionName, (SimpleReference) functionName, parameters);
	}else{
		RESULT = new ReflectionStaticMethodInvocation(classNameleft, endright, className, functionName, parameters);
	}


              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // function_call ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM member_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	ReflectionStaticMethodInvocation functionInvocation = new ReflectionStaticMethodInvocation(classNameleft, endright, className, reflectionName, parameters);
	RESULT = functionInvocation;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // function_call ::= callable_expr T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression reflectionName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList parameters = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	parameters.setStart(startright);
	parameters.setEnd(endleft);
	RESULT = new ReflectionCallExpression(reflectionNameleft, endright, null, reflectionName, parameters);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("function_call",57, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // class_name ::= T_STATIC 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		CompilerAstLexer.PHPDocBlockSymbolPair s = (CompilerAstLexer.PHPDocBlockSymbolPair)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FullyQualifiedReference(sleft, sright, "static", null);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // class_name ::= name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name",79, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // fully_qualified_class_name ::= namespace_name 
            {
              TypeReference RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // fully_qualified_class_name ::= T_NAMESPACE T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (name.getNamespace() == null) {
		name.setNamespace(new NamespaceReference(nameleft, nameleft, null));
	}

	name.getNamespace().setLocal(true);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // fully_qualified_class_name ::= T_NS_SEPARATOR namespace_name 
            {
              TypeReference RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	NamespaceReference namespace = name.getNamespace();
	if (namespace == null) {
		namespace = new NamespaceReference(sleft, sright, "");
		name.setNamespace(namespace);
	}
	namespace.setGlobal(true);
	namespace.setStart(sleft);
	name.setStart(sleft);
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",84, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // class_name_reference ::= class_name 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // class_name_reference ::= new_variable 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = className;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("class_name_reference",117, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("exit_expr",58, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // backticks_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // backticks_expr ::= T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // backticks_expr ::= encaps_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("backticks_expr",72, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // ctor_arguments ::= 
            {
              PHPCallArgumentsList RESULT =null;
		
	RESULT = new PHPCallArgumentsList();

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              PHPCallArgumentsList RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	RESULT = paramsList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",59, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // scalar ::= T_LNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_INT);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // scalar ::= T_DNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_REAL);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // scalar ::= T_BNUMBER 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_BIN);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // scalar ::= T_LINE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__LINE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // scalar ::= T_FILE 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FILE__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // scalar ::= T_DIR 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__DIR__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // scalar ::= T_CLASS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__CLASS__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // scalar ::= T_TRAIT_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__TRAIT__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // scalar ::= T_METHOD_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__METHOD__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // scalar ::= T_FUNC_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, "__FUNCTION__", Scalar.TYPE_SYSTEM);
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // scalar ::= T_NS_C 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, "__NAMESPACE__", Scalar.TYPE_SYSTEM);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // scalar ::= T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING));
	RESULT = new Quote(labelleft, eright, list, label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // scalar ::= T_START_HEREDOC T_END_HEREDOC 
            {
              Expression RESULT =null;
		int labelleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int labelright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String label = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(labelleft, eright, new LinkedList(), label.charAt(0) == '\'' ? Quote.QT_NOWDOC : Quote.QT_HEREDOC);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(startleft, endright, list, Quote.QT_QUOTE);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // scalar ::= T_SINGLE_QUATE encaps_list T_SINGLE_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Quote(startleft, endright, list, Quote.QT_SINGLE);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, list, Quote.QT_HEREDOC);
	RESULT = hereDoc;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // scalar ::= dereferencable_scalar 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression name = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = name;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // scalar ::= constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression classConstant = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("scalar",60, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_comma",61, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // expr ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = var; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("expr",62, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // variable ::= callable_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // variable ::= static_member 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		StaticFieldAccess s = (StaticFieldAccess)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // variable ::= dereferencable T_OBJECT_OPERATOR property_name 
            {
              Expression RESULT =null;
		int dispatchleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int dispatchright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression dispatch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression property = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(dispatchleft, propertyright, dispatch, property);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // dereferencable ::= variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // dereferencable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // dereferencable ::= dereferencable_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable",98, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // callable_expr ::= callable_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // callable_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // callable_expr ::= dereferencable_scalar 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = s;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_expr",99, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // dereferencable_scalar ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // dereferencable_scalar ::= T_OPEN_RECT array_pair_list T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayCreation(startleft, endright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // dereferencable_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new Scalar(scalarleft, scalarright, scalar, Scalar.TYPE_STRING);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("dereferencable_scalar",100, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // callable_variable ::= simple_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // callable_variable ::= dereferencable T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (d.getClass() == VariableReference.class) {
		RESULT = new ArrayVariableReference(dleft, eright, ((VariableReference) d).getName(), dim, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		RESULT = new ReflectionArrayVariableReference(dleft, eright, d, dim, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // callable_variable ::= constant T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionArrayVariableReference(dleft, eright, d, dim, ReflectionArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // callable_variable ::= dereferencable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression dim = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (d.getClass() == VariableReference.class) {
		RESULT = new ArrayVariableReference(dleft, eright, ((VariableReference) d).getName(), dim, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		RESULT = new ReflectionArrayVariableReference(dleft, eright, d, dim, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // callable_variable ::= dereferencable T_OBJECT_OPERATOR property_name T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int chright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression ch = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression memberProperty = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList paramsList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	paramsList.setStart(startright);
	paramsList.setEnd(endleft);
	if (memberProperty.getClass() == SimpleReference.class) {
		RESULT = new PHPCallExpression(chleft, endright, ch, (SimpleReference) memberProperty, paramsList);
	} else {
		RESULT = new ReflectionCallExpression(chleft, endright, ch, memberProperty, paramsList);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // callable_variable ::= function_call 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = c;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("callable_variable",97, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // constant ::= name 
            {
              Expression RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		FullyQualifiedReference name = (FullyQualifiedReference)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = detectScalar(name);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // constant ::= class_name T_PAAMAYIM_NEKUDOTAYIM identifier 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varright, className, new ConstantReference(varleft, varright, var));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // constant ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM identifier 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticConstantAccess(classNameleft, varright, className, new ConstantReference(varleft, varright, var));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("constant",113, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // static_member ::= class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              StaticFieldAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // static_member ::= variable_class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              StaticFieldAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("static_member",114, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // new_variable ::= simple_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // new_variable ::= new_variable T_OPEN_RECT optional_expr T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (varName.getClass() == VariableReference.class) {
		RESULT = new ArrayVariableReference(varNameleft, eright, ((VariableReference) varName).getName(), index, ArrayVariableReference.VARIABLE_ARRAY);
	} else {
		RESULT = new ReflectionArrayVariableReference(varNameleft, eright, varName, index, ReflectionArrayVariableReference.VARIABLE_ARRAY);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // new_variable ::= new_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (varName.getClass() == VariableReference.class) {
		RESULT = new ArrayVariableReference(varNameleft, eright, ((VariableReference) varName).getName(), index, ArrayVariableReference.VARIABLE_HASHTABLE);
	} else {
		RESULT = new ReflectionArrayVariableReference(varNameleft, eright, varName, index, ReflectionArrayVariableReference.VARIABLE_HASHTABLE);
	}

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // new_variable ::= new_variable T_OBJECT_OPERATOR property_name 
            {
              Expression RESULT =null;
		int dispatcherleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int dispatcherright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression dispatcher = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int propertyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int propertyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression property = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(dispatcherleft, propertyright, dispatcher, property);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // new_variable ::= class_name T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // new_variable ::= new_variable T_PAAMAYIM_NEKUDOTAYIM simple_variable 
            {
              Expression RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression className = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new StaticFieldAccess(classNameleft, varright, className, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("new_variable",115, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // variable_class_name ::= dereferencable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = var;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("variable_class_name",63, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // optional_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_expr",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // optional_expr ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("optional_expr",64, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // member_name ::= identifier 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_name",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // member_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_name",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // member_name ::= simple_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("member_name",65, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // property_name ::= string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new SimpleReference(varNameleft, varNameright, varName);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_name",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // property_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_name",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // property_name ::= simple_variable 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression v = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = v;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("property_name",66, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // array_pair_list ::= non_empty_array_pair_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair_list",69, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // possible_array_pair ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_array_pair",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // possible_array_pair ::= array_pair 
            {
              Expression RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression pair = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = pair;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("possible_array_pair",67, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // non_empty_array_pair_list ::= possible_array_pair 
            {
              List RESULT =null;
		int pairleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression pair = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	if (pair != null) {
		list.add(pair);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA possible_array_pair 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int pairleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int pairright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression pair = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	if (pair != null) {
		list.add(pair);
	}
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",70, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // array_pair ::= expr T_DOUBLE_ARROW expr 
            {
              Expression RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayElement(keyleft, valueright, key, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // array_pair ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = expr;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // array_pair ::= expr T_DOUBLE_ARROW T_REFERENCE variable 
            {
              Expression RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReferenceExpression value = new ReferenceExpression(startleft, varright, var);
	RESULT = new ArrayElement(keyleft, varright, key, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // array_pair ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReferenceExpression(startleft, varright, var);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // array_pair ::= expr T_DOUBLE_ARROW T_LIST T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ListVariable value = new ListVariable(sleft, eright, list);
	RESULT = new ArrayElement(keyleft, eright, key, value);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // array_pair ::= T_LIST T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ListVariable(sleft, eright, list);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("array_pair",68, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // encaps_list ::= encaps_list T_CHARACTER 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	list.add(scalar);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // encaps_list ::= encaps_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // encaps_list ::= T_ENCAPSED_AND_WHITESPACE encaps_var 
            {
              List RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	List list = new LinkedList();
	Scalar scalar = new Scalar(stringleft, stringright, string, string == null ? Scalar.TYPE_UNKNOWN : Scalar.TYPE_STRING);
	list.add(scalar);
	list.add(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_list",71, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	ReflectionVariableReference ref = new ReflectionVariableReference(startleft, endright, var);
	RESULT = ref;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // encaps_var ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // encaps_var ::= T_VARIABLE T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ArrayVariableReference(varNameleft, endright, varName, index, ArrayVariableReference.VARIABLE_ARRAY);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // encaps_var ::= T_VARIABLE T_OBJECT_OPERATOR string_st 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new FieldAccess(varNameleft, stringright, new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL), new SimpleReference(stringleft, stringright, string));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new Scalar(varNameleft, varNameright, varName, Scalar.TYPE_STRING));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new ReflectionVariableReference(startleft, endright, new ArrayVariableReference(varNameleft, cright, varName, index, ArrayVariableReference.VARIABLE_ARRAY));

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var",73, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-5)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, string, Scalar.TYPE_STRING);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft, numright, num, Scalar.TYPE_REAL);
	RESULT = scalar;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // encaps_var_offset ::= T_VARIABLE 
            {
              Expression RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new VariableReference(varNameleft, varNameright, varName, PHPVariableKind.LOCAL);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",74, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.setStart(openParright);
	varList.setEnd(endleft);
	SimpleReference name = new SimpleReference(startleft, startright, "isset");
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, varList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "empty");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_INCLUDE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int openParleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int openParright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Object openPar = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	SimpleReference name = new SimpleReference(startleft, startright, "eval");
	PHPCallArgumentsList exprList = new PHPCallArgumentsList(openParright, endleft);
	exprList.addNode(expr);
	PHPCallExpression result = new PHPCallExpression(startleft, endright, null, name, exprList);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, expr, Include.IT_REQUIRE_ONCE);
	RESULT = result;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",75, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // isset_variables ::= variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	PHPCallArgumentsList list = new PHPCallArgumentsList();
	list.addNode(var);
	RESULT = list;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // isset_variables ::= isset_variables T_COMMA variable 
            {
              PHPCallArgumentsList RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		PHPCallArgumentsList varList = (PHPCallArgumentsList)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	varList.addNode(var);
	RESULT = varList;

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("isset_variables",116, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		 RESULT = value; 
              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("string_st",76, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // yield_expr ::= T_YIELD 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, tokenright);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // yield_expr ::= T_YIELD expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // yield_expr ::= T_YIELD expr T_DOUBLE_ARROW expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).right;
		String token = (String)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, key, expr);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-3)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // yield_expr ::= T_YIELD_FROM expr 
            {
              YieldExpression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$CompilerAstParser$stack.peek()).value;
		
	RESULT = new YieldExpression(tokenleft, exprright, expr, YieldExpression.OP_FROM);

              CUP$CompilerAstParser$result = parser.getSymbolFactory().newSymbol("yield_expr",139, ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.elementAt(CUP$CompilerAstParser$top-1)), ((java_cup.runtime.Symbol)CUP$CompilerAstParser$stack.peek()), RESULT);
            }
          return CUP$CompilerAstParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CompilerAstParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CompilerAstParser$do_action(
    int                        CUP$CompilerAstParser$act_num,
    java_cup.runtime.lr_parser CUP$CompilerAstParser$parser,
    java.util.Stack            CUP$CompilerAstParser$stack,
    int                        CUP$CompilerAstParser$top)
    throws java.lang.Exception
    {
      /* select the action handler based on the action number */
      switch (CUP$CompilerAstParser$act_num/300)
        {
          /*. . . . . . . . 0 < #action < 300. . . . . . . . . . . .*/
          case 0: 
              return CUP$CompilerAstParser$do_action_part00000000(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /*. . . . . . . . 300 < #action < 600. . . . . . . . . . . .*/
          case 1: 
              return CUP$CompilerAstParser$do_action_part00000001(
                               CUP$CompilerAstParser$act_num,
                               CUP$CompilerAstParser$parser,
                               CUP$CompilerAstParser$stack,
                               CUP$CompilerAstParser$top);
          /* . . . no valid action number: . . .*/
          default:
            throw new Exception("Invalid action number found in internal parse table");

        }      /* end of switch */
    }
}

}
