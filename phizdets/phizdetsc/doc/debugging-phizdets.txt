- Files
    - E:\fegh\phizdets\phizdetsc\src\phizdets\php\phizdets-stdlib.php--0
    - E:\fegh\phizdets\phizdetsc\src\phizdets\php\phizdets-stdlib.php--1
    - E:\fegh\phizdets\phizdetsc\src\phizdets\php\phizdets-stdlib.php
    - E:\fegh\out\production\phi-gross-test-1\lib\kotlin.js

    - phi-gross-test-1
        - E:\fegh\out\phi-tests\phi-gross-test-1\phi-gross-test-1.php--0
        - E:\fegh\out\phi-tests\phi-gross-test-1\phi-gross-test-1.php--1
        - E:\fegh\out\phi-tests\phi-gross-test-1\phi-gross-test-1.php
        - E:\fegh\out\production\phi-gross-test-1\phi-gross-test-1.js

    - aps-back
        - E:\fegh\out\phi-tests\aps-back\aps-back.php--0
        - E:\fegh\out\phi-tests\aps-back\aps-back.php--1
        - E:\fegh\out\phi-tests\aps-back\aps-back.php



- Evaluate some shit in current environment
      phiEvaluate(expr)    expr can be a piece of shit copied (and maybe edited) from generated PHP
      phiEvalMethodCall('varname', 'methodname')

- Go through frames, find places in fuck-around.php and phizdets-stdlib.php (don't open the latter)
      - Spot phiExpressionStatement()s
      - Go to same line in phi-gross-test-1.php--1 as in fuck-around.php

- Break at place where specific object property is set. PhiObject...setProperty // @debug

- Use PhiExpression->__toString()

- Add variables that can be interesting during debugging, because it's not possible to evaluate arbitrary expression standing on a frame other than current one

    Example:
        function phiExpressionStatement($expr) {
            $debug_exprToString = strval($expr);
            $debug_env = Phi::getCurrentEnv()->deepClone();
            .....
        }

- Look at $expr->debugTag and find it in generated PHP. Go to same line in non-phpified file to see shit clearer.
- Add $debugTag to PhiExpression descendant that doesn't support it yet

- Use phiDumpShit...()

- Disable shit one by one and see what happens
    - Or better, disable half of the shit, then half of the half, etc.

- Fixing line misalignment between .php and .php--1
    - First, find a point before where lines are aligned. Then look from there to see where they diverge

- Fixing wrong source mapping
    - Chances are, when replacing nodes with phi... invocations, JsNode.source is not transferred from the node being replaced to the replacement
    - Look at generated line. Which phi... invocations are there?
    - Then go to stage2(), find endVisit() for corresponding JsNode type. Are there something like `replacement.source(x.source)`?
    - Also useful is to set breakpoint in that endVisit() and see if x.source actually points to some KtElement, not null
      (because line number is taken from KtElement in SourceMapBuilderConsumer).
      `(x.source as ...).text` will give a piece of corresponding .kt source code
    - When pinning down a piece of transformed code in endVisit(), don't hesitate to add something like ```
          if (x.toString().contains("someVarName") || x.toString().contains("someLiteral) || x.toString().contains("someFunctionName")) {
              (*) "break on me" // Breakpoint here
          }
      ```
    - See // @debug-source-map

- Use phiBreakDebugger() instead of xdebug_break() in large files

- Pass shit from a large file into phiBreakDebugger() via argument: phiBreakDebugger(someShitFromCallSite)



























