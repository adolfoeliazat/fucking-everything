package vgrechka.spew

import org.jetbrains.kotlin.psi.*
import vgrechka.*
import java.io.File
import java.time.LocalDateTime

class CodeShitter(val output: StringBuilder, val indent: Int) {
    fun append(text: String) {
        output += text
    }

    fun line(text: String, numNewlines: Int = 1) {
        var s = dedent(text)
        s = reindent(indent, s)
        if (!s.endsWith("\n")) s += "\n".repeat(numNewlines)
        output += s
    }

    fun linen(text: String) {
        line(text, numNewlines = 2)
    }

    fun bigSection(title: String) {
        line("")
        line("// ==================================================================")
        line("// $title")
        line("// ==================================================================")
        line("")
    }

    fun smallSection(title: String) {
        line("// ------------------------------------------------------------------")
        line("// $title")
        line("// ------------------------------------------------------------------")
        line("")
    }

    fun headerComment() {
        line(numNewlines = 2, text = """
            /*
             * (C) Copyright 2017 Vladimir Grechka
             *
             * YOU DON'T MESS AROUND WITH THIS SHIT, IT WAS GENERATED BY A TOOL SMARTER THAN YOU
             */""")
    }
}

fun KtAnnotationEntry.freakingGetStringAttribute(name: String): String? {
    for (valueArgument in this.valueArguments) {
        val ktValueArgument = valueArgument as KtValueArgument
        val argName = ktValueArgument.getArgumentName()!!.text
        if (argName == name) {
            return (ktValueArgument.getArgumentExpression() as KtStringTemplateExpression).entries[0].text
        }
    }
    return null
}

fun KtAnnotated.freakingFindAnnotation(type: String) =
    annotationEntries.find {it.typeReference!!.text == type}


fun KtFile.freakingVisitClasses(onClass: (KtClass) -> Unit) {
    accept(object : KtVisitor<Unit, Unit>() {
        override fun visitKtFile(file: KtFile, data: Unit?) {
            for (decl in file.declarations) {
                decl.accept(this)
            }
        }

        override fun visitClass(klass: KtClass, data: Unit?) {
            onClass(klass)
        }
    })
}


